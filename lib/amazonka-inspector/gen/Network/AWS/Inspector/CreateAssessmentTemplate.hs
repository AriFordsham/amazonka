{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Inspector.CreateAssessmentTemplate
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates an assessment template for the assessment target that is specified by the ARN of the assessment target. If the <https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html service-linked role> isnâ€™t already registered, this action also creates and registers a service-linked role to grant Amazon Inspector access to AWS Services needed to perform security assessments.
module Network.AWS.Inspector.CreateAssessmentTemplate
  ( -- * Creating a request
    CreateAssessmentTemplate (..),
    mkCreateAssessmentTemplate,

    -- ** Request lenses
    catAssessmentTargetArn,
    catAssessmentTemplateName,
    catDurationInSeconds,
    catRulesPackageArns,
    catUserAttributesForFindings,

    -- * Destructuring the response
    CreateAssessmentTemplateResponse (..),
    mkCreateAssessmentTemplateResponse,

    -- ** Response lenses
    crsAssessmentTemplateArn,
    crsResponseStatus,
  )
where

import qualified Network.AWS.Inspector.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkCreateAssessmentTemplate' smart constructor.
data CreateAssessmentTemplate = CreateAssessmentTemplate'
  { -- | The ARN that specifies the assessment target for which you want to create the assessment template.
    assessmentTargetArn :: Types.Arn,
    -- | The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
    assessmentTemplateName :: Types.AssessmentTemplateName,
    -- | The duration of the assessment run in seconds.
    durationInSeconds :: Core.Natural,
    -- | The ARNs that specify the rules packages that you want to attach to the assessment template.
    rulesPackageArns :: [Types.Arn],
    -- | The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an 'Attribute' object). Within an assessment template, each key must be unique.
    userAttributesForFindings :: Core.Maybe [Types.Attribute]
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateAssessmentTemplate' value with any optional fields omitted.
mkCreateAssessmentTemplate ::
  -- | 'assessmentTargetArn'
  Types.Arn ->
  -- | 'assessmentTemplateName'
  Types.AssessmentTemplateName ->
  -- | 'durationInSeconds'
  Core.Natural ->
  CreateAssessmentTemplate
mkCreateAssessmentTemplate
  assessmentTargetArn
  assessmentTemplateName
  durationInSeconds =
    CreateAssessmentTemplate'
      { assessmentTargetArn,
        assessmentTemplateName,
        durationInSeconds,
        rulesPackageArns = Core.mempty,
        userAttributesForFindings = Core.Nothing
      }

-- | The ARN that specifies the assessment target for which you want to create the assessment template.
--
-- /Note:/ Consider using 'assessmentTargetArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catAssessmentTargetArn :: Lens.Lens' CreateAssessmentTemplate Types.Arn
catAssessmentTargetArn = Lens.field @"assessmentTargetArn"
{-# DEPRECATED catAssessmentTargetArn "Use generic-lens or generic-optics with 'assessmentTargetArn' instead." #-}

-- | The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
--
-- /Note:/ Consider using 'assessmentTemplateName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catAssessmentTemplateName :: Lens.Lens' CreateAssessmentTemplate Types.AssessmentTemplateName
catAssessmentTemplateName = Lens.field @"assessmentTemplateName"
{-# DEPRECATED catAssessmentTemplateName "Use generic-lens or generic-optics with 'assessmentTemplateName' instead." #-}

-- | The duration of the assessment run in seconds.
--
-- /Note:/ Consider using 'durationInSeconds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catDurationInSeconds :: Lens.Lens' CreateAssessmentTemplate Core.Natural
catDurationInSeconds = Lens.field @"durationInSeconds"
{-# DEPRECATED catDurationInSeconds "Use generic-lens or generic-optics with 'durationInSeconds' instead." #-}

-- | The ARNs that specify the rules packages that you want to attach to the assessment template.
--
-- /Note:/ Consider using 'rulesPackageArns' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catRulesPackageArns :: Lens.Lens' CreateAssessmentTemplate [Types.Arn]
catRulesPackageArns = Lens.field @"rulesPackageArns"
{-# DEPRECATED catRulesPackageArns "Use generic-lens or generic-optics with 'rulesPackageArns' instead." #-}

-- | The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an 'Attribute' object). Within an assessment template, each key must be unique.
--
-- /Note:/ Consider using 'userAttributesForFindings' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catUserAttributesForFindings :: Lens.Lens' CreateAssessmentTemplate (Core.Maybe [Types.Attribute])
catUserAttributesForFindings = Lens.field @"userAttributesForFindings"
{-# DEPRECATED catUserAttributesForFindings "Use generic-lens or generic-optics with 'userAttributesForFindings' instead." #-}

instance Core.FromJSON CreateAssessmentTemplate where
  toJSON CreateAssessmentTemplate {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("assessmentTargetArn" Core..= assessmentTargetArn),
            Core.Just
              ("assessmentTemplateName" Core..= assessmentTemplateName),
            Core.Just ("durationInSeconds" Core..= durationInSeconds),
            Core.Just ("rulesPackageArns" Core..= rulesPackageArns),
            ("userAttributesForFindings" Core..=)
              Core.<$> userAttributesForFindings
          ]
      )

instance Core.AWSRequest CreateAssessmentTemplate where
  type Rs CreateAssessmentTemplate = CreateAssessmentTemplateResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ("X-Amz-Target", "InspectorService.CreateAssessmentTemplate")
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          CreateAssessmentTemplateResponse'
            Core.<$> (x Core..: "assessmentTemplateArn")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkCreateAssessmentTemplateResponse' smart constructor.
data CreateAssessmentTemplateResponse = CreateAssessmentTemplateResponse'
  { -- | The ARN that specifies the assessment template that is created.
    assessmentTemplateArn :: Types.Arn,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateAssessmentTemplateResponse' value with any optional fields omitted.
mkCreateAssessmentTemplateResponse ::
  -- | 'assessmentTemplateArn'
  Types.Arn ->
  -- | 'responseStatus'
  Core.Int ->
  CreateAssessmentTemplateResponse
mkCreateAssessmentTemplateResponse
  assessmentTemplateArn
  responseStatus =
    CreateAssessmentTemplateResponse'
      { assessmentTemplateArn,
        responseStatus
      }

-- | The ARN that specifies the assessment template that is created.
--
-- /Note:/ Consider using 'assessmentTemplateArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
crsAssessmentTemplateArn :: Lens.Lens' CreateAssessmentTemplateResponse Types.Arn
crsAssessmentTemplateArn = Lens.field @"assessmentTemplateArn"
{-# DEPRECATED crsAssessmentTemplateArn "Use generic-lens or generic-optics with 'assessmentTemplateArn' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
crsResponseStatus :: Lens.Lens' CreateAssessmentTemplateResponse Core.Int
crsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED crsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
