{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Inspector.CreateAssessmentTarget
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates a new assessment target using the ARN of the resource group that is generated by 'CreateResourceGroup' . If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target. If the <https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html service-linked role> isnâ€™t already registered, this action also creates and registers a service-linked role to grant Amazon Inspector access to AWS Services needed to perform security assessments. You can create up to 50 assessment targets per AWS account. You can run up to 500 concurrent agents per AWS account. For more information, see <https://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html Amazon Inspector Assessment Targets> .
module Network.AWS.Inspector.CreateAssessmentTarget
    (
    -- * Creating a request
      CreateAssessmentTarget (..)
    , mkCreateAssessmentTarget
    -- ** Request lenses
    , catAssessmentTargetName
    , catResourceGroupArn

    -- * Destructuring the response
    , CreateAssessmentTargetResponse (..)
    , mkCreateAssessmentTargetResponse
    -- ** Response lenses
    , catrrsAssessmentTargetArn
    , catrrsResponseStatus
    ) where

import qualified Network.AWS.Inspector.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkCreateAssessmentTarget' smart constructor.
data CreateAssessmentTarget = CreateAssessmentTarget'
  { assessmentTargetName :: Types.AssessmentTargetName
    -- ^ The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
  , resourceGroupArn :: Core.Maybe Types.ResourceGroupArn
    -- ^ The ARN that specifies the resource group that is used to create the assessment target. If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateAssessmentTarget' value with any optional fields omitted.
mkCreateAssessmentTarget
    :: Types.AssessmentTargetName -- ^ 'assessmentTargetName'
    -> CreateAssessmentTarget
mkCreateAssessmentTarget assessmentTargetName
  = CreateAssessmentTarget'{assessmentTargetName,
                            resourceGroupArn = Core.Nothing}

-- | The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
--
-- /Note:/ Consider using 'assessmentTargetName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catAssessmentTargetName :: Lens.Lens' CreateAssessmentTarget Types.AssessmentTargetName
catAssessmentTargetName = Lens.field @"assessmentTargetName"
{-# INLINEABLE catAssessmentTargetName #-}
{-# DEPRECATED assessmentTargetName "Use generic-lens or generic-optics with 'assessmentTargetName' instead"  #-}

-- | The ARN that specifies the resource group that is used to create the assessment target. If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target.
--
-- /Note:/ Consider using 'resourceGroupArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catResourceGroupArn :: Lens.Lens' CreateAssessmentTarget (Core.Maybe Types.ResourceGroupArn)
catResourceGroupArn = Lens.field @"resourceGroupArn"
{-# INLINEABLE catResourceGroupArn #-}
{-# DEPRECATED resourceGroupArn "Use generic-lens or generic-optics with 'resourceGroupArn' instead"  #-}

instance Core.ToQuery CreateAssessmentTarget where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders CreateAssessmentTarget where
        toHeaders CreateAssessmentTarget{..}
          = Core.pure
              ("X-Amz-Target", "InspectorService.CreateAssessmentTarget")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON CreateAssessmentTarget where
        toJSON CreateAssessmentTarget{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just ("assessmentTargetName" Core..= assessmentTargetName),
                  ("resourceGroupArn" Core..=) Core.<$> resourceGroupArn])

instance Core.AWSRequest CreateAssessmentTarget where
        type Rs CreateAssessmentTarget = CreateAssessmentTargetResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 CreateAssessmentTargetResponse' Core.<$>
                   (x Core..: "assessmentTargetArn") Core.<*>
                     Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkCreateAssessmentTargetResponse' smart constructor.
data CreateAssessmentTargetResponse = CreateAssessmentTargetResponse'
  { assessmentTargetArn :: Types.Arn
    -- ^ The ARN that specifies the assessment target that is created.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateAssessmentTargetResponse' value with any optional fields omitted.
mkCreateAssessmentTargetResponse
    :: Types.Arn -- ^ 'assessmentTargetArn'
    -> Core.Int -- ^ 'responseStatus'
    -> CreateAssessmentTargetResponse
mkCreateAssessmentTargetResponse assessmentTargetArn responseStatus
  = CreateAssessmentTargetResponse'{assessmentTargetArn,
                                    responseStatus}

-- | The ARN that specifies the assessment target that is created.
--
-- /Note:/ Consider using 'assessmentTargetArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catrrsAssessmentTargetArn :: Lens.Lens' CreateAssessmentTargetResponse Types.Arn
catrrsAssessmentTargetArn = Lens.field @"assessmentTargetArn"
{-# INLINEABLE catrrsAssessmentTargetArn #-}
{-# DEPRECATED assessmentTargetArn "Use generic-lens or generic-optics with 'assessmentTargetArn' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catrrsResponseStatus :: Lens.Lens' CreateAssessmentTargetResponse Core.Int
catrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE catrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
