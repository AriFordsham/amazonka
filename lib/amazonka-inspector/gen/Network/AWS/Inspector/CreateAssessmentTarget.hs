{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Inspector.CreateAssessmentTarget
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates a new assessment target using the ARN of the resource group that is generated by 'CreateResourceGroup' . If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target. If the <https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html service-linked role> isnâ€™t already registered, this action also creates and registers a service-linked role to grant Amazon Inspector access to AWS Services needed to perform security assessments. You can create up to 50 assessment targets per AWS account. You can run up to 500 concurrent agents per AWS account. For more information, see <https://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html Amazon Inspector Assessment Targets> .
module Network.AWS.Inspector.CreateAssessmentTarget
  ( -- * Creating a request
    CreateAssessmentTarget (..),
    mkCreateAssessmentTarget,

    -- ** Request lenses
    catResourceGroupARN,
    catAssessmentTargetName,

    -- * Destructuring the response
    CreateAssessmentTargetResponse (..),
    mkCreateAssessmentTargetResponse,

    -- ** Response lenses
    catrsResponseStatus,
    catrsAssessmentTargetARN,
  )
where

import Network.AWS.Inspector.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkCreateAssessmentTarget' smart constructor.
data CreateAssessmentTarget = CreateAssessmentTarget'
  { resourceGroupARN ::
      Lude.Maybe Lude.Text,
    assessmentTargetName :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CreateAssessmentTarget' with the minimum fields required to make a request.
--
-- * 'assessmentTargetName' - The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
-- * 'resourceGroupARN' - The ARN that specifies the resource group that is used to create the assessment target. If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target.
mkCreateAssessmentTarget ::
  -- | 'assessmentTargetName'
  Lude.Text ->
  CreateAssessmentTarget
mkCreateAssessmentTarget pAssessmentTargetName_ =
  CreateAssessmentTarget'
    { resourceGroupARN = Lude.Nothing,
      assessmentTargetName = pAssessmentTargetName_
    }

-- | The ARN that specifies the resource group that is used to create the assessment target. If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target.
--
-- /Note:/ Consider using 'resourceGroupARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catResourceGroupARN :: Lens.Lens' CreateAssessmentTarget (Lude.Maybe Lude.Text)
catResourceGroupARN = Lens.lens (resourceGroupARN :: CreateAssessmentTarget -> Lude.Maybe Lude.Text) (\s a -> s {resourceGroupARN = a} :: CreateAssessmentTarget)
{-# DEPRECATED catResourceGroupARN "Use generic-lens or generic-optics with 'resourceGroupARN' instead." #-}

-- | The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
--
-- /Note:/ Consider using 'assessmentTargetName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catAssessmentTargetName :: Lens.Lens' CreateAssessmentTarget Lude.Text
catAssessmentTargetName = Lens.lens (assessmentTargetName :: CreateAssessmentTarget -> Lude.Text) (\s a -> s {assessmentTargetName = a} :: CreateAssessmentTarget)
{-# DEPRECATED catAssessmentTargetName "Use generic-lens or generic-optics with 'assessmentTargetName' instead." #-}

instance Lude.AWSRequest CreateAssessmentTarget where
  type Rs CreateAssessmentTarget = CreateAssessmentTargetResponse
  request = Req.postJSON inspectorService
  response =
    Res.receiveJSON
      ( \s h x ->
          CreateAssessmentTargetResponse'
            Lude.<$> (Lude.pure (Lude.fromEnum s))
            Lude.<*> (x Lude..:> "assessmentTargetArn")
      )

instance Lude.ToHeaders CreateAssessmentTarget where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("InspectorService.CreateAssessmentTarget" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON CreateAssessmentTarget where
  toJSON CreateAssessmentTarget' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("resourceGroupArn" Lude..=) Lude.<$> resourceGroupARN,
            Lude.Just ("assessmentTargetName" Lude..= assessmentTargetName)
          ]
      )

instance Lude.ToPath CreateAssessmentTarget where
  toPath = Lude.const "/"

instance Lude.ToQuery CreateAssessmentTarget where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkCreateAssessmentTargetResponse' smart constructor.
data CreateAssessmentTargetResponse = CreateAssessmentTargetResponse'
  { responseStatus ::
      Lude.Int,
    assessmentTargetARN ::
      Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CreateAssessmentTargetResponse' with the minimum fields required to make a request.
--
-- * 'assessmentTargetARN' - The ARN that specifies the assessment target that is created.
-- * 'responseStatus' - The response status code.
mkCreateAssessmentTargetResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  -- | 'assessmentTargetARN'
  Lude.Text ->
  CreateAssessmentTargetResponse
mkCreateAssessmentTargetResponse
  pResponseStatus_
  pAssessmentTargetARN_ =
    CreateAssessmentTargetResponse'
      { responseStatus =
          pResponseStatus_,
        assessmentTargetARN = pAssessmentTargetARN_
      }

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catrsResponseStatus :: Lens.Lens' CreateAssessmentTargetResponse Lude.Int
catrsResponseStatus = Lens.lens (responseStatus :: CreateAssessmentTargetResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: CreateAssessmentTargetResponse)
{-# DEPRECATED catrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}

-- | The ARN that specifies the assessment target that is created.
--
-- /Note:/ Consider using 'assessmentTargetARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
catrsAssessmentTargetARN :: Lens.Lens' CreateAssessmentTargetResponse Lude.Text
catrsAssessmentTargetARN = Lens.lens (assessmentTargetARN :: CreateAssessmentTargetResponse -> Lude.Text) (\s a -> s {assessmentTargetARN = a} :: CreateAssessmentTargetResponse)
{-# DEPRECATED catrsAssessmentTargetARN "Use generic-lens or generic-optics with 'assessmentTargetARN' instead." #-}
