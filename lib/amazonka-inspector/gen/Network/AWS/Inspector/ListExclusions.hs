{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Inspector.ListExclusions
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- List exclusions that are generated by the assessment run.
--
-- This operation returns paginated results.
module Network.AWS.Inspector.ListExclusions
  ( -- * Creating a request
    ListExclusions (..),
    mkListExclusions,

    -- ** Request lenses
    leNextToken,
    leAssessmentRunARN,
    leMaxResults,

    -- * Destructuring the response
    ListExclusionsResponse (..),
    mkListExclusionsResponse,

    -- ** Response lenses
    lersExclusionARNs,
    lersNextToken,
    lersResponseStatus,
  )
where

import Network.AWS.Inspector.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Page
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkListExclusions' smart constructor.
data ListExclusions = ListExclusions'
  { -- | You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
    nextToken :: Lude.Maybe Lude.Text,
    -- | The ARN of the assessment run that generated the exclusions that you want to list.
    assessmentRunARN :: Lude.Text,
    -- | You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.
    maxResults :: Lude.Maybe Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListExclusions' with the minimum fields required to make a request.
--
-- * 'nextToken' - You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
-- * 'assessmentRunARN' - The ARN of the assessment run that generated the exclusions that you want to list.
-- * 'maxResults' - You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.
mkListExclusions ::
  -- | 'assessmentRunARN'
  Lude.Text ->
  ListExclusions
mkListExclusions pAssessmentRunARN_ =
  ListExclusions'
    { nextToken = Lude.Nothing,
      assessmentRunARN = pAssessmentRunARN_,
      maxResults = Lude.Nothing
    }

-- | You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
leNextToken :: Lens.Lens' ListExclusions (Lude.Maybe Lude.Text)
leNextToken = Lens.lens (nextToken :: ListExclusions -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListExclusions)
{-# DEPRECATED leNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The ARN of the assessment run that generated the exclusions that you want to list.
--
-- /Note:/ Consider using 'assessmentRunARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
leAssessmentRunARN :: Lens.Lens' ListExclusions Lude.Text
leAssessmentRunARN = Lens.lens (assessmentRunARN :: ListExclusions -> Lude.Text) (\s a -> s {assessmentRunARN = a} :: ListExclusions)
{-# DEPRECATED leAssessmentRunARN "Use generic-lens or generic-optics with 'assessmentRunARN' instead." #-}

-- | You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
leMaxResults :: Lens.Lens' ListExclusions (Lude.Maybe Lude.Int)
leMaxResults = Lens.lens (maxResults :: ListExclusions -> Lude.Maybe Lude.Int) (\s a -> s {maxResults = a} :: ListExclusions)
{-# DEPRECATED leMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

instance Page.AWSPager ListExclusions where
  page rq rs
    | Page.stop (rs Lens.^. lersNextToken) = Lude.Nothing
    | Page.stop (rs Lens.^. lersExclusionARNs) = Lude.Nothing
    | Lude.otherwise =
      Lude.Just Lude.$
        rq
          Lude.& leNextToken Lens..~ rs Lens.^. lersNextToken

instance Lude.AWSRequest ListExclusions where
  type Rs ListExclusions = ListExclusionsResponse
  request = Req.postJSON inspectorService
  response =
    Res.receiveJSON
      ( \s h x ->
          ListExclusionsResponse'
            Lude.<$> (x Lude..?> "exclusionArns" Lude..!@ Lude.mempty)
            Lude.<*> (x Lude..?> "nextToken")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders ListExclusions where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("InspectorService.ListExclusions" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON ListExclusions where
  toJSON ListExclusions' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("nextToken" Lude..=) Lude.<$> nextToken,
            Lude.Just ("assessmentRunArn" Lude..= assessmentRunARN),
            ("maxResults" Lude..=) Lude.<$> maxResults
          ]
      )

instance Lude.ToPath ListExclusions where
  toPath = Lude.const "/"

instance Lude.ToQuery ListExclusions where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkListExclusionsResponse' smart constructor.
data ListExclusionsResponse = ListExclusionsResponse'
  { -- | A list of exclusions' ARNs returned by the action.
    exclusionARNs :: [Lude.Text],
    -- | When a response is generated, if there is more data to be listed, this parameters is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
    nextToken :: Lude.Maybe Lude.Text,
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListExclusionsResponse' with the minimum fields required to make a request.
--
-- * 'exclusionARNs' - A list of exclusions' ARNs returned by the action.
-- * 'nextToken' - When a response is generated, if there is more data to be listed, this parameters is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
-- * 'responseStatus' - The response status code.
mkListExclusionsResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  ListExclusionsResponse
mkListExclusionsResponse pResponseStatus_ =
  ListExclusionsResponse'
    { exclusionARNs = Lude.mempty,
      nextToken = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | A list of exclusions' ARNs returned by the action.
--
-- /Note:/ Consider using 'exclusionARNs' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lersExclusionARNs :: Lens.Lens' ListExclusionsResponse [Lude.Text]
lersExclusionARNs = Lens.lens (exclusionARNs :: ListExclusionsResponse -> [Lude.Text]) (\s a -> s {exclusionARNs = a} :: ListExclusionsResponse)
{-# DEPRECATED lersExclusionARNs "Use generic-lens or generic-optics with 'exclusionARNs' instead." #-}

-- | When a response is generated, if there is more data to be listed, this parameters is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lersNextToken :: Lens.Lens' ListExclusionsResponse (Lude.Maybe Lude.Text)
lersNextToken = Lens.lens (nextToken :: ListExclusionsResponse -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListExclusionsResponse)
{-# DEPRECATED lersNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lersResponseStatus :: Lens.Lens' ListExclusionsResponse Lude.Int
lersResponseStatus = Lens.lens (responseStatus :: ListExclusionsResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: ListExclusionsResponse)
{-# DEPRECATED lersResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
