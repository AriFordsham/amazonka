{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.EC2.CreateVpcEndpoint
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace Partner, or another AWS account. For more information, see <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html VPC Endpoints> in the /Amazon Virtual Private Cloud User Guide/ .
--
-- A @gateway@ endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint, which will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.
-- An @interface@ endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.
-- A @GatewayLoadBalancer@ endpoint is a network interface in your subnet that serves an endpoint for communicating with a Gateway Load Balancer that you've configured as a VPC endpoint service.
-- Use 'DescribeVpcEndpointServices' to get a list of supported services.
module Network.AWS.EC2.CreateVpcEndpoint
    (
    -- * Creating a request
      CreateVpcEndpoint (..)
    , mkCreateVpcEndpoint
    -- ** Request lenses
    , cvefVpcId
    , cvefServiceName
    , cvefClientToken
    , cvefDryRun
    , cvefPolicyDocument
    , cvefPrivateDnsEnabled
    , cvefRouteTableIds
    , cvefSecurityGroupIds
    , cvefSubnetIds
    , cvefTagSpecifications
    , cvefVpcEndpointType

    -- * Destructuring the response
    , CreateVpcEndpointResponse (..)
    , mkCreateVpcEndpointResponse
    -- ** Response lenses
    , cverrsClientToken
    , cverrsVpcEndpoint
    , cverrsResponseStatus
    ) where

import qualified Network.AWS.EC2.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | Contains the parameters for CreateVpcEndpoint.
--
-- /See:/ 'mkCreateVpcEndpoint' smart constructor.
data CreateVpcEndpoint = CreateVpcEndpoint'
  { vpcId :: Types.VpcId
    -- ^ The ID of the VPC in which the endpoint will be used.
  , serviceName :: Core.Text
    -- ^ The service name. To get a list of available services, use the 'DescribeVpcEndpointServices' request, or get the name from the service provider.
  , clientToken :: Core.Maybe Core.Text
    -- ^ Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html How to Ensure Idempotency> .
  , dryRun :: Core.Maybe Core.Bool
    -- ^ Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is @DryRunOperation@ . Otherwise, it is @UnauthorizedOperation@ .
  , policyDocument :: Core.Maybe Core.Text
    -- ^ (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
  , privateDnsEnabled :: Core.Maybe Core.Bool
    -- ^ (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, @kinesis.us-east-1.amazonaws.com@ ), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service.
--
-- To use a private hosted zone, you must set the following VPC attributes to @true@ : @enableDnsHostnames@ and @enableDnsSupport@ . Use 'ModifyVpcAttribute' to set the VPC attributes.
-- Default: @true@ 
  , routeTableIds :: Core.Maybe [Types.RouteTableId]
    -- ^ (Gateway endpoint) One or more route table IDs.
  , securityGroupIds :: Core.Maybe [Types.SecurityGroupId]
    -- ^ (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
  , subnetIds :: Core.Maybe [Types.SubnetId]
    -- ^ (Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only.
  , tagSpecifications :: Core.Maybe [Types.TagSpecification]
    -- ^ The tags to associate with the endpoint.
  , vpcEndpointType :: Core.Maybe Types.VpcEndpointType
    -- ^ The type of endpoint.
--
-- Default: Gateway
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateVpcEndpoint' value with any optional fields omitted.
mkCreateVpcEndpoint
    :: Types.VpcId -- ^ 'vpcId'
    -> Core.Text -- ^ 'serviceName'
    -> CreateVpcEndpoint
mkCreateVpcEndpoint vpcId serviceName
  = CreateVpcEndpoint'{vpcId, serviceName,
                       clientToken = Core.Nothing, dryRun = Core.Nothing,
                       policyDocument = Core.Nothing, privateDnsEnabled = Core.Nothing,
                       routeTableIds = Core.Nothing, securityGroupIds = Core.Nothing,
                       subnetIds = Core.Nothing, tagSpecifications = Core.Nothing,
                       vpcEndpointType = Core.Nothing}

-- | The ID of the VPC in which the endpoint will be used.
--
-- /Note:/ Consider using 'vpcId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefVpcId :: Lens.Lens' CreateVpcEndpoint Types.VpcId
cvefVpcId = Lens.field @"vpcId"
{-# INLINEABLE cvefVpcId #-}
{-# DEPRECATED vpcId "Use generic-lens or generic-optics with 'vpcId' instead"  #-}

-- | The service name. To get a list of available services, use the 'DescribeVpcEndpointServices' request, or get the name from the service provider.
--
-- /Note:/ Consider using 'serviceName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefServiceName :: Lens.Lens' CreateVpcEndpoint Core.Text
cvefServiceName = Lens.field @"serviceName"
{-# INLINEABLE cvefServiceName #-}
{-# DEPRECATED serviceName "Use generic-lens or generic-optics with 'serviceName' instead"  #-}

-- | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html How to Ensure Idempotency> .
--
-- /Note:/ Consider using 'clientToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefClientToken :: Lens.Lens' CreateVpcEndpoint (Core.Maybe Core.Text)
cvefClientToken = Lens.field @"clientToken"
{-# INLINEABLE cvefClientToken #-}
{-# DEPRECATED clientToken "Use generic-lens or generic-optics with 'clientToken' instead"  #-}

-- | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is @DryRunOperation@ . Otherwise, it is @UnauthorizedOperation@ .
--
-- /Note:/ Consider using 'dryRun' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefDryRun :: Lens.Lens' CreateVpcEndpoint (Core.Maybe Core.Bool)
cvefDryRun = Lens.field @"dryRun"
{-# INLINEABLE cvefDryRun #-}
{-# DEPRECATED dryRun "Use generic-lens or generic-optics with 'dryRun' instead"  #-}

-- | (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
--
-- /Note:/ Consider using 'policyDocument' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefPolicyDocument :: Lens.Lens' CreateVpcEndpoint (Core.Maybe Core.Text)
cvefPolicyDocument = Lens.field @"policyDocument"
{-# INLINEABLE cvefPolicyDocument #-}
{-# DEPRECATED policyDocument "Use generic-lens or generic-optics with 'policyDocument' instead"  #-}

-- | (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, @kinesis.us-east-1.amazonaws.com@ ), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service.
--
-- To use a private hosted zone, you must set the following VPC attributes to @true@ : @enableDnsHostnames@ and @enableDnsSupport@ . Use 'ModifyVpcAttribute' to set the VPC attributes.
-- Default: @true@ 
--
-- /Note:/ Consider using 'privateDnsEnabled' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefPrivateDnsEnabled :: Lens.Lens' CreateVpcEndpoint (Core.Maybe Core.Bool)
cvefPrivateDnsEnabled = Lens.field @"privateDnsEnabled"
{-# INLINEABLE cvefPrivateDnsEnabled #-}
{-# DEPRECATED privateDnsEnabled "Use generic-lens or generic-optics with 'privateDnsEnabled' instead"  #-}

-- | (Gateway endpoint) One or more route table IDs.
--
-- /Note:/ Consider using 'routeTableIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefRouteTableIds :: Lens.Lens' CreateVpcEndpoint (Core.Maybe [Types.RouteTableId])
cvefRouteTableIds = Lens.field @"routeTableIds"
{-# INLINEABLE cvefRouteTableIds #-}
{-# DEPRECATED routeTableIds "Use generic-lens or generic-optics with 'routeTableIds' instead"  #-}

-- | (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
--
-- /Note:/ Consider using 'securityGroupIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefSecurityGroupIds :: Lens.Lens' CreateVpcEndpoint (Core.Maybe [Types.SecurityGroupId])
cvefSecurityGroupIds = Lens.field @"securityGroupIds"
{-# INLINEABLE cvefSecurityGroupIds #-}
{-# DEPRECATED securityGroupIds "Use generic-lens or generic-optics with 'securityGroupIds' instead"  #-}

-- | (Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only.
--
-- /Note:/ Consider using 'subnetIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefSubnetIds :: Lens.Lens' CreateVpcEndpoint (Core.Maybe [Types.SubnetId])
cvefSubnetIds = Lens.field @"subnetIds"
{-# INLINEABLE cvefSubnetIds #-}
{-# DEPRECATED subnetIds "Use generic-lens or generic-optics with 'subnetIds' instead"  #-}

-- | The tags to associate with the endpoint.
--
-- /Note:/ Consider using 'tagSpecifications' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefTagSpecifications :: Lens.Lens' CreateVpcEndpoint (Core.Maybe [Types.TagSpecification])
cvefTagSpecifications = Lens.field @"tagSpecifications"
{-# INLINEABLE cvefTagSpecifications #-}
{-# DEPRECATED tagSpecifications "Use generic-lens or generic-optics with 'tagSpecifications' instead"  #-}

-- | The type of endpoint.
--
-- Default: Gateway
--
-- /Note:/ Consider using 'vpcEndpointType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cvefVpcEndpointType :: Lens.Lens' CreateVpcEndpoint (Core.Maybe Types.VpcEndpointType)
cvefVpcEndpointType = Lens.field @"vpcEndpointType"
{-# INLINEABLE cvefVpcEndpointType #-}
{-# DEPRECATED vpcEndpointType "Use generic-lens or generic-optics with 'vpcEndpointType' instead"  #-}

instance Core.ToQuery CreateVpcEndpoint where
        toQuery CreateVpcEndpoint{..}
          = Core.toQueryPair "Action" ("CreateVpcEndpoint" :: Core.Text)
              Core.<> Core.toQueryPair "Version" ("2016-11-15" :: Core.Text)
              Core.<> Core.toQueryPair "VpcId" vpcId
              Core.<> Core.toQueryPair "ServiceName" serviceName
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "ClientToken") clientToken
              Core.<> Core.maybe Core.mempty (Core.toQueryPair "DryRun") dryRun
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "PolicyDocument")
                policyDocument
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "PrivateDnsEnabled")
                privateDnsEnabled
              Core.<>
              Core.maybe Core.mempty (Core.toQueryList "RouteTableId")
                routeTableIds
              Core.<>
              Core.maybe Core.mempty (Core.toQueryList "SecurityGroupId")
                securityGroupIds
              Core.<>
              Core.maybe Core.mempty (Core.toQueryList "SubnetId") subnetIds
              Core.<>
              Core.maybe Core.mempty (Core.toQueryList "TagSpecification")
                tagSpecifications
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "VpcEndpointType")
                vpcEndpointType

instance Core.ToHeaders CreateVpcEndpoint where
        toHeaders _ = Core.pure Core.mempty

instance Core.AWSRequest CreateVpcEndpoint where
        type Rs CreateVpcEndpoint = CreateVpcEndpointResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.mempty,
                         Core._rqHeaders =
                           Core.pure
                             ("Content-Type",
                              "application/x-www-form-urlencoded; charset=utf-8")
                             Core.<> Core.toHeaders x,
                         Core._rqBody = Core.toFormBody (Core.toQuery x)}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveXML
              (\ s h x ->
                 CreateVpcEndpointResponse' Core.<$>
                   (x Core..@? "clientToken") Core.<*> x Core..@? "vpcEndpoint"
                     Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | Contains the output of CreateVpcEndpoint.
--
-- /See:/ 'mkCreateVpcEndpointResponse' smart constructor.
data CreateVpcEndpointResponse = CreateVpcEndpointResponse'
  { clientToken :: Core.Maybe Core.Text
    -- ^ Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
  , vpcEndpoint :: Core.Maybe Types.VpcEndpoint
    -- ^ Information about the endpoint.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'CreateVpcEndpointResponse' value with any optional fields omitted.
mkCreateVpcEndpointResponse
    :: Core.Int -- ^ 'responseStatus'
    -> CreateVpcEndpointResponse
mkCreateVpcEndpointResponse responseStatus
  = CreateVpcEndpointResponse'{clientToken = Core.Nothing,
                               vpcEndpoint = Core.Nothing, responseStatus}

-- | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
--
-- /Note:/ Consider using 'clientToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cverrsClientToken :: Lens.Lens' CreateVpcEndpointResponse (Core.Maybe Core.Text)
cverrsClientToken = Lens.field @"clientToken"
{-# INLINEABLE cverrsClientToken #-}
{-# DEPRECATED clientToken "Use generic-lens or generic-optics with 'clientToken' instead"  #-}

-- | Information about the endpoint.
--
-- /Note:/ Consider using 'vpcEndpoint' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cverrsVpcEndpoint :: Lens.Lens' CreateVpcEndpointResponse (Core.Maybe Types.VpcEndpoint)
cverrsVpcEndpoint = Lens.field @"vpcEndpoint"
{-# INLINEABLE cverrsVpcEndpoint #-}
{-# DEPRECATED vpcEndpoint "Use generic-lens or generic-optics with 'vpcEndpoint' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cverrsResponseStatus :: Lens.Lens' CreateVpcEndpointResponse Core.Int
cverrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE cverrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
