{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.APIGateway.PutMethod
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Add a method to an existing 'Resource' resource.
module Network.AWS.APIGateway.PutMethod
  ( -- * Creating a request
    PutMethod (..),
    mkPutMethod,

    -- ** Request lenses
    pmfResourceId,
    pmfHttpMethod,
    pmfAuthorizationScopes,
    pmfRequestValidatorId,
    pmfRequestModels,
    pmfRequestParameters,
    pmfAuthorizerId,
    pmfOperationName,
    pmfRestAPIId,
    pmfAuthorizationType,
    pmfApiKeyRequired,

    -- * Destructuring the response
    Method (..),
    mkMethod,

    -- ** Response lenses
    mMethodResponses,
    mHttpMethod,
    mAuthorizationScopes,
    mRequestValidatorId,
    mRequestModels,
    mRequestParameters,
    mAuthorizerId,
    mOperationName,
    mAuthorizationType,
    mApiKeyRequired,
    mMethodIntegration,
  )
where

import Network.AWS.APIGateway.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | Request to add a method to an existing 'Resource' resource.
--
-- /See:/ 'mkPutMethod' smart constructor.
data PutMethod = PutMethod'
  { -- | [Required] The 'Resource' identifier for the new 'Method' resource.
    resourceId :: Lude.Text,
    -- | [Required] Specifies the method request's HTTP method type.
    httpMethod :: Lude.Text,
    -- | A list of authorization scopes configured on the method. The scopes are used with a @COGNITO_USER_POOLS@ authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
    authorizationScopes :: Lude.Maybe [Lude.Text],
    -- | The identifier of a 'RequestValidator' for validating the method request.
    requestValidatorId :: Lude.Maybe Lude.Text,
    -- | Specifies the 'Model' resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a 'Model' name as the value.
    requestModels :: Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text)),
    -- | A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of @method.request.{location}.{name}@ , where @location@ is @querystring@ , @path@ , or @header@ and @name@ is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (@true@ ) or optional (@false@ ). The method request parameter names defined here are available in 'Integration' to be mapped to integration request parameters or body-mapping templates.
    requestParameters :: Lude.Maybe (Lude.HashMap Lude.Text (Lude.Bool)),
    -- | Specifies the identifier of an 'Authorizer' to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
    authorizerId :: Lude.Maybe Lude.Text,
    -- | A human-friendly operation identifier for the method. For example, you can assign the @operationName@ of @ListPets@ for the @GET /pets@ method in the @PetStore@ example.
    operationName :: Lude.Maybe Lude.Text,
    -- | [Required] The string identifier of the associated 'RestApi' .
    restAPIId :: Lude.Text,
    -- | [Required] The method's authorization type. Valid values are @NONE@ for open access, @AWS_IAM@ for using AWS IAM permissions, @CUSTOM@ for using a custom authorizer, or @COGNITO_USER_POOLS@ for using a Cognito user pool.
    authorizationType :: Lude.Text,
    -- | Specifies whether the method required a valid 'ApiKey' .
    apiKeyRequired :: Lude.Maybe Lude.Bool
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutMethod' with the minimum fields required to make a request.
--
-- * 'resourceId' - [Required] The 'Resource' identifier for the new 'Method' resource.
-- * 'httpMethod' - [Required] Specifies the method request's HTTP method type.
-- * 'authorizationScopes' - A list of authorization scopes configured on the method. The scopes are used with a @COGNITO_USER_POOLS@ authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
-- * 'requestValidatorId' - The identifier of a 'RequestValidator' for validating the method request.
-- * 'requestModels' - Specifies the 'Model' resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a 'Model' name as the value.
-- * 'requestParameters' - A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of @method.request.{location}.{name}@ , where @location@ is @querystring@ , @path@ , or @header@ and @name@ is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (@true@ ) or optional (@false@ ). The method request parameter names defined here are available in 'Integration' to be mapped to integration request parameters or body-mapping templates.
-- * 'authorizerId' - Specifies the identifier of an 'Authorizer' to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
-- * 'operationName' - A human-friendly operation identifier for the method. For example, you can assign the @operationName@ of @ListPets@ for the @GET /pets@ method in the @PetStore@ example.
-- * 'restAPIId' - [Required] The string identifier of the associated 'RestApi' .
-- * 'authorizationType' - [Required] The method's authorization type. Valid values are @NONE@ for open access, @AWS_IAM@ for using AWS IAM permissions, @CUSTOM@ for using a custom authorizer, or @COGNITO_USER_POOLS@ for using a Cognito user pool.
-- * 'apiKeyRequired' - Specifies whether the method required a valid 'ApiKey' .
mkPutMethod ::
  -- | 'resourceId'
  Lude.Text ->
  -- | 'httpMethod'
  Lude.Text ->
  -- | 'restAPIId'
  Lude.Text ->
  -- | 'authorizationType'
  Lude.Text ->
  PutMethod
mkPutMethod
  pResourceId_
  pHttpMethod_
  pRestAPIId_
  pAuthorizationType_ =
    PutMethod'
      { resourceId = pResourceId_,
        httpMethod = pHttpMethod_,
        authorizationScopes = Lude.Nothing,
        requestValidatorId = Lude.Nothing,
        requestModels = Lude.Nothing,
        requestParameters = Lude.Nothing,
        authorizerId = Lude.Nothing,
        operationName = Lude.Nothing,
        restAPIId = pRestAPIId_,
        authorizationType = pAuthorizationType_,
        apiKeyRequired = Lude.Nothing
      }

-- | [Required] The 'Resource' identifier for the new 'Method' resource.
--
-- /Note:/ Consider using 'resourceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfResourceId :: Lens.Lens' PutMethod Lude.Text
pmfResourceId = Lens.lens (resourceId :: PutMethod -> Lude.Text) (\s a -> s {resourceId = a} :: PutMethod)
{-# DEPRECATED pmfResourceId "Use generic-lens or generic-optics with 'resourceId' instead." #-}

-- | [Required] Specifies the method request's HTTP method type.
--
-- /Note:/ Consider using 'httpMethod' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfHttpMethod :: Lens.Lens' PutMethod Lude.Text
pmfHttpMethod = Lens.lens (httpMethod :: PutMethod -> Lude.Text) (\s a -> s {httpMethod = a} :: PutMethod)
{-# DEPRECATED pmfHttpMethod "Use generic-lens or generic-optics with 'httpMethod' instead." #-}

-- | A list of authorization scopes configured on the method. The scopes are used with a @COGNITO_USER_POOLS@ authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
--
-- /Note:/ Consider using 'authorizationScopes' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfAuthorizationScopes :: Lens.Lens' PutMethod (Lude.Maybe [Lude.Text])
pmfAuthorizationScopes = Lens.lens (authorizationScopes :: PutMethod -> Lude.Maybe [Lude.Text]) (\s a -> s {authorizationScopes = a} :: PutMethod)
{-# DEPRECATED pmfAuthorizationScopes "Use generic-lens or generic-optics with 'authorizationScopes' instead." #-}

-- | The identifier of a 'RequestValidator' for validating the method request.
--
-- /Note:/ Consider using 'requestValidatorId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfRequestValidatorId :: Lens.Lens' PutMethod (Lude.Maybe Lude.Text)
pmfRequestValidatorId = Lens.lens (requestValidatorId :: PutMethod -> Lude.Maybe Lude.Text) (\s a -> s {requestValidatorId = a} :: PutMethod)
{-# DEPRECATED pmfRequestValidatorId "Use generic-lens or generic-optics with 'requestValidatorId' instead." #-}

-- | Specifies the 'Model' resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a 'Model' name as the value.
--
-- /Note:/ Consider using 'requestModels' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfRequestModels :: Lens.Lens' PutMethod (Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text)))
pmfRequestModels = Lens.lens (requestModels :: PutMethod -> Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text))) (\s a -> s {requestModels = a} :: PutMethod)
{-# DEPRECATED pmfRequestModels "Use generic-lens or generic-optics with 'requestModels' instead." #-}

-- | A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of @method.request.{location}.{name}@ , where @location@ is @querystring@ , @path@ , or @header@ and @name@ is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (@true@ ) or optional (@false@ ). The method request parameter names defined here are available in 'Integration' to be mapped to integration request parameters or body-mapping templates.
--
-- /Note:/ Consider using 'requestParameters' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfRequestParameters :: Lens.Lens' PutMethod (Lude.Maybe (Lude.HashMap Lude.Text (Lude.Bool)))
pmfRequestParameters = Lens.lens (requestParameters :: PutMethod -> Lude.Maybe (Lude.HashMap Lude.Text (Lude.Bool))) (\s a -> s {requestParameters = a} :: PutMethod)
{-# DEPRECATED pmfRequestParameters "Use generic-lens or generic-optics with 'requestParameters' instead." #-}

-- | Specifies the identifier of an 'Authorizer' to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
--
-- /Note:/ Consider using 'authorizerId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfAuthorizerId :: Lens.Lens' PutMethod (Lude.Maybe Lude.Text)
pmfAuthorizerId = Lens.lens (authorizerId :: PutMethod -> Lude.Maybe Lude.Text) (\s a -> s {authorizerId = a} :: PutMethod)
{-# DEPRECATED pmfAuthorizerId "Use generic-lens or generic-optics with 'authorizerId' instead." #-}

-- | A human-friendly operation identifier for the method. For example, you can assign the @operationName@ of @ListPets@ for the @GET /pets@ method in the @PetStore@ example.
--
-- /Note:/ Consider using 'operationName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfOperationName :: Lens.Lens' PutMethod (Lude.Maybe Lude.Text)
pmfOperationName = Lens.lens (operationName :: PutMethod -> Lude.Maybe Lude.Text) (\s a -> s {operationName = a} :: PutMethod)
{-# DEPRECATED pmfOperationName "Use generic-lens or generic-optics with 'operationName' instead." #-}

-- | [Required] The string identifier of the associated 'RestApi' .
--
-- /Note:/ Consider using 'restAPIId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfRestAPIId :: Lens.Lens' PutMethod Lude.Text
pmfRestAPIId = Lens.lens (restAPIId :: PutMethod -> Lude.Text) (\s a -> s {restAPIId = a} :: PutMethod)
{-# DEPRECATED pmfRestAPIId "Use generic-lens or generic-optics with 'restAPIId' instead." #-}

-- | [Required] The method's authorization type. Valid values are @NONE@ for open access, @AWS_IAM@ for using AWS IAM permissions, @CUSTOM@ for using a custom authorizer, or @COGNITO_USER_POOLS@ for using a Cognito user pool.
--
-- /Note:/ Consider using 'authorizationType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfAuthorizationType :: Lens.Lens' PutMethod Lude.Text
pmfAuthorizationType = Lens.lens (authorizationType :: PutMethod -> Lude.Text) (\s a -> s {authorizationType = a} :: PutMethod)
{-# DEPRECATED pmfAuthorizationType "Use generic-lens or generic-optics with 'authorizationType' instead." #-}

-- | Specifies whether the method required a valid 'ApiKey' .
--
-- /Note:/ Consider using 'apiKeyRequired' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pmfApiKeyRequired :: Lens.Lens' PutMethod (Lude.Maybe Lude.Bool)
pmfApiKeyRequired = Lens.lens (apiKeyRequired :: PutMethod -> Lude.Maybe Lude.Bool) (\s a -> s {apiKeyRequired = a} :: PutMethod)
{-# DEPRECATED pmfApiKeyRequired "Use generic-lens or generic-optics with 'apiKeyRequired' instead." #-}

instance Lude.AWSRequest PutMethod where
  type Rs PutMethod = Method
  request = Req.putJSON apiGatewayService
  response = Res.receiveJSON (\s h x -> Lude.eitherParseJSON x)

instance Lude.ToHeaders PutMethod where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          ["Accept" Lude.=# ("application/json" :: Lude.ByteString)]
      )

instance Lude.ToJSON PutMethod where
  toJSON PutMethod' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("authorizationScopes" Lude..=) Lude.<$> authorizationScopes,
            ("requestValidatorId" Lude..=) Lude.<$> requestValidatorId,
            ("requestModels" Lude..=) Lude.<$> requestModels,
            ("requestParameters" Lude..=) Lude.<$> requestParameters,
            ("authorizerId" Lude..=) Lude.<$> authorizerId,
            ("operationName" Lude..=) Lude.<$> operationName,
            Lude.Just ("authorizationType" Lude..= authorizationType),
            ("apiKeyRequired" Lude..=) Lude.<$> apiKeyRequired
          ]
      )

instance Lude.ToPath PutMethod where
  toPath PutMethod' {..} =
    Lude.mconcat
      [ "/restapis/",
        Lude.toBS restAPIId,
        "/resources/",
        Lude.toBS resourceId,
        "/methods/",
        Lude.toBS httpMethod
      ]

instance Lude.ToQuery PutMethod where
  toQuery = Lude.const Lude.mempty
