{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.APIGateway.PutMethod
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Add a method to an existing 'Resource' resource.
module Network.AWS.APIGateway.PutMethod
  ( -- * Creating a request
    PutMethod (..),
    mkPutMethod,

    -- ** Request lenses
    putAuthorizationScopes,
    putRequestValidatorId,
    putRequestModels,
    putRequestParameters,
    putAuthorizerId,
    putOperationName,
    putApiKeyRequired,
    putRestAPIId,
    putResourceId,
    putHttpMethod,
    putAuthorizationType,

    -- * Destructuring the response
    Method (..),
    mkMethod,

    -- ** Response lenses
    mMethodResponses,
    mHttpMethod,
    mAuthorizationScopes,
    mRequestValidatorId,
    mRequestModels,
    mRequestParameters,
    mAuthorizerId,
    mOperationName,
    mAuthorizationType,
    mApiKeyRequired,
    mMethodIntegration,
  )
where

import Network.AWS.APIGateway.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | Request to add a method to an existing 'Resource' resource.
--
-- /See:/ 'mkPutMethod' smart constructor.
data PutMethod = PutMethod'
  { authorizationScopes ::
      Lude.Maybe [Lude.Text],
    requestValidatorId :: Lude.Maybe Lude.Text,
    requestModels :: Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text)),
    requestParameters ::
      Lude.Maybe (Lude.HashMap Lude.Text (Lude.Bool)),
    authorizerId :: Lude.Maybe Lude.Text,
    operationName :: Lude.Maybe Lude.Text,
    apiKeyRequired :: Lude.Maybe Lude.Bool,
    restAPIId :: Lude.Text,
    resourceId :: Lude.Text,
    httpMethod :: Lude.Text,
    authorizationType :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutMethod' with the minimum fields required to make a request.
--
-- * 'apiKeyRequired' - Specifies whether the method required a valid 'ApiKey' .
-- * 'authorizationScopes' - A list of authorization scopes configured on the method. The scopes are used with a @COGNITO_USER_POOLS@ authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
-- * 'authorizationType' - [Required] The method's authorization type. Valid values are @NONE@ for open access, @AWS_IAM@ for using AWS IAM permissions, @CUSTOM@ for using a custom authorizer, or @COGNITO_USER_POOLS@ for using a Cognito user pool.
-- * 'authorizerId' - Specifies the identifier of an 'Authorizer' to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
-- * 'httpMethod' - [Required] Specifies the method request's HTTP method type.
-- * 'operationName' - A human-friendly operation identifier for the method. For example, you can assign the @operationName@ of @ListPets@ for the @GET /pets@ method in the @PetStore@ example.
-- * 'requestModels' - Specifies the 'Model' resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a 'Model' name as the value.
-- * 'requestParameters' - A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of @method.request.{location}.{name}@ , where @location@ is @querystring@ , @path@ , or @header@ and @name@ is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (@true@ ) or optional (@false@ ). The method request parameter names defined here are available in 'Integration' to be mapped to integration request parameters or body-mapping templates.
-- * 'requestValidatorId' - The identifier of a 'RequestValidator' for validating the method request.
-- * 'resourceId' - [Required] The 'Resource' identifier for the new 'Method' resource.
-- * 'restAPIId' - [Required] The string identifier of the associated 'RestApi' .
mkPutMethod ::
  -- | 'restAPIId'
  Lude.Text ->
  -- | 'resourceId'
  Lude.Text ->
  -- | 'httpMethod'
  Lude.Text ->
  -- | 'authorizationType'
  Lude.Text ->
  PutMethod
mkPutMethod
  pRestAPIId_
  pResourceId_
  pHttpMethod_
  pAuthorizationType_ =
    PutMethod'
      { authorizationScopes = Lude.Nothing,
        requestValidatorId = Lude.Nothing,
        requestModels = Lude.Nothing,
        requestParameters = Lude.Nothing,
        authorizerId = Lude.Nothing,
        operationName = Lude.Nothing,
        apiKeyRequired = Lude.Nothing,
        restAPIId = pRestAPIId_,
        resourceId = pResourceId_,
        httpMethod = pHttpMethod_,
        authorizationType = pAuthorizationType_
      }

-- | A list of authorization scopes configured on the method. The scopes are used with a @COGNITO_USER_POOLS@ authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
--
-- /Note:/ Consider using 'authorizationScopes' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putAuthorizationScopes :: Lens.Lens' PutMethod (Lude.Maybe [Lude.Text])
putAuthorizationScopes = Lens.lens (authorizationScopes :: PutMethod -> Lude.Maybe [Lude.Text]) (\s a -> s {authorizationScopes = a} :: PutMethod)
{-# DEPRECATED putAuthorizationScopes "Use generic-lens or generic-optics with 'authorizationScopes' instead." #-}

-- | The identifier of a 'RequestValidator' for validating the method request.
--
-- /Note:/ Consider using 'requestValidatorId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putRequestValidatorId :: Lens.Lens' PutMethod (Lude.Maybe Lude.Text)
putRequestValidatorId = Lens.lens (requestValidatorId :: PutMethod -> Lude.Maybe Lude.Text) (\s a -> s {requestValidatorId = a} :: PutMethod)
{-# DEPRECATED putRequestValidatorId "Use generic-lens or generic-optics with 'requestValidatorId' instead." #-}

-- | Specifies the 'Model' resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a 'Model' name as the value.
--
-- /Note:/ Consider using 'requestModels' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putRequestModels :: Lens.Lens' PutMethod (Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text)))
putRequestModels = Lens.lens (requestModels :: PutMethod -> Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text))) (\s a -> s {requestModels = a} :: PutMethod)
{-# DEPRECATED putRequestModels "Use generic-lens or generic-optics with 'requestModels' instead." #-}

-- | A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of @method.request.{location}.{name}@ , where @location@ is @querystring@ , @path@ , or @header@ and @name@ is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (@true@ ) or optional (@false@ ). The method request parameter names defined here are available in 'Integration' to be mapped to integration request parameters or body-mapping templates.
--
-- /Note:/ Consider using 'requestParameters' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putRequestParameters :: Lens.Lens' PutMethod (Lude.Maybe (Lude.HashMap Lude.Text (Lude.Bool)))
putRequestParameters = Lens.lens (requestParameters :: PutMethod -> Lude.Maybe (Lude.HashMap Lude.Text (Lude.Bool))) (\s a -> s {requestParameters = a} :: PutMethod)
{-# DEPRECATED putRequestParameters "Use generic-lens or generic-optics with 'requestParameters' instead." #-}

-- | Specifies the identifier of an 'Authorizer' to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
--
-- /Note:/ Consider using 'authorizerId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putAuthorizerId :: Lens.Lens' PutMethod (Lude.Maybe Lude.Text)
putAuthorizerId = Lens.lens (authorizerId :: PutMethod -> Lude.Maybe Lude.Text) (\s a -> s {authorizerId = a} :: PutMethod)
{-# DEPRECATED putAuthorizerId "Use generic-lens or generic-optics with 'authorizerId' instead." #-}

-- | A human-friendly operation identifier for the method. For example, you can assign the @operationName@ of @ListPets@ for the @GET /pets@ method in the @PetStore@ example.
--
-- /Note:/ Consider using 'operationName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putOperationName :: Lens.Lens' PutMethod (Lude.Maybe Lude.Text)
putOperationName = Lens.lens (operationName :: PutMethod -> Lude.Maybe Lude.Text) (\s a -> s {operationName = a} :: PutMethod)
{-# DEPRECATED putOperationName "Use generic-lens or generic-optics with 'operationName' instead." #-}

-- | Specifies whether the method required a valid 'ApiKey' .
--
-- /Note:/ Consider using 'apiKeyRequired' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putApiKeyRequired :: Lens.Lens' PutMethod (Lude.Maybe Lude.Bool)
putApiKeyRequired = Lens.lens (apiKeyRequired :: PutMethod -> Lude.Maybe Lude.Bool) (\s a -> s {apiKeyRequired = a} :: PutMethod)
{-# DEPRECATED putApiKeyRequired "Use generic-lens or generic-optics with 'apiKeyRequired' instead." #-}

-- | [Required] The string identifier of the associated 'RestApi' .
--
-- /Note:/ Consider using 'restAPIId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putRestAPIId :: Lens.Lens' PutMethod Lude.Text
putRestAPIId = Lens.lens (restAPIId :: PutMethod -> Lude.Text) (\s a -> s {restAPIId = a} :: PutMethod)
{-# DEPRECATED putRestAPIId "Use generic-lens or generic-optics with 'restAPIId' instead." #-}

-- | [Required] The 'Resource' identifier for the new 'Method' resource.
--
-- /Note:/ Consider using 'resourceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putResourceId :: Lens.Lens' PutMethod Lude.Text
putResourceId = Lens.lens (resourceId :: PutMethod -> Lude.Text) (\s a -> s {resourceId = a} :: PutMethod)
{-# DEPRECATED putResourceId "Use generic-lens or generic-optics with 'resourceId' instead." #-}

-- | [Required] Specifies the method request's HTTP method type.
--
-- /Note:/ Consider using 'httpMethod' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putHttpMethod :: Lens.Lens' PutMethod Lude.Text
putHttpMethod = Lens.lens (httpMethod :: PutMethod -> Lude.Text) (\s a -> s {httpMethod = a} :: PutMethod)
{-# DEPRECATED putHttpMethod "Use generic-lens or generic-optics with 'httpMethod' instead." #-}

-- | [Required] The method's authorization type. Valid values are @NONE@ for open access, @AWS_IAM@ for using AWS IAM permissions, @CUSTOM@ for using a custom authorizer, or @COGNITO_USER_POOLS@ for using a Cognito user pool.
--
-- /Note:/ Consider using 'authorizationType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
putAuthorizationType :: Lens.Lens' PutMethod Lude.Text
putAuthorizationType = Lens.lens (authorizationType :: PutMethod -> Lude.Text) (\s a -> s {authorizationType = a} :: PutMethod)
{-# DEPRECATED putAuthorizationType "Use generic-lens or generic-optics with 'authorizationType' instead." #-}

instance Lude.AWSRequest PutMethod where
  type Rs PutMethod = Method
  request = Req.putJSON apiGatewayService
  response = Res.receiveJSON (\s h x -> Lude.eitherParseJSON x)

instance Lude.ToHeaders PutMethod where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          ["Accept" Lude.=# ("application/json" :: Lude.ByteString)]
      )

instance Lude.ToJSON PutMethod where
  toJSON PutMethod' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("authorizationScopes" Lude..=) Lude.<$> authorizationScopes,
            ("requestValidatorId" Lude..=) Lude.<$> requestValidatorId,
            ("requestModels" Lude..=) Lude.<$> requestModels,
            ("requestParameters" Lude..=) Lude.<$> requestParameters,
            ("authorizerId" Lude..=) Lude.<$> authorizerId,
            ("operationName" Lude..=) Lude.<$> operationName,
            ("apiKeyRequired" Lude..=) Lude.<$> apiKeyRequired,
            Lude.Just ("authorizationType" Lude..= authorizationType)
          ]
      )

instance Lude.ToPath PutMethod where
  toPath PutMethod' {..} =
    Lude.mconcat
      [ "/restapis/",
        Lude.toBS restAPIId,
        "/resources/",
        Lude.toBS resourceId,
        "/methods/",
        Lude.toBS httpMethod
      ]

instance Lude.ToQuery PutMethod where
  toQuery = Lude.const Lude.mempty
