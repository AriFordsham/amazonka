-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.APIGateway.Types.Model
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.APIGateway.Types.Model
  ( Model (..),

    -- * Smart constructor
    mkModel,

    -- * Lenses
    mSchema,
    mName,
    mId,
    mDescription,
    mContentType,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | Represents the data structure of a method's request or response payload.
--
-- A request model defines the data structure of the client-supplied request payload. A response model defines the data structure of the response payload returned by the back end. Although not required, models are useful for mapping payloads between the front end and back end.
-- A model is used for generating an API's SDK, validating the input request body, and creating a skeletal mapping template.
-- 'Method' , 'MethodResponse' , <https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html Models and Mappings>
--
-- /See:/ 'mkModel' smart constructor.
data Model = Model'
  { schema :: Lude.Maybe Lude.Text,
    name :: Lude.Maybe Lude.Text,
    id :: Lude.Maybe Lude.Text,
    description :: Lude.Maybe Lude.Text,
    contentType :: Lude.Maybe Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'Model' with the minimum fields required to make a request.
--
-- * 'contentType' - The content-type for the model.
-- * 'description' - The description of the model.
-- * 'id' - The identifier for the model resource.
-- * 'name' - The name of the model. Must be an alphanumeric string.
-- * 'schema' - The schema for the model. For @application/json@ models, this should be <https://tools.ietf.org/html/draft-zyp-json-schema-04 JSON schema draft 4> model. Do not include "\*/" characters in the description of any properties because such "\*/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.
mkModel ::
  Model
mkModel =
  Model'
    { schema = Lude.Nothing,
      name = Lude.Nothing,
      id = Lude.Nothing,
      description = Lude.Nothing,
      contentType = Lude.Nothing
    }

-- | The schema for the model. For @application/json@ models, this should be <https://tools.ietf.org/html/draft-zyp-json-schema-04 JSON schema draft 4> model. Do not include "\*/" characters in the description of any properties because such "\*/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.
--
-- /Note:/ Consider using 'schema' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mSchema :: Lens.Lens' Model (Lude.Maybe Lude.Text)
mSchema = Lens.lens (schema :: Model -> Lude.Maybe Lude.Text) (\s a -> s {schema = a} :: Model)
{-# DEPRECATED mSchema "Use generic-lens or generic-optics with 'schema' instead." #-}

-- | The name of the model. Must be an alphanumeric string.
--
-- /Note:/ Consider using 'name' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mName :: Lens.Lens' Model (Lude.Maybe Lude.Text)
mName = Lens.lens (name :: Model -> Lude.Maybe Lude.Text) (\s a -> s {name = a} :: Model)
{-# DEPRECATED mName "Use generic-lens or generic-optics with 'name' instead." #-}

-- | The identifier for the model resource.
--
-- /Note:/ Consider using 'id' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mId :: Lens.Lens' Model (Lude.Maybe Lude.Text)
mId = Lens.lens (id :: Model -> Lude.Maybe Lude.Text) (\s a -> s {id = a} :: Model)
{-# DEPRECATED mId "Use generic-lens or generic-optics with 'id' instead." #-}

-- | The description of the model.
--
-- /Note:/ Consider using 'description' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mDescription :: Lens.Lens' Model (Lude.Maybe Lude.Text)
mDescription = Lens.lens (description :: Model -> Lude.Maybe Lude.Text) (\s a -> s {description = a} :: Model)
{-# DEPRECATED mDescription "Use generic-lens or generic-optics with 'description' instead." #-}

-- | The content-type for the model.
--
-- /Note:/ Consider using 'contentType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mContentType :: Lens.Lens' Model (Lude.Maybe Lude.Text)
mContentType = Lens.lens (contentType :: Model -> Lude.Maybe Lude.Text) (\s a -> s {contentType = a} :: Model)
{-# DEPRECATED mContentType "Use generic-lens or generic-optics with 'contentType' instead." #-}

instance Lude.FromJSON Model where
  parseJSON =
    Lude.withObject
      "Model"
      ( \x ->
          Model'
            Lude.<$> (x Lude..:? "schema")
            Lude.<*> (x Lude..:? "name")
            Lude.<*> (x Lude..:? "id")
            Lude.<*> (x Lude..:? "description")
            Lude.<*> (x Lude..:? "contentType")
      )
