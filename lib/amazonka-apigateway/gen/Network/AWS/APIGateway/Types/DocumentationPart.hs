{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.APIGateway.Types.DocumentationPart
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.APIGateway.Types.DocumentationPart
  ( DocumentationPart (..),

    -- * Smart constructor
    mkDocumentationPart,

    -- * Lenses
    dpLocation,
    dpId,
    dpProperties,
  )
where

import Network.AWS.APIGateway.Types.DocumentationPartLocation
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | A documentation part for a targeted API entity.
--
-- A documentation part consists of a content map (@properties@ ) and a target (@location@ ). The target specifies an API entity to which the documentation content applies. The supported API entity types are @API@ , @AUTHORIZER@ , @MODEL@ , @RESOURCE@ , @METHOD@ , @PATH_PARAMETER@ , @QUERY_PARAMETER@ , @REQUEST_HEADER@ , @REQUEST_BODY@ , @RESPONSE@ , @RESPONSE_HEADER@ , and @RESPONSE_BODY@ . Valid @location@ fields depend on the API entity type. All valid fields are not required.
-- The content map is a JSON string of API-specific key-value pairs. Although an API can use any shape for the content map, only the OpenAPI-compliant documentation fields will be injected into the associated API entity definition in the exported OpenAPI definition file.
-- <https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html Documenting an API> , 'DocumentationParts'
--
-- /See:/ 'mkDocumentationPart' smart constructor.
data DocumentationPart = DocumentationPart'
  { location ::
      Lude.Maybe DocumentationPartLocation,
    id :: Lude.Maybe Lude.Text,
    properties :: Lude.Maybe Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'DocumentationPart' with the minimum fields required to make a request.
--
-- * 'id' - The 'DocumentationPart' identifier, generated by API Gateway when the @DocumentationPart@ is created.
-- * 'location' - The location of the API entity to which the documentation applies. Valid fields depend on the targeted API entity type. All the valid location fields are not required. If not explicitly specified, a valid location field is treated as a wildcard and associated documentation content may be inherited by matching entities, unless overridden.
-- * 'properties' - A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., @"{ \"description\": \"The API does ...\" }"@ . Only OpenAPI-compliant documentation-related fields from the @properties@ map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of @x-amazon-apigateway-documentation@ .
mkDocumentationPart ::
  DocumentationPart
mkDocumentationPart =
  DocumentationPart'
    { location = Lude.Nothing,
      id = Lude.Nothing,
      properties = Lude.Nothing
    }

-- | The location of the API entity to which the documentation applies. Valid fields depend on the targeted API entity type. All the valid location fields are not required. If not explicitly specified, a valid location field is treated as a wildcard and associated documentation content may be inherited by matching entities, unless overridden.
--
-- /Note:/ Consider using 'location' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dpLocation :: Lens.Lens' DocumentationPart (Lude.Maybe DocumentationPartLocation)
dpLocation = Lens.lens (location :: DocumentationPart -> Lude.Maybe DocumentationPartLocation) (\s a -> s {location = a} :: DocumentationPart)
{-# DEPRECATED dpLocation "Use generic-lens or generic-optics with 'location' instead." #-}

-- | The 'DocumentationPart' identifier, generated by API Gateway when the @DocumentationPart@ is created.
--
-- /Note:/ Consider using 'id' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dpId :: Lens.Lens' DocumentationPart (Lude.Maybe Lude.Text)
dpId = Lens.lens (id :: DocumentationPart -> Lude.Maybe Lude.Text) (\s a -> s {id = a} :: DocumentationPart)
{-# DEPRECATED dpId "Use generic-lens or generic-optics with 'id' instead." #-}

-- | A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., @"{ \"description\": \"The API does ...\" }"@ . Only OpenAPI-compliant documentation-related fields from the @properties@ map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of @x-amazon-apigateway-documentation@ .
--
-- /Note:/ Consider using 'properties' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dpProperties :: Lens.Lens' DocumentationPart (Lude.Maybe Lude.Text)
dpProperties = Lens.lens (properties :: DocumentationPart -> Lude.Maybe Lude.Text) (\s a -> s {properties = a} :: DocumentationPart)
{-# DEPRECATED dpProperties "Use generic-lens or generic-optics with 'properties' instead." #-}

instance Lude.FromJSON DocumentationPart where
  parseJSON =
    Lude.withObject
      "DocumentationPart"
      ( \x ->
          DocumentationPart'
            Lude.<$> (x Lude..:? "location")
            Lude.<*> (x Lude..:? "id")
            Lude.<*> (x Lude..:? "properties")
      )
