{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.ServiceCatalog.ExecuteProvisionedProductServiceAction
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Executes a self-service action against a provisioned product.
module Network.AWS.ServiceCatalog.ExecuteProvisionedProductServiceAction
  ( -- * Creating a request
    ExecuteProvisionedProductServiceAction (..),
    mkExecuteProvisionedProductServiceAction,

    -- ** Request lenses
    eppsaProvisionedProductId,
    eppsaServiceActionId,
    eppsaExecuteToken,
    eppsaAcceptLanguage,
    eppsaParameters,

    -- * Destructuring the response
    ExecuteProvisionedProductServiceActionResponse (..),
    mkExecuteProvisionedProductServiceActionResponse,

    -- ** Response lenses
    eppsarrsRecordDetail,
    eppsarrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response
import qualified Network.AWS.ServiceCatalog.Types as Types

-- | /See:/ 'mkExecuteProvisionedProductServiceAction' smart constructor.
data ExecuteProvisionedProductServiceAction = ExecuteProvisionedProductServiceAction'
  { -- | The identifier of the provisioned product.
    provisionedProductId :: Types.ProvisionedProductId,
    -- | The self-service action identifier. For example, @act-fs7abcd89wxyz@ .
    serviceActionId :: Types.ServiceActionId,
    -- | An idempotency token that uniquely identifies the execute request.
    executeToken :: Types.IdempotencyToken,
    -- | The language code.
    --
    --
    --     * @en@ - English (default)
    --
    --
    --     * @jp@ - Japanese
    --
    --
    --     * @zh@ - Chinese
    acceptLanguage :: Core.Maybe Types.AcceptLanguage,
    -- | A map of all self-service action parameters and their values. If a provided parameter is of a special type, such as @TARGET@ , the provided value will override the default value generated by AWS Service Catalog. If the parameters field is not provided, no additional parameters are passed and default values will be used for any special parameters such as @TARGET@ .
    parameters :: Core.Maybe (Core.HashMap Types.ExecutionParameterKey [Types.ExecutionParameterValue])
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ExecuteProvisionedProductServiceAction' value with any optional fields omitted.
mkExecuteProvisionedProductServiceAction ::
  -- | 'provisionedProductId'
  Types.ProvisionedProductId ->
  -- | 'serviceActionId'
  Types.ServiceActionId ->
  -- | 'executeToken'
  Types.IdempotencyToken ->
  ExecuteProvisionedProductServiceAction
mkExecuteProvisionedProductServiceAction
  provisionedProductId
  serviceActionId
  executeToken =
    ExecuteProvisionedProductServiceAction'
      { provisionedProductId,
        serviceActionId,
        executeToken,
        acceptLanguage = Core.Nothing,
        parameters = Core.Nothing
      }

-- | The identifier of the provisioned product.
--
-- /Note:/ Consider using 'provisionedProductId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
eppsaProvisionedProductId :: Lens.Lens' ExecuteProvisionedProductServiceAction Types.ProvisionedProductId
eppsaProvisionedProductId = Lens.field @"provisionedProductId"
{-# DEPRECATED eppsaProvisionedProductId "Use generic-lens or generic-optics with 'provisionedProductId' instead." #-}

-- | The self-service action identifier. For example, @act-fs7abcd89wxyz@ .
--
-- /Note:/ Consider using 'serviceActionId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
eppsaServiceActionId :: Lens.Lens' ExecuteProvisionedProductServiceAction Types.ServiceActionId
eppsaServiceActionId = Lens.field @"serviceActionId"
{-# DEPRECATED eppsaServiceActionId "Use generic-lens or generic-optics with 'serviceActionId' instead." #-}

-- | An idempotency token that uniquely identifies the execute request.
--
-- /Note:/ Consider using 'executeToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
eppsaExecuteToken :: Lens.Lens' ExecuteProvisionedProductServiceAction Types.IdempotencyToken
eppsaExecuteToken = Lens.field @"executeToken"
{-# DEPRECATED eppsaExecuteToken "Use generic-lens or generic-optics with 'executeToken' instead." #-}

-- | The language code.
--
--
--     * @en@ - English (default)
--
--
--     * @jp@ - Japanese
--
--
--     * @zh@ - Chinese
--
--
--
-- /Note:/ Consider using 'acceptLanguage' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
eppsaAcceptLanguage :: Lens.Lens' ExecuteProvisionedProductServiceAction (Core.Maybe Types.AcceptLanguage)
eppsaAcceptLanguage = Lens.field @"acceptLanguage"
{-# DEPRECATED eppsaAcceptLanguage "Use generic-lens or generic-optics with 'acceptLanguage' instead." #-}

-- | A map of all self-service action parameters and their values. If a provided parameter is of a special type, such as @TARGET@ , the provided value will override the default value generated by AWS Service Catalog. If the parameters field is not provided, no additional parameters are passed and default values will be used for any special parameters such as @TARGET@ .
--
-- /Note:/ Consider using 'parameters' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
eppsaParameters :: Lens.Lens' ExecuteProvisionedProductServiceAction (Core.Maybe (Core.HashMap Types.ExecutionParameterKey [Types.ExecutionParameterValue]))
eppsaParameters = Lens.field @"parameters"
{-# DEPRECATED eppsaParameters "Use generic-lens or generic-optics with 'parameters' instead." #-}

instance Core.FromJSON ExecuteProvisionedProductServiceAction where
  toJSON ExecuteProvisionedProductServiceAction {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("ProvisionedProductId" Core..= provisionedProductId),
            Core.Just ("ServiceActionId" Core..= serviceActionId),
            Core.Just ("ExecuteToken" Core..= executeToken),
            ("AcceptLanguage" Core..=) Core.<$> acceptLanguage,
            ("Parameters" Core..=) Core.<$> parameters
          ]
      )

instance Core.AWSRequest ExecuteProvisionedProductServiceAction where
  type
    Rs ExecuteProvisionedProductServiceAction =
      ExecuteProvisionedProductServiceActionResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "X-Amz-Target",
              "AWS242ServiceCatalogService.ExecuteProvisionedProductServiceAction"
            )
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          ExecuteProvisionedProductServiceActionResponse'
            Core.<$> (x Core..:? "RecordDetail") Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkExecuteProvisionedProductServiceActionResponse' smart constructor.
data ExecuteProvisionedProductServiceActionResponse = ExecuteProvisionedProductServiceActionResponse'
  { -- | An object containing detailed information about the result of provisioning the product.
    recordDetail :: Core.Maybe Types.RecordDetail,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'ExecuteProvisionedProductServiceActionResponse' value with any optional fields omitted.
mkExecuteProvisionedProductServiceActionResponse ::
  -- | 'responseStatus'
  Core.Int ->
  ExecuteProvisionedProductServiceActionResponse
mkExecuteProvisionedProductServiceActionResponse responseStatus =
  ExecuteProvisionedProductServiceActionResponse'
    { recordDetail =
        Core.Nothing,
      responseStatus
    }

-- | An object containing detailed information about the result of provisioning the product.
--
-- /Note:/ Consider using 'recordDetail' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
eppsarrsRecordDetail :: Lens.Lens' ExecuteProvisionedProductServiceActionResponse (Core.Maybe Types.RecordDetail)
eppsarrsRecordDetail = Lens.field @"recordDetail"
{-# DEPRECATED eppsarrsRecordDetail "Use generic-lens or generic-optics with 'recordDetail' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
eppsarrsResponseStatus :: Lens.Lens' ExecuteProvisionedProductServiceActionResponse Core.Int
eppsarrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED eppsarrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
