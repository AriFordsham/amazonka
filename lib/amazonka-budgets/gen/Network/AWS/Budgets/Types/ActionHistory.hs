{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Budgets.Types.ActionHistory
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.Budgets.Types.ActionHistory
  ( ActionHistory (..)
  -- * Smart constructor
  , mkActionHistory
  -- * Lenses
  , ahTimestamp
  , ahStatus
  , ahEventType
  , ahActionHistoryDetails
  ) where

import qualified Network.AWS.Budgets.Types.ActionHistoryDetails as Types
import qualified Network.AWS.Budgets.Types.ActionStatus as Types
import qualified Network.AWS.Budgets.Types.EventType as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | The historical records for a budget action. 
--
-- /See:/ 'mkActionHistory' smart constructor.
data ActionHistory = ActionHistory'
  { timestamp :: Core.NominalDiffTime
  , status :: Types.ActionStatus
    -- ^ The status of action at the time of the event. 
  , eventType :: Types.EventType
    -- ^ This distinguishes between whether the events are triggered by the user or generated by the system. 
  , actionHistoryDetails :: Types.ActionHistoryDetails
    -- ^ The description of details of the event. 
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'ActionHistory' value with any optional fields omitted.
mkActionHistory
    :: Core.NominalDiffTime -- ^ 'timestamp'
    -> Types.ActionStatus -- ^ 'status'
    -> Types.EventType -- ^ 'eventType'
    -> Types.ActionHistoryDetails -- ^ 'actionHistoryDetails'
    -> ActionHistory
mkActionHistory timestamp status eventType actionHistoryDetails
  = ActionHistory'{timestamp, status, eventType,
                   actionHistoryDetails}

-- | Undocumented field.
--
-- /Note:/ Consider using 'timestamp' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ahTimestamp :: Lens.Lens' ActionHistory Core.NominalDiffTime
ahTimestamp = Lens.field @"timestamp"
{-# INLINEABLE ahTimestamp #-}
{-# DEPRECATED timestamp "Use generic-lens or generic-optics with 'timestamp' instead"  #-}

-- | The status of action at the time of the event. 
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ahStatus :: Lens.Lens' ActionHistory Types.ActionStatus
ahStatus = Lens.field @"status"
{-# INLINEABLE ahStatus #-}
{-# DEPRECATED status "Use generic-lens or generic-optics with 'status' instead"  #-}

-- | This distinguishes between whether the events are triggered by the user or generated by the system. 
--
-- /Note:/ Consider using 'eventType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ahEventType :: Lens.Lens' ActionHistory Types.EventType
ahEventType = Lens.field @"eventType"
{-# INLINEABLE ahEventType #-}
{-# DEPRECATED eventType "Use generic-lens or generic-optics with 'eventType' instead"  #-}

-- | The description of details of the event. 
--
-- /Note:/ Consider using 'actionHistoryDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ahActionHistoryDetails :: Lens.Lens' ActionHistory Types.ActionHistoryDetails
ahActionHistoryDetails = Lens.field @"actionHistoryDetails"
{-# INLINEABLE ahActionHistoryDetails #-}
{-# DEPRECATED actionHistoryDetails "Use generic-lens or generic-optics with 'actionHistoryDetails' instead"  #-}

instance Core.FromJSON ActionHistory where
        parseJSON
          = Core.withObject "ActionHistory" Core.$
              \ x ->
                ActionHistory' Core.<$>
                  (x Core..: "Timestamp") Core.<*> x Core..: "Status" Core.<*>
                    x Core..: "EventType"
                    Core.<*> x Core..: "ActionHistoryDetails"
