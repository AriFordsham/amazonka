{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.StepFunctions.SendTaskHeartbeat
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by activity workers and task states using the <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token callback> pattern to report to Step Functions that the task represented by the specified @taskToken@ is still making progress. This action resets the @Heartbeat@ clock. The @Heartbeat@ threshold is specified in the state machine's Amazon States Language definition (@HeartbeatSeconds@ ). This action does not in itself create an event in the execution history. However, if the task times out, the execution history contains an @ActivityTimedOut@ entry for activities, or a @TaskTimedOut@ entry for for tasks using the <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync job run> or <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token callback> pattern.
module Network.AWS.StepFunctions.SendTaskHeartbeat
  ( -- * Creating a request
    SendTaskHeartbeat (..),
    mkSendTaskHeartbeat,

    -- ** Request lenses
    sthTaskToken,

    -- * Destructuring the response
    SendTaskHeartbeatResponse (..),
    mkSendTaskHeartbeatResponse,

    -- ** Response lenses
    sthrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.StepFunctions.Types

-- | /See:/ 'mkSendTaskHeartbeat' smart constructor.
newtype SendTaskHeartbeat = SendTaskHeartbeat'
  { taskToken ::
      Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving newtype (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'SendTaskHeartbeat' with the minimum fields required to make a request.
--
-- * 'taskToken' - The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
mkSendTaskHeartbeat ::
  -- | 'taskToken'
  Lude.Text ->
  SendTaskHeartbeat
mkSendTaskHeartbeat pTaskToken_ =
  SendTaskHeartbeat' {taskToken = pTaskToken_}

-- | The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sthTaskToken :: Lens.Lens' SendTaskHeartbeat Lude.Text
sthTaskToken = Lens.lens (taskToken :: SendTaskHeartbeat -> Lude.Text) (\s a -> s {taskToken = a} :: SendTaskHeartbeat)
{-# DEPRECATED sthTaskToken "Use generic-lens or generic-optics with 'taskToken' instead." #-}

instance Lude.AWSRequest SendTaskHeartbeat where
  type Rs SendTaskHeartbeat = SendTaskHeartbeatResponse
  request = Req.postJSON stepFunctionsService
  response =
    Res.receiveEmpty
      ( \s h x ->
          SendTaskHeartbeatResponse' Lude.<$> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders SendTaskHeartbeat where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("AWSStepFunctions.SendTaskHeartbeat" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.0" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON SendTaskHeartbeat where
  toJSON SendTaskHeartbeat' {..} =
    Lude.object
      (Lude.catMaybes [Lude.Just ("taskToken" Lude..= taskToken)])

instance Lude.ToPath SendTaskHeartbeat where
  toPath = Lude.const "/"

instance Lude.ToQuery SendTaskHeartbeat where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkSendTaskHeartbeatResponse' smart constructor.
newtype SendTaskHeartbeatResponse = SendTaskHeartbeatResponse'
  { responseStatus ::
      Lude.Int
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving newtype (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'SendTaskHeartbeatResponse' with the minimum fields required to make a request.
--
-- * 'responseStatus' - The response status code.
mkSendTaskHeartbeatResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  SendTaskHeartbeatResponse
mkSendTaskHeartbeatResponse pResponseStatus_ =
  SendTaskHeartbeatResponse' {responseStatus = pResponseStatus_}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sthrsResponseStatus :: Lens.Lens' SendTaskHeartbeatResponse Lude.Int
sthrsResponseStatus = Lens.lens (responseStatus :: SendTaskHeartbeatResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: SendTaskHeartbeatResponse)
{-# DEPRECATED sthrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
