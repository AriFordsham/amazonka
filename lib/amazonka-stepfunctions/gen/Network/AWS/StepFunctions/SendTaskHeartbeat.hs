{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.StepFunctions.SendTaskHeartbeat
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by activity workers and task states using the <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token callback> pattern to report to Step Functions that the task represented by the specified @taskToken@ is still making progress. This action resets the @Heartbeat@ clock. The @Heartbeat@ threshold is specified in the state machine's Amazon States Language definition (@HeartbeatSeconds@ ). This action does not in itself create an event in the execution history. However, if the task times out, the execution history contains an @ActivityTimedOut@ entry for activities, or a @TaskTimedOut@ entry for for tasks using the <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync job run> or <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token callback> pattern.
module Network.AWS.StepFunctions.SendTaskHeartbeat
    (
    -- * Creating a request
      SendTaskHeartbeat (..)
    , mkSendTaskHeartbeat
    -- ** Request lenses
    , sthTaskToken

    -- * Destructuring the response
    , SendTaskHeartbeatResponse (..)
    , mkSendTaskHeartbeatResponse
    -- ** Response lenses
    , sthrrsResponseStatus
    ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response
import qualified Network.AWS.StepFunctions.Types as Types

-- | /See:/ 'mkSendTaskHeartbeat' smart constructor.
newtype SendTaskHeartbeat = SendTaskHeartbeat'
  { taskToken :: Types.TaskToken
    -- ^ The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving newtype (Core.Hashable, Core.NFData)

-- | Creates a 'SendTaskHeartbeat' value with any optional fields omitted.
mkSendTaskHeartbeat
    :: Types.TaskToken -- ^ 'taskToken'
    -> SendTaskHeartbeat
mkSendTaskHeartbeat taskToken = SendTaskHeartbeat'{taskToken}

-- | The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sthTaskToken :: Lens.Lens' SendTaskHeartbeat Types.TaskToken
sthTaskToken = Lens.field @"taskToken"
{-# INLINEABLE sthTaskToken #-}
{-# DEPRECATED taskToken "Use generic-lens or generic-optics with 'taskToken' instead"  #-}

instance Core.ToQuery SendTaskHeartbeat where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders SendTaskHeartbeat where
        toHeaders SendTaskHeartbeat{..}
          = Core.pure ("X-Amz-Target", "AWSStepFunctions.SendTaskHeartbeat")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.0")

instance Core.FromJSON SendTaskHeartbeat where
        toJSON SendTaskHeartbeat{..}
          = Core.object
              (Core.catMaybes [Core.Just ("taskToken" Core..= taskToken)])

instance Core.AWSRequest SendTaskHeartbeat where
        type Rs SendTaskHeartbeat = SendTaskHeartbeatResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveEmpty
              (\ s h x ->
                 SendTaskHeartbeatResponse' Core.<$> (Core.pure (Core.fromEnum s)))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkSendTaskHeartbeatResponse' smart constructor.
newtype SendTaskHeartbeatResponse = SendTaskHeartbeatResponse'
  { responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving newtype (Core.Hashable, Core.NFData)

-- | Creates a 'SendTaskHeartbeatResponse' value with any optional fields omitted.
mkSendTaskHeartbeatResponse
    :: Core.Int -- ^ 'responseStatus'
    -> SendTaskHeartbeatResponse
mkSendTaskHeartbeatResponse responseStatus
  = SendTaskHeartbeatResponse'{responseStatus}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sthrrsResponseStatus :: Lens.Lens' SendTaskHeartbeatResponse Core.Int
sthrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE sthrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
