{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.StepFunctions.SendTaskFailure
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by activity workers and task states using the <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token callback> pattern to report that the task identified by the @taskToken@ failed.
module Network.AWS.StepFunctions.SendTaskFailure
  ( -- * Creating a request
    SendTaskFailure (..),
    mkSendTaskFailure,

    -- ** Request lenses
    stfError,
    stfCause,
    stfTaskToken,

    -- * Destructuring the response
    SendTaskFailureResponse (..),
    mkSendTaskFailureResponse,

    -- ** Response lenses
    stfrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.StepFunctions.Types

-- | /See:/ 'mkSendTaskFailure' smart constructor.
data SendTaskFailure = SendTaskFailure'
  { -- | The error code of the failure.
    error :: Lude.Maybe (Lude.Sensitive Lude.Text),
    -- | A more detailed explanation of the cause of the failure.
    cause :: Lude.Maybe (Lude.Sensitive Lude.Text),
    -- | The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
    taskToken :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'SendTaskFailure' with the minimum fields required to make a request.
--
-- * 'error' - The error code of the failure.
-- * 'cause' - A more detailed explanation of the cause of the failure.
-- * 'taskToken' - The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
mkSendTaskFailure ::
  -- | 'taskToken'
  Lude.Text ->
  SendTaskFailure
mkSendTaskFailure pTaskToken_ =
  SendTaskFailure'
    { error = Lude.Nothing,
      cause = Lude.Nothing,
      taskToken = pTaskToken_
    }

-- | The error code of the failure.
--
-- /Note:/ Consider using 'error' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stfError :: Lens.Lens' SendTaskFailure (Lude.Maybe (Lude.Sensitive Lude.Text))
stfError = Lens.lens (error :: SendTaskFailure -> Lude.Maybe (Lude.Sensitive Lude.Text)) (\s a -> s {error = a} :: SendTaskFailure)
{-# DEPRECATED stfError "Use generic-lens or generic-optics with 'error' instead." #-}

-- | A more detailed explanation of the cause of the failure.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stfCause :: Lens.Lens' SendTaskFailure (Lude.Maybe (Lude.Sensitive Lude.Text))
stfCause = Lens.lens (cause :: SendTaskFailure -> Lude.Maybe (Lude.Sensitive Lude.Text)) (\s a -> s {cause = a} :: SendTaskFailure)
{-# DEPRECATED stfCause "Use generic-lens or generic-optics with 'cause' instead." #-}

-- | The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stfTaskToken :: Lens.Lens' SendTaskFailure Lude.Text
stfTaskToken = Lens.lens (taskToken :: SendTaskFailure -> Lude.Text) (\s a -> s {taskToken = a} :: SendTaskFailure)
{-# DEPRECATED stfTaskToken "Use generic-lens or generic-optics with 'taskToken' instead." #-}

instance Lude.AWSRequest SendTaskFailure where
  type Rs SendTaskFailure = SendTaskFailureResponse
  request = Req.postJSON stepFunctionsService
  response =
    Res.receiveEmpty
      ( \s h x ->
          SendTaskFailureResponse' Lude.<$> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders SendTaskFailure where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("AWSStepFunctions.SendTaskFailure" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.0" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON SendTaskFailure where
  toJSON SendTaskFailure' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("error" Lude..=) Lude.<$> error,
            ("cause" Lude..=) Lude.<$> cause,
            Lude.Just ("taskToken" Lude..= taskToken)
          ]
      )

instance Lude.ToPath SendTaskFailure where
  toPath = Lude.const "/"

instance Lude.ToQuery SendTaskFailure where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkSendTaskFailureResponse' smart constructor.
newtype SendTaskFailureResponse = SendTaskFailureResponse'
  { -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving newtype (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'SendTaskFailureResponse' with the minimum fields required to make a request.
--
-- * 'responseStatus' - The response status code.
mkSendTaskFailureResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  SendTaskFailureResponse
mkSendTaskFailureResponse pResponseStatus_ =
  SendTaskFailureResponse' {responseStatus = pResponseStatus_}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stfrsResponseStatus :: Lens.Lens' SendTaskFailureResponse Lude.Int
stfrsResponseStatus = Lens.lens (responseStatus :: SendTaskFailureResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: SendTaskFailureResponse)
{-# DEPRECATED stfrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
