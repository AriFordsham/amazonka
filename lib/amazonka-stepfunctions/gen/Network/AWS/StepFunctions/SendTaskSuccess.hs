{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.StepFunctions.SendTaskSuccess
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by activity workers and task states using the <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token callback> pattern to report that the task identified by the @taskToken@ completed successfully.
module Network.AWS.StepFunctions.SendTaskSuccess
  ( -- * Creating a request
    SendTaskSuccess (..),
    mkSendTaskSuccess,

    -- ** Request lenses
    stsTaskToken,
    stsOutput,

    -- * Destructuring the response
    SendTaskSuccessResponse (..),
    mkSendTaskSuccessResponse,

    -- ** Response lenses
    stsrrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response
import qualified Network.AWS.StepFunctions.Types as Types

-- | /See:/ 'mkSendTaskSuccess' smart constructor.
data SendTaskSuccess = SendTaskSuccess'
  { -- | The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
    taskToken :: Types.TaskToken,
    -- | The JSON output of the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
    output :: Types.Output
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'SendTaskSuccess' value with any optional fields omitted.
mkSendTaskSuccess ::
  -- | 'taskToken'
  Types.TaskToken ->
  -- | 'output'
  Types.Output ->
  SendTaskSuccess
mkSendTaskSuccess taskToken output =
  SendTaskSuccess' {taskToken, output}

-- | The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stsTaskToken :: Lens.Lens' SendTaskSuccess Types.TaskToken
stsTaskToken = Lens.field @"taskToken"
{-# DEPRECATED stsTaskToken "Use generic-lens or generic-optics with 'taskToken' instead." #-}

-- | The JSON output of the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
--
-- /Note:/ Consider using 'output' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stsOutput :: Lens.Lens' SendTaskSuccess Types.Output
stsOutput = Lens.field @"output"
{-# DEPRECATED stsOutput "Use generic-lens or generic-optics with 'output' instead." #-}

instance Core.FromJSON SendTaskSuccess where
  toJSON SendTaskSuccess {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("taskToken" Core..= taskToken),
            Core.Just ("output" Core..= output)
          ]
      )

instance Core.AWSRequest SendTaskSuccess where
  type Rs SendTaskSuccess = SendTaskSuccessResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure ("X-Amz-Target", "AWSStepFunctions.SendTaskSuccess")
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.0")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveEmpty
      ( \s h x ->
          SendTaskSuccessResponse' Core.<$> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkSendTaskSuccessResponse' smart constructor.
newtype SendTaskSuccessResponse = SendTaskSuccessResponse'
  { -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving newtype (Core.Hashable, Core.NFData)

-- | Creates a 'SendTaskSuccessResponse' value with any optional fields omitted.
mkSendTaskSuccessResponse ::
  -- | 'responseStatus'
  Core.Int ->
  SendTaskSuccessResponse
mkSendTaskSuccessResponse responseStatus =
  SendTaskSuccessResponse' {responseStatus}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stsrrsResponseStatus :: Lens.Lens' SendTaskSuccessResponse Core.Int
stsrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED stsrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
