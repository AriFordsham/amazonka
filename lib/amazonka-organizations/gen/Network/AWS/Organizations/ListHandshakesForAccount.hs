{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Organizations.ListHandshakesForAccount
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the current handshakes that are associated with the account of the requesting user.
--
-- Handshakes that are @ACCEPTED@ , @DECLINED@ , or @CANCELED@ appear in the results of this API for only 30 days after changing to that state. After that, they're deleted and no longer accessible.
-- This operation can be called from any account in the organization.
--
-- This operation returns paginated results.
module Network.AWS.Organizations.ListHandshakesForAccount
  ( -- * Creating a request
    ListHandshakesForAccount (..),
    mkListHandshakesForAccount,

    -- ** Request lenses
    lhfaFilter,
    lhfaMaxResults,
    lhfaNextToken,

    -- * Destructuring the response
    ListHandshakesForAccountResponse (..),
    mkListHandshakesForAccountResponse,

    -- ** Response lenses
    lhfarrsHandshakes,
    lhfarrsNextToken,
    lhfarrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Organizations.Types as Types
import qualified Network.AWS.Pager as Pager
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkListHandshakesForAccount' smart constructor.
data ListHandshakesForAccount = ListHandshakesForAccount'
  { -- | Filters the handshakes that you want included in the response. The default is all types. Use the @ActionType@ element to limit the output to only a specified type, such as @INVITE@ , @ENABLE_ALL_FEATURES@ , or @APPROVE_ALL_FEATURES@ . Alternatively, for the @ENABLE_ALL_FEATURES@ handshake that generates a separate child handshake for each member account, you can specify @ParentHandshakeId@ to see only the handshakes that were generated by that parent request.
    filter :: Core.Maybe Types.HandshakeFilter,
    -- | The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the @NextToken@ response element is present and has a value (is not null). Include that value as the @NextToken@ request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check @NextToken@ after every operation to ensure that you receive all of the results.
    maxResults :: Core.Maybe Core.Natural,
    -- | The parameter for receiving additional results if you receive a @NextToken@ response in a previous request. A @NextToken@ response indicates that more output is available. Set this parameter to the value of the previous call's @NextToken@ response to indicate where the output should continue from.
    nextToken :: Core.Maybe Types.NextToken
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ListHandshakesForAccount' value with any optional fields omitted.
mkListHandshakesForAccount ::
  ListHandshakesForAccount
mkListHandshakesForAccount =
  ListHandshakesForAccount'
    { filter = Core.Nothing,
      maxResults = Core.Nothing,
      nextToken = Core.Nothing
    }

-- | Filters the handshakes that you want included in the response. The default is all types. Use the @ActionType@ element to limit the output to only a specified type, such as @INVITE@ , @ENABLE_ALL_FEATURES@ , or @APPROVE_ALL_FEATURES@ . Alternatively, for the @ENABLE_ALL_FEATURES@ handshake that generates a separate child handshake for each member account, you can specify @ParentHandshakeId@ to see only the handshakes that were generated by that parent request.
--
-- /Note:/ Consider using 'filter' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfaFilter :: Lens.Lens' ListHandshakesForAccount (Core.Maybe Types.HandshakeFilter)
lhfaFilter = Lens.field @"filter"
{-# DEPRECATED lhfaFilter "Use generic-lens or generic-optics with 'filter' instead." #-}

-- | The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the @NextToken@ response element is present and has a value (is not null). Include that value as the @NextToken@ request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check @NextToken@ after every operation to ensure that you receive all of the results.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfaMaxResults :: Lens.Lens' ListHandshakesForAccount (Core.Maybe Core.Natural)
lhfaMaxResults = Lens.field @"maxResults"
{-# DEPRECATED lhfaMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

-- | The parameter for receiving additional results if you receive a @NextToken@ response in a previous request. A @NextToken@ response indicates that more output is available. Set this parameter to the value of the previous call's @NextToken@ response to indicate where the output should continue from.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfaNextToken :: Lens.Lens' ListHandshakesForAccount (Core.Maybe Types.NextToken)
lhfaNextToken = Lens.field @"nextToken"
{-# DEPRECATED lhfaNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

instance Core.FromJSON ListHandshakesForAccount where
  toJSON ListHandshakesForAccount {..} =
    Core.object
      ( Core.catMaybes
          [ ("Filter" Core..=) Core.<$> filter,
            ("MaxResults" Core..=) Core.<$> maxResults,
            ("NextToken" Core..=) Core.<$> nextToken
          ]
      )

instance Core.AWSRequest ListHandshakesForAccount where
  type Rs ListHandshakesForAccount = ListHandshakesForAccountResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "X-Amz-Target",
              "AWSOrganizationsV20161128.ListHandshakesForAccount"
            )
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          ListHandshakesForAccountResponse'
            Core.<$> (x Core..:? "Handshakes")
            Core.<*> (x Core..:? "NextToken")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Pager.AWSPager ListHandshakesForAccount where
  page rq rs
    | Pager.stop (rs Lens.^. Lens.field @"nextToken") = Core.Nothing
    | Pager.stop
        (rs Lens.^? Lens.field @"handshakes" Core.. Lens._Just) =
      Core.Nothing
    | Core.otherwise =
      Core.Just
        ( rq
            Core.& Lens.field @"nextToken" Lens..~ rs Lens.^. Lens.field @"nextToken"
        )

-- | /See:/ 'mkListHandshakesForAccountResponse' smart constructor.
data ListHandshakesForAccountResponse = ListHandshakesForAccountResponse'
  { -- | A list of 'Handshake' objects with details about each of the handshakes that is associated with the specified account.
    handshakes :: Core.Maybe [Types.Handshake],
    -- | If present, indicates that more output is available than is included in the current response. Use this value in the @NextToken@ request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the @NextToken@ response element comes back as @null@ .
    nextToken :: Core.Maybe Types.NextToken,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'ListHandshakesForAccountResponse' value with any optional fields omitted.
mkListHandshakesForAccountResponse ::
  -- | 'responseStatus'
  Core.Int ->
  ListHandshakesForAccountResponse
mkListHandshakesForAccountResponse responseStatus =
  ListHandshakesForAccountResponse'
    { handshakes = Core.Nothing,
      nextToken = Core.Nothing,
      responseStatus
    }

-- | A list of 'Handshake' objects with details about each of the handshakes that is associated with the specified account.
--
-- /Note:/ Consider using 'handshakes' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfarrsHandshakes :: Lens.Lens' ListHandshakesForAccountResponse (Core.Maybe [Types.Handshake])
lhfarrsHandshakes = Lens.field @"handshakes"
{-# DEPRECATED lhfarrsHandshakes "Use generic-lens or generic-optics with 'handshakes' instead." #-}

-- | If present, indicates that more output is available than is included in the current response. Use this value in the @NextToken@ request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the @NextToken@ response element comes back as @null@ .
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfarrsNextToken :: Lens.Lens' ListHandshakesForAccountResponse (Core.Maybe Types.NextToken)
lhfarrsNextToken = Lens.field @"nextToken"
{-# DEPRECATED lhfarrsNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfarrsResponseStatus :: Lens.Lens' ListHandshakesForAccountResponse Core.Int
lhfarrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED lhfarrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
