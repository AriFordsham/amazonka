{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Organizations.ListHandshakesForAccount
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the current handshakes that are associated with the account of the requesting user.
--
-- Handshakes that are @ACCEPTED@ , @DECLINED@ , or @CANCELED@ appear in the results of this API for only 30 days after changing to that state. After that, they're deleted and no longer accessible.
-- This operation can be called from any account in the organization.
--
-- This operation returns paginated results.
module Network.AWS.Organizations.ListHandshakesForAccount
  ( -- * Creating a request
    ListHandshakesForAccount (..),
    mkListHandshakesForAccount,

    -- ** Request lenses
    lhfaNextToken,
    lhfaFilter,
    lhfaMaxResults,

    -- * Destructuring the response
    ListHandshakesForAccountResponse (..),
    mkListHandshakesForAccountResponse,

    -- ** Response lenses
    lhfarsHandshakes,
    lhfarsNextToken,
    lhfarsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import Network.AWS.Organizations.Types
import qualified Network.AWS.Pager as Page
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkListHandshakesForAccount' smart constructor.
data ListHandshakesForAccount = ListHandshakesForAccount'
  { nextToken ::
      Lude.Maybe Lude.Text,
    filter :: Lude.Maybe HandshakeFilter,
    maxResults :: Lude.Maybe Lude.Natural
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListHandshakesForAccount' with the minimum fields required to make a request.
--
-- * 'filter' - Filters the handshakes that you want included in the response. The default is all types. Use the @ActionType@ element to limit the output to only a specified type, such as @INVITE@ , @ENABLE_ALL_FEATURES@ , or @APPROVE_ALL_FEATURES@ . Alternatively, for the @ENABLE_ALL_FEATURES@ handshake that generates a separate child handshake for each member account, you can specify @ParentHandshakeId@ to see only the handshakes that were generated by that parent request.
-- * 'maxResults' - The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the @NextToken@ response element is present and has a value (is not null). Include that value as the @NextToken@ request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check @NextToken@ after every operation to ensure that you receive all of the results.
-- * 'nextToken' - The parameter for receiving additional results if you receive a @NextToken@ response in a previous request. A @NextToken@ response indicates that more output is available. Set this parameter to the value of the previous call's @NextToken@ response to indicate where the output should continue from.
mkListHandshakesForAccount ::
  ListHandshakesForAccount
mkListHandshakesForAccount =
  ListHandshakesForAccount'
    { nextToken = Lude.Nothing,
      filter = Lude.Nothing,
      maxResults = Lude.Nothing
    }

-- | The parameter for receiving additional results if you receive a @NextToken@ response in a previous request. A @NextToken@ response indicates that more output is available. Set this parameter to the value of the previous call's @NextToken@ response to indicate where the output should continue from.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfaNextToken :: Lens.Lens' ListHandshakesForAccount (Lude.Maybe Lude.Text)
lhfaNextToken = Lens.lens (nextToken :: ListHandshakesForAccount -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListHandshakesForAccount)
{-# DEPRECATED lhfaNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | Filters the handshakes that you want included in the response. The default is all types. Use the @ActionType@ element to limit the output to only a specified type, such as @INVITE@ , @ENABLE_ALL_FEATURES@ , or @APPROVE_ALL_FEATURES@ . Alternatively, for the @ENABLE_ALL_FEATURES@ handshake that generates a separate child handshake for each member account, you can specify @ParentHandshakeId@ to see only the handshakes that were generated by that parent request.
--
-- /Note:/ Consider using 'filter' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfaFilter :: Lens.Lens' ListHandshakesForAccount (Lude.Maybe HandshakeFilter)
lhfaFilter = Lens.lens (filter :: ListHandshakesForAccount -> Lude.Maybe HandshakeFilter) (\s a -> s {filter = a} :: ListHandshakesForAccount)
{-# DEPRECATED lhfaFilter "Use generic-lens or generic-optics with 'filter' instead." #-}

-- | The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the @NextToken@ response element is present and has a value (is not null). Include that value as the @NextToken@ request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check @NextToken@ after every operation to ensure that you receive all of the results.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfaMaxResults :: Lens.Lens' ListHandshakesForAccount (Lude.Maybe Lude.Natural)
lhfaMaxResults = Lens.lens (maxResults :: ListHandshakesForAccount -> Lude.Maybe Lude.Natural) (\s a -> s {maxResults = a} :: ListHandshakesForAccount)
{-# DEPRECATED lhfaMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

instance Page.AWSPager ListHandshakesForAccount where
  page rq rs
    | Page.stop (rs Lens.^. lhfarsNextToken) = Lude.Nothing
    | Page.stop (rs Lens.^. lhfarsHandshakes) = Lude.Nothing
    | Lude.otherwise =
      Lude.Just Lude.$
        rq
          Lude.& lhfaNextToken Lens..~ rs Lens.^. lhfarsNextToken

instance Lude.AWSRequest ListHandshakesForAccount where
  type Rs ListHandshakesForAccount = ListHandshakesForAccountResponse
  request = Req.postJSON organizationsService
  response =
    Res.receiveJSON
      ( \s h x ->
          ListHandshakesForAccountResponse'
            Lude.<$> (x Lude..?> "Handshakes" Lude..!@ Lude.mempty)
            Lude.<*> (x Lude..?> "NextToken")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders ListHandshakesForAccount where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ( "AWSOrganizationsV20161128.ListHandshakesForAccount" ::
                          Lude.ByteString
                      ),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON ListHandshakesForAccount where
  toJSON ListHandshakesForAccount' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("NextToken" Lude..=) Lude.<$> nextToken,
            ("Filter" Lude..=) Lude.<$> filter,
            ("MaxResults" Lude..=) Lude.<$> maxResults
          ]
      )

instance Lude.ToPath ListHandshakesForAccount where
  toPath = Lude.const "/"

instance Lude.ToQuery ListHandshakesForAccount where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkListHandshakesForAccountResponse' smart constructor.
data ListHandshakesForAccountResponse = ListHandshakesForAccountResponse'
  { handshakes ::
      Lude.Maybe [Handshake],
    nextToken ::
      Lude.Maybe Lude.Text,
    responseStatus ::
      Lude.Int
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListHandshakesForAccountResponse' with the minimum fields required to make a request.
--
-- * 'handshakes' - A list of 'Handshake' objects with details about each of the handshakes that is associated with the specified account.
-- * 'nextToken' - If present, indicates that more output is available than is included in the current response. Use this value in the @NextToken@ request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the @NextToken@ response element comes back as @null@ .
-- * 'responseStatus' - The response status code.
mkListHandshakesForAccountResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  ListHandshakesForAccountResponse
mkListHandshakesForAccountResponse pResponseStatus_ =
  ListHandshakesForAccountResponse'
    { handshakes = Lude.Nothing,
      nextToken = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | A list of 'Handshake' objects with details about each of the handshakes that is associated with the specified account.
--
-- /Note:/ Consider using 'handshakes' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfarsHandshakes :: Lens.Lens' ListHandshakesForAccountResponse (Lude.Maybe [Handshake])
lhfarsHandshakes = Lens.lens (handshakes :: ListHandshakesForAccountResponse -> Lude.Maybe [Handshake]) (\s a -> s {handshakes = a} :: ListHandshakesForAccountResponse)
{-# DEPRECATED lhfarsHandshakes "Use generic-lens or generic-optics with 'handshakes' instead." #-}

-- | If present, indicates that more output is available than is included in the current response. Use this value in the @NextToken@ request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the @NextToken@ response element comes back as @null@ .
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfarsNextToken :: Lens.Lens' ListHandshakesForAccountResponse (Lude.Maybe Lude.Text)
lhfarsNextToken = Lens.lens (nextToken :: ListHandshakesForAccountResponse -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListHandshakesForAccountResponse)
{-# DEPRECATED lhfarsNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfarsResponseStatus :: Lens.Lens' ListHandshakesForAccountResponse Lude.Int
lhfarsResponseStatus = Lens.lens (responseStatus :: ListHandshakesForAccountResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: ListHandshakesForAccountResponse)
{-# DEPRECATED lhfarsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
