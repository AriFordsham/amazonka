{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Organizations.ListHandshakesForOrganization
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the handshakes that are associated with the organization that the requesting user is part of. The @ListHandshakesForOrganization@ operation returns a list of handshake structures. Each structure contains details and status about a handshake.
--
-- Handshakes that are @ACCEPTED@ , @DECLINED@ , or @CANCELED@ appear in the results of this API for only 30 days after changing to that state. After that, they're deleted and no longer accessible.
-- This operation can be called only from the organization's management account or by a member account that is a delegated administrator for an AWS service.
--
-- This operation returns paginated results.
module Network.AWS.Organizations.ListHandshakesForOrganization
  ( -- * Creating a request
    ListHandshakesForOrganization (..),
    mkListHandshakesForOrganization,

    -- ** Request lenses
    lhfoNextToken,
    lhfoFilter,
    lhfoMaxResults,

    -- * Destructuring the response
    ListHandshakesForOrganizationResponse (..),
    mkListHandshakesForOrganizationResponse,

    -- ** Response lenses
    lhforsHandshakes,
    lhforsNextToken,
    lhforsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import Network.AWS.Organizations.Types
import qualified Network.AWS.Pager as Page
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkListHandshakesForOrganization' smart constructor.
data ListHandshakesForOrganization = ListHandshakesForOrganization'
  { -- | The parameter for receiving additional results if you receive a @NextToken@ response in a previous request. A @NextToken@ response indicates that more output is available. Set this parameter to the value of the previous call's @NextToken@ response to indicate where the output should continue from.
    nextToken :: Lude.Maybe Lude.Text,
    -- | A filter of the handshakes that you want included in the response. The default is all types. Use the @ActionType@ element to limit the output to only a specified type, such as @INVITE@ , @ENABLE-ALL-FEATURES@ , or @APPROVE-ALL-FEATURES@ . Alternatively, for the @ENABLE-ALL-FEATURES@ handshake that generates a separate child handshake for each member account, you can specify the @ParentHandshakeId@ to see only the handshakes that were generated by that parent request.
    filter :: Lude.Maybe HandshakeFilter,
    -- | The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the @NextToken@ response element is present and has a value (is not null). Include that value as the @NextToken@ request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check @NextToken@ after every operation to ensure that you receive all of the results.
    maxResults :: Lude.Maybe Lude.Natural
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListHandshakesForOrganization' with the minimum fields required to make a request.
--
-- * 'nextToken' - The parameter for receiving additional results if you receive a @NextToken@ response in a previous request. A @NextToken@ response indicates that more output is available. Set this parameter to the value of the previous call's @NextToken@ response to indicate where the output should continue from.
-- * 'filter' - A filter of the handshakes that you want included in the response. The default is all types. Use the @ActionType@ element to limit the output to only a specified type, such as @INVITE@ , @ENABLE-ALL-FEATURES@ , or @APPROVE-ALL-FEATURES@ . Alternatively, for the @ENABLE-ALL-FEATURES@ handshake that generates a separate child handshake for each member account, you can specify the @ParentHandshakeId@ to see only the handshakes that were generated by that parent request.
-- * 'maxResults' - The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the @NextToken@ response element is present and has a value (is not null). Include that value as the @NextToken@ request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check @NextToken@ after every operation to ensure that you receive all of the results.
mkListHandshakesForOrganization ::
  ListHandshakesForOrganization
mkListHandshakesForOrganization =
  ListHandshakesForOrganization'
    { nextToken = Lude.Nothing,
      filter = Lude.Nothing,
      maxResults = Lude.Nothing
    }

-- | The parameter for receiving additional results if you receive a @NextToken@ response in a previous request. A @NextToken@ response indicates that more output is available. Set this parameter to the value of the previous call's @NextToken@ response to indicate where the output should continue from.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfoNextToken :: Lens.Lens' ListHandshakesForOrganization (Lude.Maybe Lude.Text)
lhfoNextToken = Lens.lens (nextToken :: ListHandshakesForOrganization -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListHandshakesForOrganization)
{-# DEPRECATED lhfoNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | A filter of the handshakes that you want included in the response. The default is all types. Use the @ActionType@ element to limit the output to only a specified type, such as @INVITE@ , @ENABLE-ALL-FEATURES@ , or @APPROVE-ALL-FEATURES@ . Alternatively, for the @ENABLE-ALL-FEATURES@ handshake that generates a separate child handshake for each member account, you can specify the @ParentHandshakeId@ to see only the handshakes that were generated by that parent request.
--
-- /Note:/ Consider using 'filter' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfoFilter :: Lens.Lens' ListHandshakesForOrganization (Lude.Maybe HandshakeFilter)
lhfoFilter = Lens.lens (filter :: ListHandshakesForOrganization -> Lude.Maybe HandshakeFilter) (\s a -> s {filter = a} :: ListHandshakesForOrganization)
{-# DEPRECATED lhfoFilter "Use generic-lens or generic-optics with 'filter' instead." #-}

-- | The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the @NextToken@ response element is present and has a value (is not null). Include that value as the @NextToken@ request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check @NextToken@ after every operation to ensure that you receive all of the results.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhfoMaxResults :: Lens.Lens' ListHandshakesForOrganization (Lude.Maybe Lude.Natural)
lhfoMaxResults = Lens.lens (maxResults :: ListHandshakesForOrganization -> Lude.Maybe Lude.Natural) (\s a -> s {maxResults = a} :: ListHandshakesForOrganization)
{-# DEPRECATED lhfoMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

instance Page.AWSPager ListHandshakesForOrganization where
  page rq rs
    | Page.stop (rs Lens.^. lhforsNextToken) = Lude.Nothing
    | Page.stop (rs Lens.^. lhforsHandshakes) = Lude.Nothing
    | Lude.otherwise =
      Lude.Just Lude.$
        rq
          Lude.& lhfoNextToken Lens..~ rs Lens.^. lhforsNextToken

instance Lude.AWSRequest ListHandshakesForOrganization where
  type
    Rs ListHandshakesForOrganization =
      ListHandshakesForOrganizationResponse
  request = Req.postJSON organizationsService
  response =
    Res.receiveJSON
      ( \s h x ->
          ListHandshakesForOrganizationResponse'
            Lude.<$> (x Lude..?> "Handshakes" Lude..!@ Lude.mempty)
            Lude.<*> (x Lude..?> "NextToken")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders ListHandshakesForOrganization where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ( "AWSOrganizationsV20161128.ListHandshakesForOrganization" ::
                          Lude.ByteString
                      ),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON ListHandshakesForOrganization where
  toJSON ListHandshakesForOrganization' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("NextToken" Lude..=) Lude.<$> nextToken,
            ("Filter" Lude..=) Lude.<$> filter,
            ("MaxResults" Lude..=) Lude.<$> maxResults
          ]
      )

instance Lude.ToPath ListHandshakesForOrganization where
  toPath = Lude.const "/"

instance Lude.ToQuery ListHandshakesForOrganization where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkListHandshakesForOrganizationResponse' smart constructor.
data ListHandshakesForOrganizationResponse = ListHandshakesForOrganizationResponse'
  { -- | A list of 'Handshake' objects with details about each of the handshakes that are associated with an organization.
    handshakes :: Lude.Maybe [Handshake],
    -- | If present, indicates that more output is available than is included in the current response. Use this value in the @NextToken@ request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the @NextToken@ response element comes back as @null@ .
    nextToken :: Lude.Maybe Lude.Text,
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListHandshakesForOrganizationResponse' with the minimum fields required to make a request.
--
-- * 'handshakes' - A list of 'Handshake' objects with details about each of the handshakes that are associated with an organization.
-- * 'nextToken' - If present, indicates that more output is available than is included in the current response. Use this value in the @NextToken@ request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the @NextToken@ response element comes back as @null@ .
-- * 'responseStatus' - The response status code.
mkListHandshakesForOrganizationResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  ListHandshakesForOrganizationResponse
mkListHandshakesForOrganizationResponse pResponseStatus_ =
  ListHandshakesForOrganizationResponse'
    { handshakes = Lude.Nothing,
      nextToken = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | A list of 'Handshake' objects with details about each of the handshakes that are associated with an organization.
--
-- /Note:/ Consider using 'handshakes' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhforsHandshakes :: Lens.Lens' ListHandshakesForOrganizationResponse (Lude.Maybe [Handshake])
lhforsHandshakes = Lens.lens (handshakes :: ListHandshakesForOrganizationResponse -> Lude.Maybe [Handshake]) (\s a -> s {handshakes = a} :: ListHandshakesForOrganizationResponse)
{-# DEPRECATED lhforsHandshakes "Use generic-lens or generic-optics with 'handshakes' instead." #-}

-- | If present, indicates that more output is available than is included in the current response. Use this value in the @NextToken@ request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the @NextToken@ response element comes back as @null@ .
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhforsNextToken :: Lens.Lens' ListHandshakesForOrganizationResponse (Lude.Maybe Lude.Text)
lhforsNextToken = Lens.lens (nextToken :: ListHandshakesForOrganizationResponse -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListHandshakesForOrganizationResponse)
{-# DEPRECATED lhforsNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lhforsResponseStatus :: Lens.Lens' ListHandshakesForOrganizationResponse Lude.Int
lhforsResponseStatus = Lens.lens (responseStatus :: ListHandshakesForOrganizationResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: ListHandshakesForOrganizationResponse)
{-# DEPRECATED lhforsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
