{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Config.PutConfigRule
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Adds or updates an AWS Config rule for evaluating whether your AWS resources comply with your desired configurations.
--
-- You can use this action for custom AWS Config rules and AWS managed Config rules. A custom AWS Config rule is a rule that you develop and maintain. An AWS managed Config rule is a customizable, predefined rule that AWS Config provides.
-- If you are adding a new custom AWS Config rule, you must first create the AWS Lambda function that the rule invokes to evaluate your resources. When you use the @PutConfigRule@ action to add the rule to AWS Config, you must specify the Amazon Resource Name (ARN) that AWS Lambda assigns to the function. Specify the ARN for the @SourceIdentifier@ key. This key is part of the @Source@ object, which is part of the @ConfigRule@ object.
-- If you are adding an AWS managed Config rule, specify the rule's identifier for the @SourceIdentifier@ key. To reference AWS managed Config rule identifiers, see <https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html About AWS Managed Config Rules> .
-- For any new rule that you add, specify the @ConfigRuleName@ in the @ConfigRule@ object. Do not specify the @ConfigRuleArn@ or the @ConfigRuleId@ . These values are generated by AWS Config for new rules.
-- If you are updating a rule that you added previously, you can specify the rule by @ConfigRuleName@ , @ConfigRuleId@ , or @ConfigRuleArn@ in the @ConfigRule@ data type that you use in this request.
-- The maximum number of rules that AWS Config supports is 150.
-- For information about requesting a rule limit increase, see <http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_config AWS Config Limits> in the /AWS General Reference Guide/ .
-- For more information about developing and using AWS Config rules, see <https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html Evaluating AWS Resource Configurations with AWS Config> in the /AWS Config Developer Guide/ .
module Network.AWS.Config.PutConfigRule
  ( -- * Creating a request
    PutConfigRule (..),
    mkPutConfigRule,

    -- ** Request lenses
    pcrConfigRule,
    pcrTags,

    -- * Destructuring the response
    PutConfigRuleResponse (..),
    mkPutConfigRuleResponse,
  )
where

import Network.AWS.Config.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkPutConfigRule' smart constructor.
data PutConfigRule = PutConfigRule'
  { -- | The rule that you want to add to your account.
    configRule :: ConfigRule,
    -- | An array of tag object.
    tags :: Lude.Maybe [Tag]
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutConfigRule' with the minimum fields required to make a request.
--
-- * 'configRule' - The rule that you want to add to your account.
-- * 'tags' - An array of tag object.
mkPutConfigRule ::
  -- | 'configRule'
  ConfigRule ->
  PutConfigRule
mkPutConfigRule pConfigRule_ =
  PutConfigRule' {configRule = pConfigRule_, tags = Lude.Nothing}

-- | The rule that you want to add to your account.
--
-- /Note:/ Consider using 'configRule' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pcrConfigRule :: Lens.Lens' PutConfigRule ConfigRule
pcrConfigRule = Lens.lens (configRule :: PutConfigRule -> ConfigRule) (\s a -> s {configRule = a} :: PutConfigRule)
{-# DEPRECATED pcrConfigRule "Use generic-lens or generic-optics with 'configRule' instead." #-}

-- | An array of tag object.
--
-- /Note:/ Consider using 'tags' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pcrTags :: Lens.Lens' PutConfigRule (Lude.Maybe [Tag])
pcrTags = Lens.lens (tags :: PutConfigRule -> Lude.Maybe [Tag]) (\s a -> s {tags = a} :: PutConfigRule)
{-# DEPRECATED pcrTags "Use generic-lens or generic-optics with 'tags' instead." #-}

instance Lude.AWSRequest PutConfigRule where
  type Rs PutConfigRule = PutConfigRuleResponse
  request = Req.postJSON configService
  response = Res.receiveNull PutConfigRuleResponse'

instance Lude.ToHeaders PutConfigRule where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("StarlingDoveService.PutConfigRule" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON PutConfigRule where
  toJSON PutConfigRule' {..} =
    Lude.object
      ( Lude.catMaybes
          [ Lude.Just ("ConfigRule" Lude..= configRule),
            ("Tags" Lude..=) Lude.<$> tags
          ]
      )

instance Lude.ToPath PutConfigRule where
  toPath = Lude.const "/"

instance Lude.ToQuery PutConfigRule where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkPutConfigRuleResponse' smart constructor.
data PutConfigRuleResponse = PutConfigRuleResponse'
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutConfigRuleResponse' with the minimum fields required to make a request.
mkPutConfigRuleResponse ::
  PutConfigRuleResponse
mkPutConfigRuleResponse = PutConfigRuleResponse'
