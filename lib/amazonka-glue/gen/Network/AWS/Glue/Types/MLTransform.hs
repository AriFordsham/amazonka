{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Glue.Types.MLTransform
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.Glue.Types.MLTransform
  ( MLTransform (..),

    -- * Smart constructor
    mkMLTransform,

    -- * Lenses
    mltStatus,
    mltNumberOfWorkers,
    mltLastModifiedOn,
    mltLabelCount,
    mltWorkerType,
    mltInputRecordTables,
    mltGlueVersion,
    mltEvaluationMetrics,
    mltSchema,
    mltRole,
    mltName,
    mltParameters,
    mltMaxRetries,
    mltMaxCapacity,
    mltTimeout,
    mltTransformEncryption,
    mltDescription,
    mltCreatedOn,
    mltTransformId,
  )
where

import Network.AWS.Glue.Types.EvaluationMetrics
import Network.AWS.Glue.Types.GlueTable
import Network.AWS.Glue.Types.SchemaColumn
import Network.AWS.Glue.Types.TransformEncryption
import Network.AWS.Glue.Types.TransformParameters
import Network.AWS.Glue.Types.TransformStatusType
import Network.AWS.Glue.Types.WorkerType
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | A structure for a machine learning transform.
--
-- /See:/ 'mkMLTransform' smart constructor.
data MLTransform = MLTransform'
  { -- | The current status of the machine learning transform.
    status :: Lude.Maybe TransformStatusType,
    -- | The number of workers of a defined @workerType@ that are allocated when a task of the transform runs.
    --
    -- If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
    numberOfWorkers :: Lude.Maybe Lude.Int,
    -- | A timestamp. The last point in time when this machine learning transform was modified.
    lastModifiedOn :: Lude.Maybe Lude.Timestamp,
    -- | A count identifier for the labeling files generated by AWS Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.
    labelCount :: Lude.Maybe Lude.Int,
    -- | The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.
    --
    --
    --     * For the @Standard@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
    --
    --
    --     * For the @G.1X@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
    --
    --
    --     * For the @G.2X@ worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
    --
    --
    -- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
    --
    --     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
    --
    --
    --     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
    --
    --
    --     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
    --
    --
    --     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
    workerType :: Lude.Maybe WorkerType,
    -- | A list of AWS Glue table definitions used by the transform.
    inputRecordTables :: Lude.Maybe [GlueTable],
    -- | This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions AWS Glue Versions> in the developer guide.
    glueVersion :: Lude.Maybe Lude.Text,
    -- | An @EvaluationMetrics@ object. Evaluation metrics provide an estimate of the quality of your machine learning transform.
    evaluationMetrics :: Lude.Maybe EvaluationMetrics,
    -- | A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns.
    schema :: Lude.Maybe [SchemaColumn],
    -- | The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both AWS Glue service role permissions to AWS Glue resources, and Amazon S3 permissions required by the transform.
    --
    --
    --     * This role needs AWS Glue service role permissions to allow access to resources in AWS Glue. See <https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html Attach a Policy to IAM Users That Access AWS Glue> .
    --
    --
    --     * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.
    role' :: Lude.Maybe Lude.Text,
    -- | A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time.
    name :: Lude.Maybe Lude.Text,
    -- | A @TransformParameters@ object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).
    parameters :: Lude.Maybe TransformParameters,
    -- | The maximum number of times to retry after an @MLTaskRun@ of the machine learning transform fails.
    maxRetries :: Lude.Maybe Lude.Int,
    -- | The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <http://aws.amazon.com/glue/pricing/ AWS Glue pricing page> .
    --
    -- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
    --
    --     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
    --
    --
    --     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
    --
    --
    --     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
    --
    --
    --     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
    --
    --
    -- When the @WorkerType@ field is set to a value other than @Standard@ , the @MaxCapacity@ field is set automatically and becomes read-only.
    maxCapacity :: Lude.Maybe Lude.Double,
    -- | The timeout in minutes of the machine learning transform.
    timeout :: Lude.Maybe Lude.Natural,
    -- | The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
    transformEncryption :: Lude.Maybe TransformEncryption,
    -- | A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time.
    description :: Lude.Maybe Lude.Text,
    -- | A timestamp. The time and date that this machine learning transform was created.
    createdOn :: Lude.Maybe Lude.Timestamp,
    -- | The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change.
    transformId :: Lude.Maybe Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'MLTransform' with the minimum fields required to make a request.
--
-- * 'status' - The current status of the machine learning transform.
-- * 'numberOfWorkers' - The number of workers of a defined @workerType@ that are allocated when a task of the transform runs.
--
-- If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
-- * 'lastModifiedOn' - A timestamp. The last point in time when this machine learning transform was modified.
-- * 'labelCount' - A count identifier for the labeling files generated by AWS Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.
-- * 'workerType' - The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.
--
--
--     * For the @Standard@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
--
--
--     * For the @G.1X@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
--
--
--     * For the @G.2X@ worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
--
--
-- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
--
--     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
--
--
--     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
--
--
--     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
--
--     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
--
--
-- * 'inputRecordTables' - A list of AWS Glue table definitions used by the transform.
-- * 'glueVersion' - This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions AWS Glue Versions> in the developer guide.
-- * 'evaluationMetrics' - An @EvaluationMetrics@ object. Evaluation metrics provide an estimate of the quality of your machine learning transform.
-- * 'schema' - A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns.
-- * 'role'' - The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both AWS Glue service role permissions to AWS Glue resources, and Amazon S3 permissions required by the transform.
--
--
--     * This role needs AWS Glue service role permissions to allow access to resources in AWS Glue. See <https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html Attach a Policy to IAM Users That Access AWS Glue> .
--
--
--     * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.
--
--
-- * 'name' - A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time.
-- * 'parameters' - A @TransformParameters@ object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).
-- * 'maxRetries' - The maximum number of times to retry after an @MLTaskRun@ of the machine learning transform fails.
-- * 'maxCapacity' - The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <http://aws.amazon.com/glue/pricing/ AWS Glue pricing page> .
--
-- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
--
--     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
--
--
--     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
--
--
--     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
--
--     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
--
--
-- When the @WorkerType@ field is set to a value other than @Standard@ , the @MaxCapacity@ field is set automatically and becomes read-only.
-- * 'timeout' - The timeout in minutes of the machine learning transform.
-- * 'transformEncryption' - The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
-- * 'description' - A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time.
-- * 'createdOn' - A timestamp. The time and date that this machine learning transform was created.
-- * 'transformId' - The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change.
mkMLTransform ::
  MLTransform
mkMLTransform =
  MLTransform'
    { status = Lude.Nothing,
      numberOfWorkers = Lude.Nothing,
      lastModifiedOn = Lude.Nothing,
      labelCount = Lude.Nothing,
      workerType = Lude.Nothing,
      inputRecordTables = Lude.Nothing,
      glueVersion = Lude.Nothing,
      evaluationMetrics = Lude.Nothing,
      schema = Lude.Nothing,
      role' = Lude.Nothing,
      name = Lude.Nothing,
      parameters = Lude.Nothing,
      maxRetries = Lude.Nothing,
      maxCapacity = Lude.Nothing,
      timeout = Lude.Nothing,
      transformEncryption = Lude.Nothing,
      description = Lude.Nothing,
      createdOn = Lude.Nothing,
      transformId = Lude.Nothing
    }

-- | The current status of the machine learning transform.
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltStatus :: Lens.Lens' MLTransform (Lude.Maybe TransformStatusType)
mltStatus = Lens.lens (status :: MLTransform -> Lude.Maybe TransformStatusType) (\s a -> s {status = a} :: MLTransform)
{-# DEPRECATED mltStatus "Use generic-lens or generic-optics with 'status' instead." #-}

-- | The number of workers of a defined @workerType@ that are allocated when a task of the transform runs.
--
-- If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
-- /Note:/ Consider using 'numberOfWorkers' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltNumberOfWorkers :: Lens.Lens' MLTransform (Lude.Maybe Lude.Int)
mltNumberOfWorkers = Lens.lens (numberOfWorkers :: MLTransform -> Lude.Maybe Lude.Int) (\s a -> s {numberOfWorkers = a} :: MLTransform)
{-# DEPRECATED mltNumberOfWorkers "Use generic-lens or generic-optics with 'numberOfWorkers' instead." #-}

-- | A timestamp. The last point in time when this machine learning transform was modified.
--
-- /Note:/ Consider using 'lastModifiedOn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltLastModifiedOn :: Lens.Lens' MLTransform (Lude.Maybe Lude.Timestamp)
mltLastModifiedOn = Lens.lens (lastModifiedOn :: MLTransform -> Lude.Maybe Lude.Timestamp) (\s a -> s {lastModifiedOn = a} :: MLTransform)
{-# DEPRECATED mltLastModifiedOn "Use generic-lens or generic-optics with 'lastModifiedOn' instead." #-}

-- | A count identifier for the labeling files generated by AWS Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.
--
-- /Note:/ Consider using 'labelCount' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltLabelCount :: Lens.Lens' MLTransform (Lude.Maybe Lude.Int)
mltLabelCount = Lens.lens (labelCount :: MLTransform -> Lude.Maybe Lude.Int) (\s a -> s {labelCount = a} :: MLTransform)
{-# DEPRECATED mltLabelCount "Use generic-lens or generic-optics with 'labelCount' instead." #-}

-- | The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.
--
--
--     * For the @Standard@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
--
--
--     * For the @G.1X@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
--
--
--     * For the @G.2X@ worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
--
--
-- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
--
--     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
--
--
--     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
--
--
--     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
--
--     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
--
--
--
-- /Note:/ Consider using 'workerType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltWorkerType :: Lens.Lens' MLTransform (Lude.Maybe WorkerType)
mltWorkerType = Lens.lens (workerType :: MLTransform -> Lude.Maybe WorkerType) (\s a -> s {workerType = a} :: MLTransform)
{-# DEPRECATED mltWorkerType "Use generic-lens or generic-optics with 'workerType' instead." #-}

-- | A list of AWS Glue table definitions used by the transform.
--
-- /Note:/ Consider using 'inputRecordTables' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltInputRecordTables :: Lens.Lens' MLTransform (Lude.Maybe [GlueTable])
mltInputRecordTables = Lens.lens (inputRecordTables :: MLTransform -> Lude.Maybe [GlueTable]) (\s a -> s {inputRecordTables = a} :: MLTransform)
{-# DEPRECATED mltInputRecordTables "Use generic-lens or generic-optics with 'inputRecordTables' instead." #-}

-- | This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions AWS Glue Versions> in the developer guide.
--
-- /Note:/ Consider using 'glueVersion' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltGlueVersion :: Lens.Lens' MLTransform (Lude.Maybe Lude.Text)
mltGlueVersion = Lens.lens (glueVersion :: MLTransform -> Lude.Maybe Lude.Text) (\s a -> s {glueVersion = a} :: MLTransform)
{-# DEPRECATED mltGlueVersion "Use generic-lens or generic-optics with 'glueVersion' instead." #-}

-- | An @EvaluationMetrics@ object. Evaluation metrics provide an estimate of the quality of your machine learning transform.
--
-- /Note:/ Consider using 'evaluationMetrics' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltEvaluationMetrics :: Lens.Lens' MLTransform (Lude.Maybe EvaluationMetrics)
mltEvaluationMetrics = Lens.lens (evaluationMetrics :: MLTransform -> Lude.Maybe EvaluationMetrics) (\s a -> s {evaluationMetrics = a} :: MLTransform)
{-# DEPRECATED mltEvaluationMetrics "Use generic-lens or generic-optics with 'evaluationMetrics' instead." #-}

-- | A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns.
--
-- /Note:/ Consider using 'schema' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltSchema :: Lens.Lens' MLTransform (Lude.Maybe [SchemaColumn])
mltSchema = Lens.lens (schema :: MLTransform -> Lude.Maybe [SchemaColumn]) (\s a -> s {schema = a} :: MLTransform)
{-# DEPRECATED mltSchema "Use generic-lens or generic-optics with 'schema' instead." #-}

-- | The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both AWS Glue service role permissions to AWS Glue resources, and Amazon S3 permissions required by the transform.
--
--
--     * This role needs AWS Glue service role permissions to allow access to resources in AWS Glue. See <https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html Attach a Policy to IAM Users That Access AWS Glue> .
--
--
--     * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.
--
--
--
-- /Note:/ Consider using 'role'' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltRole :: Lens.Lens' MLTransform (Lude.Maybe Lude.Text)
mltRole = Lens.lens (role' :: MLTransform -> Lude.Maybe Lude.Text) (\s a -> s {role' = a} :: MLTransform)
{-# DEPRECATED mltRole "Use generic-lens or generic-optics with 'role'' instead." #-}

-- | A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time.
--
-- /Note:/ Consider using 'name' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltName :: Lens.Lens' MLTransform (Lude.Maybe Lude.Text)
mltName = Lens.lens (name :: MLTransform -> Lude.Maybe Lude.Text) (\s a -> s {name = a} :: MLTransform)
{-# DEPRECATED mltName "Use generic-lens or generic-optics with 'name' instead." #-}

-- | A @TransformParameters@ object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).
--
-- /Note:/ Consider using 'parameters' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltParameters :: Lens.Lens' MLTransform (Lude.Maybe TransformParameters)
mltParameters = Lens.lens (parameters :: MLTransform -> Lude.Maybe TransformParameters) (\s a -> s {parameters = a} :: MLTransform)
{-# DEPRECATED mltParameters "Use generic-lens or generic-optics with 'parameters' instead." #-}

-- | The maximum number of times to retry after an @MLTaskRun@ of the machine learning transform fails.
--
-- /Note:/ Consider using 'maxRetries' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltMaxRetries :: Lens.Lens' MLTransform (Lude.Maybe Lude.Int)
mltMaxRetries = Lens.lens (maxRetries :: MLTransform -> Lude.Maybe Lude.Int) (\s a -> s {maxRetries = a} :: MLTransform)
{-# DEPRECATED mltMaxRetries "Use generic-lens or generic-optics with 'maxRetries' instead." #-}

-- | The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <http://aws.amazon.com/glue/pricing/ AWS Glue pricing page> .
--
-- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
--
--     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
--
--
--     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
--
--
--     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
--
--     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
--
--
-- When the @WorkerType@ field is set to a value other than @Standard@ , the @MaxCapacity@ field is set automatically and becomes read-only.
--
-- /Note:/ Consider using 'maxCapacity' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltMaxCapacity :: Lens.Lens' MLTransform (Lude.Maybe Lude.Double)
mltMaxCapacity = Lens.lens (maxCapacity :: MLTransform -> Lude.Maybe Lude.Double) (\s a -> s {maxCapacity = a} :: MLTransform)
{-# DEPRECATED mltMaxCapacity "Use generic-lens or generic-optics with 'maxCapacity' instead." #-}

-- | The timeout in minutes of the machine learning transform.
--
-- /Note:/ Consider using 'timeout' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltTimeout :: Lens.Lens' MLTransform (Lude.Maybe Lude.Natural)
mltTimeout = Lens.lens (timeout :: MLTransform -> Lude.Maybe Lude.Natural) (\s a -> s {timeout = a} :: MLTransform)
{-# DEPRECATED mltTimeout "Use generic-lens or generic-optics with 'timeout' instead." #-}

-- | The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
--
-- /Note:/ Consider using 'transformEncryption' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltTransformEncryption :: Lens.Lens' MLTransform (Lude.Maybe TransformEncryption)
mltTransformEncryption = Lens.lens (transformEncryption :: MLTransform -> Lude.Maybe TransformEncryption) (\s a -> s {transformEncryption = a} :: MLTransform)
{-# DEPRECATED mltTransformEncryption "Use generic-lens or generic-optics with 'transformEncryption' instead." #-}

-- | A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time.
--
-- /Note:/ Consider using 'description' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltDescription :: Lens.Lens' MLTransform (Lude.Maybe Lude.Text)
mltDescription = Lens.lens (description :: MLTransform -> Lude.Maybe Lude.Text) (\s a -> s {description = a} :: MLTransform)
{-# DEPRECATED mltDescription "Use generic-lens or generic-optics with 'description' instead." #-}

-- | A timestamp. The time and date that this machine learning transform was created.
--
-- /Note:/ Consider using 'createdOn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltCreatedOn :: Lens.Lens' MLTransform (Lude.Maybe Lude.Timestamp)
mltCreatedOn = Lens.lens (createdOn :: MLTransform -> Lude.Maybe Lude.Timestamp) (\s a -> s {createdOn = a} :: MLTransform)
{-# DEPRECATED mltCreatedOn "Use generic-lens or generic-optics with 'createdOn' instead." #-}

-- | The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change.
--
-- /Note:/ Consider using 'transformId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltTransformId :: Lens.Lens' MLTransform (Lude.Maybe Lude.Text)
mltTransformId = Lens.lens (transformId :: MLTransform -> Lude.Maybe Lude.Text) (\s a -> s {transformId = a} :: MLTransform)
{-# DEPRECATED mltTransformId "Use generic-lens or generic-optics with 'transformId' instead." #-}

instance Lude.FromJSON MLTransform where
  parseJSON =
    Lude.withObject
      "MLTransform"
      ( \x ->
          MLTransform'
            Lude.<$> (x Lude..:? "Status")
            Lude.<*> (x Lude..:? "NumberOfWorkers")
            Lude.<*> (x Lude..:? "LastModifiedOn")
            Lude.<*> (x Lude..:? "LabelCount")
            Lude.<*> (x Lude..:? "WorkerType")
            Lude.<*> (x Lude..:? "InputRecordTables" Lude..!= Lude.mempty)
            Lude.<*> (x Lude..:? "GlueVersion")
            Lude.<*> (x Lude..:? "EvaluationMetrics")
            Lude.<*> (x Lude..:? "Schema" Lude..!= Lude.mempty)
            Lude.<*> (x Lude..:? "Role")
            Lude.<*> (x Lude..:? "Name")
            Lude.<*> (x Lude..:? "Parameters")
            Lude.<*> (x Lude..:? "MaxRetries")
            Lude.<*> (x Lude..:? "MaxCapacity")
            Lude.<*> (x Lude..:? "Timeout")
            Lude.<*> (x Lude..:? "TransformEncryption")
            Lude.<*> (x Lude..:? "Description")
            Lude.<*> (x Lude..:? "CreatedOn")
            Lude.<*> (x Lude..:? "TransformId")
      )
