{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Glue.Types.MLTransform
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.Glue.Types.MLTransform
  ( MLTransform (..)
  -- * Smart constructor
  , mkMLTransform
  -- * Lenses
  , mltCreatedOn
  , mltDescription
  , mltEvaluationMetrics
  , mltGlueVersion
  , mltInputRecordTables
  , mltLabelCount
  , mltLastModifiedOn
  , mltMaxCapacity
  , mltMaxRetries
  , mltName
  , mltNumberOfWorkers
  , mltParameters
  , mltRole
  , mltSchema
  , mltStatus
  , mltTimeout
  , mltTransformEncryption
  , mltTransformId
  , mltWorkerType
  ) where

import qualified Network.AWS.Glue.Types.Description as Types
import qualified Network.AWS.Glue.Types.EvaluationMetrics as Types
import qualified Network.AWS.Glue.Types.GlueTable as Types
import qualified Network.AWS.Glue.Types.GlueVersionString as Types
import qualified Network.AWS.Glue.Types.HashString as Types
import qualified Network.AWS.Glue.Types.Name as Types
import qualified Network.AWS.Glue.Types.Role as Types
import qualified Network.AWS.Glue.Types.SchemaColumn as Types
import qualified Network.AWS.Glue.Types.TransformEncryption as Types
import qualified Network.AWS.Glue.Types.TransformParameters as Types
import qualified Network.AWS.Glue.Types.TransformStatusType as Types
import qualified Network.AWS.Glue.Types.WorkerType as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | A structure for a machine learning transform.
--
-- /See:/ 'mkMLTransform' smart constructor.
data MLTransform = MLTransform'
  { createdOn :: Core.Maybe Core.NominalDiffTime
    -- ^ A timestamp. The time and date that this machine learning transform was created.
  , description :: Core.Maybe Types.Description
    -- ^ A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time.
  , evaluationMetrics :: Core.Maybe Types.EvaluationMetrics
    -- ^ An @EvaluationMetrics@ object. Evaluation metrics provide an estimate of the quality of your machine learning transform.
  , glueVersion :: Core.Maybe Types.GlueVersionString
    -- ^ This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions AWS Glue Versions> in the developer guide.
  , inputRecordTables :: Core.Maybe [Types.GlueTable]
    -- ^ A list of AWS Glue table definitions used by the transform.
  , labelCount :: Core.Maybe Core.Int
    -- ^ A count identifier for the labeling files generated by AWS Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.
  , lastModifiedOn :: Core.Maybe Core.NominalDiffTime
    -- ^ A timestamp. The last point in time when this machine learning transform was modified.
  , maxCapacity :: Core.Maybe Core.Double
    -- ^ The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <http://aws.amazon.com/glue/pricing/ AWS Glue pricing page> . 
--
-- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
--
--     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
--
--
--     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
--
--
--     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
--
--     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
--
--
-- When the @WorkerType@ field is set to a value other than @Standard@ , the @MaxCapacity@ field is set automatically and becomes read-only.
  , maxRetries :: Core.Maybe Core.Int
    -- ^ The maximum number of times to retry after an @MLTaskRun@ of the machine learning transform fails.
  , name :: Core.Maybe Types.Name
    -- ^ A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time.
  , numberOfWorkers :: Core.Maybe Core.Int
    -- ^ The number of workers of a defined @workerType@ that are allocated when a task of the transform runs.
--
-- If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
  , parameters :: Core.Maybe Types.TransformParameters
    -- ^ A @TransformParameters@ object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).
  , role' :: Core.Maybe Types.Role
    -- ^ The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both AWS Glue service role permissions to AWS Glue resources, and Amazon S3 permissions required by the transform. 
--
--
--     * This role needs AWS Glue service role permissions to allow access to resources in AWS Glue. See <https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html Attach a Policy to IAM Users That Access AWS Glue> .
--
--
--     * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.
--
--
  , schema :: Core.Maybe [Types.SchemaColumn]
    -- ^ A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns.
  , status :: Core.Maybe Types.TransformStatusType
    -- ^ The current status of the machine learning transform.
  , timeout :: Core.Maybe Core.Natural
    -- ^ The timeout in minutes of the machine learning transform.
  , transformEncryption :: Core.Maybe Types.TransformEncryption
    -- ^ The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
  , transformId :: Core.Maybe Types.HashString
    -- ^ The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change.
  , workerType :: Core.Maybe Types.WorkerType
    -- ^ The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.
--
--
--     * For the @Standard@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
--
--
--     * For the @G.1X@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
--
--
--     * For the @G.2X@ worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
--
--
-- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
--
--     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
--
--
--     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
--
--
--     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
--
--     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
--
--
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'MLTransform' value with any optional fields omitted.
mkMLTransform
    :: MLTransform
mkMLTransform
  = MLTransform'{createdOn = Core.Nothing,
                 description = Core.Nothing, evaluationMetrics = Core.Nothing,
                 glueVersion = Core.Nothing, inputRecordTables = Core.Nothing,
                 labelCount = Core.Nothing, lastModifiedOn = Core.Nothing,
                 maxCapacity = Core.Nothing, maxRetries = Core.Nothing,
                 name = Core.Nothing, numberOfWorkers = Core.Nothing,
                 parameters = Core.Nothing, role' = Core.Nothing,
                 schema = Core.Nothing, status = Core.Nothing,
                 timeout = Core.Nothing, transformEncryption = Core.Nothing,
                 transformId = Core.Nothing, workerType = Core.Nothing}

-- | A timestamp. The time and date that this machine learning transform was created.
--
-- /Note:/ Consider using 'createdOn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltCreatedOn :: Lens.Lens' MLTransform (Core.Maybe Core.NominalDiffTime)
mltCreatedOn = Lens.field @"createdOn"
{-# INLINEABLE mltCreatedOn #-}
{-# DEPRECATED createdOn "Use generic-lens or generic-optics with 'createdOn' instead"  #-}

-- | A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time.
--
-- /Note:/ Consider using 'description' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltDescription :: Lens.Lens' MLTransform (Core.Maybe Types.Description)
mltDescription = Lens.field @"description"
{-# INLINEABLE mltDescription #-}
{-# DEPRECATED description "Use generic-lens or generic-optics with 'description' instead"  #-}

-- | An @EvaluationMetrics@ object. Evaluation metrics provide an estimate of the quality of your machine learning transform.
--
-- /Note:/ Consider using 'evaluationMetrics' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltEvaluationMetrics :: Lens.Lens' MLTransform (Core.Maybe Types.EvaluationMetrics)
mltEvaluationMetrics = Lens.field @"evaluationMetrics"
{-# INLINEABLE mltEvaluationMetrics #-}
{-# DEPRECATED evaluationMetrics "Use generic-lens or generic-optics with 'evaluationMetrics' instead"  #-}

-- | This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions AWS Glue Versions> in the developer guide.
--
-- /Note:/ Consider using 'glueVersion' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltGlueVersion :: Lens.Lens' MLTransform (Core.Maybe Types.GlueVersionString)
mltGlueVersion = Lens.field @"glueVersion"
{-# INLINEABLE mltGlueVersion #-}
{-# DEPRECATED glueVersion "Use generic-lens or generic-optics with 'glueVersion' instead"  #-}

-- | A list of AWS Glue table definitions used by the transform.
--
-- /Note:/ Consider using 'inputRecordTables' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltInputRecordTables :: Lens.Lens' MLTransform (Core.Maybe [Types.GlueTable])
mltInputRecordTables = Lens.field @"inputRecordTables"
{-# INLINEABLE mltInputRecordTables #-}
{-# DEPRECATED inputRecordTables "Use generic-lens or generic-optics with 'inputRecordTables' instead"  #-}

-- | A count identifier for the labeling files generated by AWS Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.
--
-- /Note:/ Consider using 'labelCount' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltLabelCount :: Lens.Lens' MLTransform (Core.Maybe Core.Int)
mltLabelCount = Lens.field @"labelCount"
{-# INLINEABLE mltLabelCount #-}
{-# DEPRECATED labelCount "Use generic-lens or generic-optics with 'labelCount' instead"  #-}

-- | A timestamp. The last point in time when this machine learning transform was modified.
--
-- /Note:/ Consider using 'lastModifiedOn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltLastModifiedOn :: Lens.Lens' MLTransform (Core.Maybe Core.NominalDiffTime)
mltLastModifiedOn = Lens.field @"lastModifiedOn"
{-# INLINEABLE mltLastModifiedOn #-}
{-# DEPRECATED lastModifiedOn "Use generic-lens or generic-optics with 'lastModifiedOn' instead"  #-}

-- | The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <http://aws.amazon.com/glue/pricing/ AWS Glue pricing page> . 
--
-- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
--
--     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
--
--
--     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
--
--
--     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
--
--     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
--
--
-- When the @WorkerType@ field is set to a value other than @Standard@ , the @MaxCapacity@ field is set automatically and becomes read-only.
--
-- /Note:/ Consider using 'maxCapacity' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltMaxCapacity :: Lens.Lens' MLTransform (Core.Maybe Core.Double)
mltMaxCapacity = Lens.field @"maxCapacity"
{-# INLINEABLE mltMaxCapacity #-}
{-# DEPRECATED maxCapacity "Use generic-lens or generic-optics with 'maxCapacity' instead"  #-}

-- | The maximum number of times to retry after an @MLTaskRun@ of the machine learning transform fails.
--
-- /Note:/ Consider using 'maxRetries' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltMaxRetries :: Lens.Lens' MLTransform (Core.Maybe Core.Int)
mltMaxRetries = Lens.field @"maxRetries"
{-# INLINEABLE mltMaxRetries #-}
{-# DEPRECATED maxRetries "Use generic-lens or generic-optics with 'maxRetries' instead"  #-}

-- | A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time.
--
-- /Note:/ Consider using 'name' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltName :: Lens.Lens' MLTransform (Core.Maybe Types.Name)
mltName = Lens.field @"name"
{-# INLINEABLE mltName #-}
{-# DEPRECATED name "Use generic-lens or generic-optics with 'name' instead"  #-}

-- | The number of workers of a defined @workerType@ that are allocated when a task of the transform runs.
--
-- If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
-- /Note:/ Consider using 'numberOfWorkers' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltNumberOfWorkers :: Lens.Lens' MLTransform (Core.Maybe Core.Int)
mltNumberOfWorkers = Lens.field @"numberOfWorkers"
{-# INLINEABLE mltNumberOfWorkers #-}
{-# DEPRECATED numberOfWorkers "Use generic-lens or generic-optics with 'numberOfWorkers' instead"  #-}

-- | A @TransformParameters@ object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).
--
-- /Note:/ Consider using 'parameters' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltParameters :: Lens.Lens' MLTransform (Core.Maybe Types.TransformParameters)
mltParameters = Lens.field @"parameters"
{-# INLINEABLE mltParameters #-}
{-# DEPRECATED parameters "Use generic-lens or generic-optics with 'parameters' instead"  #-}

-- | The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both AWS Glue service role permissions to AWS Glue resources, and Amazon S3 permissions required by the transform. 
--
--
--     * This role needs AWS Glue service role permissions to allow access to resources in AWS Glue. See <https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html Attach a Policy to IAM Users That Access AWS Glue> .
--
--
--     * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.
--
--
--
-- /Note:/ Consider using 'role'' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltRole :: Lens.Lens' MLTransform (Core.Maybe Types.Role)
mltRole = Lens.field @"role'"
{-# INLINEABLE mltRole #-}
{-# DEPRECATED role' "Use generic-lens or generic-optics with 'role'' instead"  #-}

-- | A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns.
--
-- /Note:/ Consider using 'schema' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltSchema :: Lens.Lens' MLTransform (Core.Maybe [Types.SchemaColumn])
mltSchema = Lens.field @"schema"
{-# INLINEABLE mltSchema #-}
{-# DEPRECATED schema "Use generic-lens or generic-optics with 'schema' instead"  #-}

-- | The current status of the machine learning transform.
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltStatus :: Lens.Lens' MLTransform (Core.Maybe Types.TransformStatusType)
mltStatus = Lens.field @"status"
{-# INLINEABLE mltStatus #-}
{-# DEPRECATED status "Use generic-lens or generic-optics with 'status' instead"  #-}

-- | The timeout in minutes of the machine learning transform.
--
-- /Note:/ Consider using 'timeout' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltTimeout :: Lens.Lens' MLTransform (Core.Maybe Core.Natural)
mltTimeout = Lens.field @"timeout"
{-# INLINEABLE mltTimeout #-}
{-# DEPRECATED timeout "Use generic-lens or generic-optics with 'timeout' instead"  #-}

-- | The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
--
-- /Note:/ Consider using 'transformEncryption' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltTransformEncryption :: Lens.Lens' MLTransform (Core.Maybe Types.TransformEncryption)
mltTransformEncryption = Lens.field @"transformEncryption"
{-# INLINEABLE mltTransformEncryption #-}
{-# DEPRECATED transformEncryption "Use generic-lens or generic-optics with 'transformEncryption' instead"  #-}

-- | The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change.
--
-- /Note:/ Consider using 'transformId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltTransformId :: Lens.Lens' MLTransform (Core.Maybe Types.HashString)
mltTransformId = Lens.field @"transformId"
{-# INLINEABLE mltTransformId #-}
{-# DEPRECATED transformId "Use generic-lens or generic-optics with 'transformId' instead"  #-}

-- | The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.
--
--
--     * For the @Standard@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
--
--
--     * For the @G.1X@ worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
--
--
--     * For the @G.2X@ worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
--
--
-- @MaxCapacity@ is a mutually exclusive option with @NumberOfWorkers@ and @WorkerType@ .
--
--     * If either @NumberOfWorkers@ or @WorkerType@ is set, then @MaxCapacity@ cannot be set.
--
--
--     * If @MaxCapacity@ is set then neither @NumberOfWorkers@ or @WorkerType@ can be set.
--
--
--     * If @WorkerType@ is set, then @NumberOfWorkers@ is required (and vice versa).
--
--
--     * @MaxCapacity@ and @NumberOfWorkers@ must both be at least 1.
--
--
--
-- /Note:/ Consider using 'workerType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mltWorkerType :: Lens.Lens' MLTransform (Core.Maybe Types.WorkerType)
mltWorkerType = Lens.field @"workerType"
{-# INLINEABLE mltWorkerType #-}
{-# DEPRECATED workerType "Use generic-lens or generic-optics with 'workerType' instead"  #-}

instance Core.FromJSON MLTransform where
        parseJSON
          = Core.withObject "MLTransform" Core.$
              \ x ->
                MLTransform' Core.<$>
                  (x Core..:? "CreatedOn") Core.<*> x Core..:? "Description" Core.<*>
                    x Core..:? "EvaluationMetrics"
                    Core.<*> x Core..:? "GlueVersion"
                    Core.<*> x Core..:? "InputRecordTables"
                    Core.<*> x Core..:? "LabelCount"
                    Core.<*> x Core..:? "LastModifiedOn"
                    Core.<*> x Core..:? "MaxCapacity"
                    Core.<*> x Core..:? "MaxRetries"
                    Core.<*> x Core..:? "Name"
                    Core.<*> x Core..:? "NumberOfWorkers"
                    Core.<*> x Core..:? "Parameters"
                    Core.<*> x Core..:? "Role"
                    Core.<*> x Core..:? "Schema"
                    Core.<*> x Core..:? "Status"
                    Core.<*> x Core..:? "Timeout"
                    Core.<*> x Core..:? "TransformEncryption"
                    Core.<*> x Core..:? "TransformId"
                    Core.<*> x Core..:? "WorkerType"
