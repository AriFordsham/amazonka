{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.RDS.CreateEventSubscription
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.
--
-- You can specify the type of source (@SourceType@ ) that you want to be notified of and provide a list of RDS sources (@SourceIds@ ) that triggers the events. You can also provide a list of event categories (@EventCategories@ ) for events that you want to be notified of. For example, you can specify @SourceType@ = @db-instance@ , @SourceIds@ = @mydbinstance1@ , @mydbinstance2@ and @EventCategories@ = @Availability@ , @Backup@ .
-- If you specify both the @SourceType@ and @SourceIds@ , such as @SourceType@ = @db-instance@ and @SourceIdentifier@ = @myDBInstance1@ , you are notified of all the @db-instance@ events for the specified source. If you specify a @SourceType@ but do not specify a @SourceIdentifier@ , you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the @SourceIdentifier@ , you are notified of events generated from all RDS sources belonging to your customer account.
module Network.AWS.RDS.CreateEventSubscription
    (
    -- * Creating a request
      CreateEventSubscription (..)
    , mkCreateEventSubscription
    -- ** Request lenses
    , cesSubscriptionName
    , cesSnsTopicArn
    , cesEnabled
    , cesEventCategories
    , cesSourceIds
    , cesSourceType
    , cesTags

    -- * Destructuring the response
    , CreateEventSubscriptionResponse (..)
    , mkCreateEventSubscriptionResponse
    -- ** Response lenses
    , cesrrsEventSubscription
    , cesrrsResponseStatus
    ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.RDS.Types as Types
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | 
--
-- /See:/ 'mkCreateEventSubscription' smart constructor.
data CreateEventSubscription = CreateEventSubscription'
  { subscriptionName :: Core.Text
    -- ^ The name of the subscription.
--
-- Constraints: The name must be less than 255 characters.
  , snsTopicArn :: Core.Text
    -- ^ The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  , enabled :: Core.Maybe Core.Bool
    -- ^ A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  , eventCategories :: Core.Maybe [Core.Text]
    -- ^ A list of event categories for a particular source type (@SourceType@ ) that you want to subscribe to. You can see a list of the categories for a given source type in <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html Events> in the /Amazon RDS User Guide/ or by using the @DescribeEventCategories@ operation. 
  , sourceIds :: Core.Maybe [Core.Text]
    -- ^ The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.
--
-- Constraints:
--
--     * If a @SourceIds@ value is supplied, @SourceType@ must also be provided.
--
--
--     * If the source type is a DB instance, a @DBInstanceIdentifier@ value must be supplied.
--
--
--     * If the source type is a DB cluster, a @DBClusterIdentifier@ value must be supplied.
--
--
--     * If the source type is a DB parameter group, a @DBParameterGroupName@ value must be supplied.
--
--
--     * If the source type is a DB security group, a @DBSecurityGroupName@ value must be supplied.
--
--
--     * If the source type is a DB snapshot, a @DBSnapshotIdentifier@ value must be supplied.
--
--
--     * If the source type is a DB cluster snapshot, a @DBClusterSnapshotIdentifier@ value must be supplied.
--
--
  , sourceType :: Core.Maybe Core.Text
    -- ^ The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to @db-instance@ . If this value isn't specified, all events are returned.
--
-- Valid values: @db-instance@ | @db-cluster@ | @db-parameter-group@ | @db-security-group@ | @db-snapshot@ | @db-cluster-snapshot@ 
  , tags :: Core.Maybe [Types.Tag]
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateEventSubscription' value with any optional fields omitted.
mkCreateEventSubscription
    :: Core.Text -- ^ 'subscriptionName'
    -> Core.Text -- ^ 'snsTopicArn'
    -> CreateEventSubscription
mkCreateEventSubscription subscriptionName snsTopicArn
  = CreateEventSubscription'{subscriptionName, snsTopicArn,
                             enabled = Core.Nothing, eventCategories = Core.Nothing,
                             sourceIds = Core.Nothing, sourceType = Core.Nothing,
                             tags = Core.Nothing}

-- | The name of the subscription.
--
-- Constraints: The name must be less than 255 characters.
--
-- /Note:/ Consider using 'subscriptionName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSubscriptionName :: Lens.Lens' CreateEventSubscription Core.Text
cesSubscriptionName = Lens.field @"subscriptionName"
{-# INLINEABLE cesSubscriptionName #-}
{-# DEPRECATED subscriptionName "Use generic-lens or generic-optics with 'subscriptionName' instead"  #-}

-- | The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
--
-- /Note:/ Consider using 'snsTopicArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSnsTopicArn :: Lens.Lens' CreateEventSubscription Core.Text
cesSnsTopicArn = Lens.field @"snsTopicArn"
{-# INLINEABLE cesSnsTopicArn #-}
{-# DEPRECATED snsTopicArn "Use generic-lens or generic-optics with 'snsTopicArn' instead"  #-}

-- | A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
--
-- /Note:/ Consider using 'enabled' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesEnabled :: Lens.Lens' CreateEventSubscription (Core.Maybe Core.Bool)
cesEnabled = Lens.field @"enabled"
{-# INLINEABLE cesEnabled #-}
{-# DEPRECATED enabled "Use generic-lens or generic-optics with 'enabled' instead"  #-}

-- | A list of event categories for a particular source type (@SourceType@ ) that you want to subscribe to. You can see a list of the categories for a given source type in <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html Events> in the /Amazon RDS User Guide/ or by using the @DescribeEventCategories@ operation. 
--
-- /Note:/ Consider using 'eventCategories' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesEventCategories :: Lens.Lens' CreateEventSubscription (Core.Maybe [Core.Text])
cesEventCategories = Lens.field @"eventCategories"
{-# INLINEABLE cesEventCategories #-}
{-# DEPRECATED eventCategories "Use generic-lens or generic-optics with 'eventCategories' instead"  #-}

-- | The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.
--
-- Constraints:
--
--     * If a @SourceIds@ value is supplied, @SourceType@ must also be provided.
--
--
--     * If the source type is a DB instance, a @DBInstanceIdentifier@ value must be supplied.
--
--
--     * If the source type is a DB cluster, a @DBClusterIdentifier@ value must be supplied.
--
--
--     * If the source type is a DB parameter group, a @DBParameterGroupName@ value must be supplied.
--
--
--     * If the source type is a DB security group, a @DBSecurityGroupName@ value must be supplied.
--
--
--     * If the source type is a DB snapshot, a @DBSnapshotIdentifier@ value must be supplied.
--
--
--     * If the source type is a DB cluster snapshot, a @DBClusterSnapshotIdentifier@ value must be supplied.
--
--
--
-- /Note:/ Consider using 'sourceIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSourceIds :: Lens.Lens' CreateEventSubscription (Core.Maybe [Core.Text])
cesSourceIds = Lens.field @"sourceIds"
{-# INLINEABLE cesSourceIds #-}
{-# DEPRECATED sourceIds "Use generic-lens or generic-optics with 'sourceIds' instead"  #-}

-- | The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to @db-instance@ . If this value isn't specified, all events are returned.
--
-- Valid values: @db-instance@ | @db-cluster@ | @db-parameter-group@ | @db-security-group@ | @db-snapshot@ | @db-cluster-snapshot@ 
--
-- /Note:/ Consider using 'sourceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSourceType :: Lens.Lens' CreateEventSubscription (Core.Maybe Core.Text)
cesSourceType = Lens.field @"sourceType"
{-# INLINEABLE cesSourceType #-}
{-# DEPRECATED sourceType "Use generic-lens or generic-optics with 'sourceType' instead"  #-}

-- | Undocumented field.
--
-- /Note:/ Consider using 'tags' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesTags :: Lens.Lens' CreateEventSubscription (Core.Maybe [Types.Tag])
cesTags = Lens.field @"tags"
{-# INLINEABLE cesTags #-}
{-# DEPRECATED tags "Use generic-lens or generic-optics with 'tags' instead"  #-}

instance Core.ToQuery CreateEventSubscription where
        toQuery CreateEventSubscription{..}
          = Core.toQueryPair "Action"
              ("CreateEventSubscription" :: Core.Text)
              Core.<> Core.toQueryPair "Version" ("2014-10-31" :: Core.Text)
              Core.<> Core.toQueryPair "SubscriptionName" subscriptionName
              Core.<> Core.toQueryPair "SnsTopicArn" snsTopicArn
              Core.<> Core.maybe Core.mempty (Core.toQueryPair "Enabled") enabled
              Core.<>
              Core.toQueryPair "EventCategories"
                (Core.maybe Core.mempty (Core.toQueryList "EventCategory")
                   eventCategories)
              Core.<>
              Core.toQueryPair "SourceIds"
                (Core.maybe Core.mempty (Core.toQueryList "SourceId") sourceIds)
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "SourceType") sourceType
              Core.<>
              Core.toQueryPair "Tags"
                (Core.maybe Core.mempty (Core.toQueryList "Tag") tags)

instance Core.ToHeaders CreateEventSubscription where
        toHeaders _ = Core.pure Core.mempty

instance Core.AWSRequest CreateEventSubscription where
        type Rs CreateEventSubscription = CreateEventSubscriptionResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.mempty,
                         Core._rqHeaders =
                           Core.pure
                             ("Content-Type",
                              "application/x-www-form-urlencoded; charset=utf-8")
                             Core.<> Core.toHeaders x,
                         Core._rqBody = Core.toFormBody (Core.toQuery x)}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveXMLWrapper "CreateEventSubscriptionResult"
              (\ s h x ->
                 CreateEventSubscriptionResponse' Core.<$>
                   (x Core..@? "EventSubscription") Core.<*>
                     Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkCreateEventSubscriptionResponse' smart constructor.
data CreateEventSubscriptionResponse = CreateEventSubscriptionResponse'
  { eventSubscription :: Core.Maybe Types.EventSubscription
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateEventSubscriptionResponse' value with any optional fields omitted.
mkCreateEventSubscriptionResponse
    :: Core.Int -- ^ 'responseStatus'
    -> CreateEventSubscriptionResponse
mkCreateEventSubscriptionResponse responseStatus
  = CreateEventSubscriptionResponse'{eventSubscription =
                                       Core.Nothing,
                                     responseStatus}

-- | Undocumented field.
--
-- /Note:/ Consider using 'eventSubscription' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesrrsEventSubscription :: Lens.Lens' CreateEventSubscriptionResponse (Core.Maybe Types.EventSubscription)
cesrrsEventSubscription = Lens.field @"eventSubscription"
{-# INLINEABLE cesrrsEventSubscription #-}
{-# DEPRECATED eventSubscription "Use generic-lens or generic-optics with 'eventSubscription' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesrrsResponseStatus :: Lens.Lens' CreateEventSubscriptionResponse Core.Int
cesrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE cesrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
