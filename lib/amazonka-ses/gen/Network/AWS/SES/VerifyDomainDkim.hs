{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SES.VerifyDomainDkim
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns a set of DKIM tokens for a domain identity.
--
-- /Important:/ When you execute the @VerifyDomainDkim@ operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the @VerifyDomainIdentity@ operation. However, you can't send email from the domain until you either successfully <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html verify it> or you successfully <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html set up DKIM for it> .
-- You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.
-- To create the CNAME records for DKIM authentication, use the following values:
--
--     * __Name__ : /token/ ._domainkey./example.com/
--
--
--     * __Type__ : CNAME
--
--
--     * __Value__ : /token/ .dkim.amazonses.com
--
--
-- In the preceding example, replace /token/ with one of the tokens that are generated when you execute this operation. Replace /example.com/ with your domain. Repeat this process for each token that's generated by this operation.
-- You can execute this operation no more than once per second.
module Network.AWS.SES.VerifyDomainDkim
  ( -- * Creating a request
    VerifyDomainDkim (..),
    mkVerifyDomainDkim,

    -- ** Request lenses
    vddDomain,

    -- * Destructuring the response
    VerifyDomainDkimResponse (..),
    mkVerifyDomainDkimResponse,

    -- ** Response lenses
    vddrsResponseStatus,
    vddrsDkimTokens,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.SES.Types

-- | Represents a request to generate the CNAME records needed to set up Easy DKIM with Amazon SES. For more information about setting up Easy DKIM, see the <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html Amazon SES Developer Guide> .
--
-- /See:/ 'mkVerifyDomainDkim' smart constructor.
newtype VerifyDomainDkim = VerifyDomainDkim' {domain :: Lude.Text}
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving newtype (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'VerifyDomainDkim' with the minimum fields required to make a request.
--
-- * 'domain' - The name of the domain to be verified for Easy DKIM signing.
mkVerifyDomainDkim ::
  -- | 'domain'
  Lude.Text ->
  VerifyDomainDkim
mkVerifyDomainDkim pDomain_ = VerifyDomainDkim' {domain = pDomain_}

-- | The name of the domain to be verified for Easy DKIM signing.
--
-- /Note:/ Consider using 'domain' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
vddDomain :: Lens.Lens' VerifyDomainDkim Lude.Text
vddDomain = Lens.lens (domain :: VerifyDomainDkim -> Lude.Text) (\s a -> s {domain = a} :: VerifyDomainDkim)
{-# DEPRECATED vddDomain "Use generic-lens or generic-optics with 'domain' instead." #-}

instance Lude.AWSRequest VerifyDomainDkim where
  type Rs VerifyDomainDkim = VerifyDomainDkimResponse
  request = Req.postQuery sesService
  response =
    Res.receiveXMLWrapper
      "VerifyDomainDkimResult"
      ( \s h x ->
          VerifyDomainDkimResponse'
            Lude.<$> (Lude.pure (Lude.fromEnum s))
            Lude.<*> ( x Lude..@? "DkimTokens" Lude..!@ Lude.mempty
                         Lude.>>= Lude.parseXMLList "member"
                     )
      )

instance Lude.ToHeaders VerifyDomainDkim where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath VerifyDomainDkim where
  toPath = Lude.const "/"

instance Lude.ToQuery VerifyDomainDkim where
  toQuery VerifyDomainDkim' {..} =
    Lude.mconcat
      [ "Action" Lude.=: ("VerifyDomainDkim" :: Lude.ByteString),
        "Version" Lude.=: ("2010-12-01" :: Lude.ByteString),
        "Domain" Lude.=: domain
      ]

-- | Returns CNAME records that you must publish to the DNS server of your domain to set up Easy DKIM with Amazon SES.
--
-- /See:/ 'mkVerifyDomainDkimResponse' smart constructor.
data VerifyDomainDkimResponse = VerifyDomainDkimResponse'
  { responseStatus ::
      Lude.Int,
    dkimTokens :: [Lude.Text]
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'VerifyDomainDkimResponse' with the minimum fields required to make a request.
--
-- * 'dkimTokens' - A set of character strings that represent the domain's identity. If the identity is an email address, the tokens represent the domain of that address.
--
-- Using these tokens, you need to create DNS CNAME records that point to DKIM public keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection process might take up to 72 hours. After successful detection, Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.)
-- For more information about creating DNS records using DKIM tokens, see the <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html Amazon SES Developer Guide> .
-- * 'responseStatus' - The response status code.
mkVerifyDomainDkimResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  VerifyDomainDkimResponse
mkVerifyDomainDkimResponse pResponseStatus_ =
  VerifyDomainDkimResponse'
    { responseStatus = pResponseStatus_,
      dkimTokens = Lude.mempty
    }

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
vddrsResponseStatus :: Lens.Lens' VerifyDomainDkimResponse Lude.Int
vddrsResponseStatus = Lens.lens (responseStatus :: VerifyDomainDkimResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: VerifyDomainDkimResponse)
{-# DEPRECATED vddrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}

-- | A set of character strings that represent the domain's identity. If the identity is an email address, the tokens represent the domain of that address.
--
-- Using these tokens, you need to create DNS CNAME records that point to DKIM public keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection process might take up to 72 hours. After successful detection, Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.)
-- For more information about creating DNS records using DKIM tokens, see the <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html Amazon SES Developer Guide> .
--
-- /Note:/ Consider using 'dkimTokens' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
vddrsDkimTokens :: Lens.Lens' VerifyDomainDkimResponse [Lude.Text]
vddrsDkimTokens = Lens.lens (dkimTokens :: VerifyDomainDkimResponse -> [Lude.Text]) (\s a -> s {dkimTokens = a} :: VerifyDomainDkimResponse)
{-# DEPRECATED vddrsDkimTokens "Use generic-lens or generic-optics with 'dkimTokens' instead." #-}
