{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SES.VerifyDomainDkim
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns a set of DKIM tokens for a domain identity.
--
-- /Important:/ When you execute the @VerifyDomainDkim@ operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the @VerifyDomainIdentity@ operation. However, you can't send email from the domain until you either successfully <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html verify it> or you successfully <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html set up DKIM for it> .
-- You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.
-- To create the CNAME records for DKIM authentication, use the following values:
--
--     * __Name__ : /token/ ._domainkey./example.com/
--
--
--     * __Type__ : CNAME
--
--
--     * __Value__ : /token/ .dkim.amazonses.com
--
--
-- In the preceding example, replace /token/ with one of the tokens that are generated when you execute this operation. Replace /example.com/ with your domain. Repeat this process for each token that's generated by this operation.
-- You can execute this operation no more than once per second.
module Network.AWS.SES.VerifyDomainDkim
  ( -- * Creating a request
    VerifyDomainDkim (..),
    mkVerifyDomainDkim,

    -- ** Request lenses
    vddDomain,

    -- * Destructuring the response
    VerifyDomainDkimResponse (..),
    mkVerifyDomainDkimResponse,

    -- ** Response lenses
    vddrrsDkimTokens,
    vddrrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response
import qualified Network.AWS.SES.Types as Types

-- | Represents a request to generate the CNAME records needed to set up Easy DKIM with Amazon SES. For more information about setting up Easy DKIM, see the <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html Amazon SES Developer Guide> .
--
-- /See:/ 'mkVerifyDomainDkim' smart constructor.
newtype VerifyDomainDkim = VerifyDomainDkim'
  { -- | The name of the domain to be verified for Easy DKIM signing.
    domain :: Types.Domain
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving newtype (Core.Hashable, Core.NFData)

-- | Creates a 'VerifyDomainDkim' value with any optional fields omitted.
mkVerifyDomainDkim ::
  -- | 'domain'
  Types.Domain ->
  VerifyDomainDkim
mkVerifyDomainDkim domain = VerifyDomainDkim' {domain}

-- | The name of the domain to be verified for Easy DKIM signing.
--
-- /Note:/ Consider using 'domain' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
vddDomain :: Lens.Lens' VerifyDomainDkim Types.Domain
vddDomain = Lens.field @"domain"
{-# DEPRECATED vddDomain "Use generic-lens or generic-optics with 'domain' instead." #-}

instance Core.AWSRequest VerifyDomainDkim where
  type Rs VerifyDomainDkim = VerifyDomainDkimResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "Content-Type",
              "application/x-www-form-urlencoded; charset=utf-8"
            ),
        Core._rqBody =
          Core.toFormBody
            ( Core.pure ("Action", "VerifyDomainDkim")
                Core.<> (Core.pure ("Version", "2010-12-01"))
                Core.<> (Core.toQueryValue "Domain" domain)
            )
      }
  response =
    Response.receiveXMLWrapper
      "VerifyDomainDkimResult"
      ( \s h x ->
          VerifyDomainDkimResponse'
            Core.<$> ( x Core..@? "DkimTokens" Core..@! Core.mempty
                         Core..<@> Core.parseXMLList "member"
                     )
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | Returns CNAME records that you must publish to the DNS server of your domain to set up Easy DKIM with Amazon SES.
--
-- /See:/ 'mkVerifyDomainDkimResponse' smart constructor.
data VerifyDomainDkimResponse = VerifyDomainDkimResponse'
  { -- | A set of character strings that represent the domain's identity. If the identity is an email address, the tokens represent the domain of that address.
    --
    -- Using these tokens, you need to create DNS CNAME records that point to DKIM public keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection process might take up to 72 hours. After successful detection, Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.)
    -- For more information about creating DNS records using DKIM tokens, see the <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html Amazon SES Developer Guide> .
    dkimTokens :: [Types.VerificationToken],
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'VerifyDomainDkimResponse' value with any optional fields omitted.
mkVerifyDomainDkimResponse ::
  -- | 'responseStatus'
  Core.Int ->
  VerifyDomainDkimResponse
mkVerifyDomainDkimResponse responseStatus =
  VerifyDomainDkimResponse'
    { dkimTokens = Core.mempty,
      responseStatus
    }

-- | A set of character strings that represent the domain's identity. If the identity is an email address, the tokens represent the domain of that address.
--
-- Using these tokens, you need to create DNS CNAME records that point to DKIM public keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection process might take up to 72 hours. After successful detection, Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.)
-- For more information about creating DNS records using DKIM tokens, see the <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html Amazon SES Developer Guide> .
--
-- /Note:/ Consider using 'dkimTokens' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
vddrrsDkimTokens :: Lens.Lens' VerifyDomainDkimResponse [Types.VerificationToken]
vddrrsDkimTokens = Lens.field @"dkimTokens"
{-# DEPRECATED vddrrsDkimTokens "Use generic-lens or generic-optics with 'dkimTokens' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
vddrrsResponseStatus :: Lens.Lens' VerifyDomainDkimResponse Core.Int
vddrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED vddrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
