{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SES.Types.TrackingOptions
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SES.Types.TrackingOptions
  ( TrackingOptions (..),

    -- * Smart constructor
    mkTrackingOptions,

    -- * Lenses
    toCustomRedirectDomain,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.
--
-- For more information, see <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html Configuring Custom Domains to Handle Open and Click Tracking> in the /Amazon SES Developer Guide/ .
--
-- /See:/ 'mkTrackingOptions' smart constructor.
newtype TrackingOptions = TrackingOptions'
  { -- | The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
    customRedirectDomain :: Lude.Maybe Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving newtype (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'TrackingOptions' with the minimum fields required to make a request.
--
-- * 'customRedirectDomain' - The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
mkTrackingOptions ::
  TrackingOptions
mkTrackingOptions =
  TrackingOptions' {customRedirectDomain = Lude.Nothing}

-- | The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
--
-- /Note:/ Consider using 'customRedirectDomain' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
toCustomRedirectDomain :: Lens.Lens' TrackingOptions (Lude.Maybe Lude.Text)
toCustomRedirectDomain = Lens.lens (customRedirectDomain :: TrackingOptions -> Lude.Maybe Lude.Text) (\s a -> s {customRedirectDomain = a} :: TrackingOptions)
{-# DEPRECATED toCustomRedirectDomain "Use generic-lens or generic-optics with 'customRedirectDomain' instead." #-}

instance Lude.FromXML TrackingOptions where
  parseXML x =
    TrackingOptions' Lude.<$> (x Lude..@? "CustomRedirectDomain")

instance Lude.ToQuery TrackingOptions where
  toQuery TrackingOptions' {..} =
    Lude.mconcat
      ["CustomRedirectDomain" Lude.=: customRedirectDomain]
