{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.MechanicalTurk.CreateHITWithHITType
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- The @CreateHITWithHITType@ operation creates a new Human Intelligence Task (HIT) using an existing HITTypeID generated by the @CreateHITType@ operation.
--
-- This is an alternative way to create HITs from the @CreateHIT@ operation. This is the recommended best practice for Requesters who are creating large numbers of HITs.
-- CreateHITWithHITType also supports several ways to provide question data: by providing a value for the @Question@ parameter that fully specifies the contents of the HIT, or by providing a @HitLayoutId@ and associated @HitLayoutParameters@ .
module Network.AWS.MechanicalTurk.CreateHITWithHITType
  ( -- * Creating a request
    CreateHITWithHITType (..),
    mkCreateHITWithHITType,

    -- ** Request lenses
    chitwhittHITTypeId,
    chitwhittLifetimeInSeconds,
    chitwhittAssignmentReviewPolicy,
    chitwhittHITLayoutId,
    chitwhittHITLayoutParameters,
    chitwhittHITReviewPolicy,
    chitwhittMaxAssignments,
    chitwhittQuestion,
    chitwhittRequesterAnnotation,
    chitwhittUniqueRequestToken,

    -- * Destructuring the response
    CreateHITWithHITTypeResponse (..),
    mkCreateHITWithHITTypeResponse,

    -- ** Response lenses
    chitwhittrrsHIT,
    chitwhittrrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.MechanicalTurk.Types as Types
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkCreateHITWithHITType' smart constructor.
data CreateHITWithHITType = CreateHITWithHITType'
  { -- | The HIT type ID you want to create this HIT with.
    hITTypeId :: Types.HITTypeId,
    -- | An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted.
    lifetimeInSeconds :: Core.Integer,
    -- | The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    assignmentReviewPolicy :: Core.Maybe Types.ReviewPolicy,
    -- | The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters.
    --
    -- Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
    hITLayoutId :: Core.Maybe Types.HITLayoutId,
    -- | If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout.
    hITLayoutParameters :: Core.Maybe [Types.HITLayoutParameter],
    -- | The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    hITReviewPolicy :: Core.Maybe Types.ReviewPolicy,
    -- | The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
    maxAssignments :: Core.Maybe Core.Int,
    -- | The data the person completing the HIT uses to produce the results.
    --
    -- Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace.
    -- Either a Question parameter or a HITLayoutId parameter must be provided.
    question :: Core.Maybe Types.Question,
    -- | An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT.
    --
    -- The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester.
    -- The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped.
    requesterAnnotation :: Core.Maybe Types.RequesterAnnotation,
    -- | A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId.
    uniqueRequestToken :: Core.Maybe Types.IdempotencyToken
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateHITWithHITType' value with any optional fields omitted.
mkCreateHITWithHITType ::
  -- | 'hITTypeId'
  Types.HITTypeId ->
  -- | 'lifetimeInSeconds'
  Core.Integer ->
  CreateHITWithHITType
mkCreateHITWithHITType hITTypeId lifetimeInSeconds =
  CreateHITWithHITType'
    { hITTypeId,
      lifetimeInSeconds,
      assignmentReviewPolicy = Core.Nothing,
      hITLayoutId = Core.Nothing,
      hITLayoutParameters = Core.Nothing,
      hITReviewPolicy = Core.Nothing,
      maxAssignments = Core.Nothing,
      question = Core.Nothing,
      requesterAnnotation = Core.Nothing,
      uniqueRequestToken = Core.Nothing
    }

-- | The HIT type ID you want to create this HIT with.
--
-- /Note:/ Consider using 'hITTypeId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittHITTypeId :: Lens.Lens' CreateHITWithHITType Types.HITTypeId
chitwhittHITTypeId = Lens.field @"hITTypeId"
{-# DEPRECATED chitwhittHITTypeId "Use generic-lens or generic-optics with 'hITTypeId' instead." #-}

-- | An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted.
--
-- /Note:/ Consider using 'lifetimeInSeconds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittLifetimeInSeconds :: Lens.Lens' CreateHITWithHITType Core.Integer
chitwhittLifetimeInSeconds = Lens.field @"lifetimeInSeconds"
{-# DEPRECATED chitwhittLifetimeInSeconds "Use generic-lens or generic-optics with 'lifetimeInSeconds' instead." #-}

-- | The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
--
-- /Note:/ Consider using 'assignmentReviewPolicy' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittAssignmentReviewPolicy :: Lens.Lens' CreateHITWithHITType (Core.Maybe Types.ReviewPolicy)
chitwhittAssignmentReviewPolicy = Lens.field @"assignmentReviewPolicy"
{-# DEPRECATED chitwhittAssignmentReviewPolicy "Use generic-lens or generic-optics with 'assignmentReviewPolicy' instead." #-}

-- | The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters.
--
-- Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
--
-- /Note:/ Consider using 'hITLayoutId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittHITLayoutId :: Lens.Lens' CreateHITWithHITType (Core.Maybe Types.HITLayoutId)
chitwhittHITLayoutId = Lens.field @"hITLayoutId"
{-# DEPRECATED chitwhittHITLayoutId "Use generic-lens or generic-optics with 'hITLayoutId' instead." #-}

-- | If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout.
--
-- /Note:/ Consider using 'hITLayoutParameters' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittHITLayoutParameters :: Lens.Lens' CreateHITWithHITType (Core.Maybe [Types.HITLayoutParameter])
chitwhittHITLayoutParameters = Lens.field @"hITLayoutParameters"
{-# DEPRECATED chitwhittHITLayoutParameters "Use generic-lens or generic-optics with 'hITLayoutParameters' instead." #-}

-- | The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
--
-- /Note:/ Consider using 'hITReviewPolicy' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittHITReviewPolicy :: Lens.Lens' CreateHITWithHITType (Core.Maybe Types.ReviewPolicy)
chitwhittHITReviewPolicy = Lens.field @"hITReviewPolicy"
{-# DEPRECATED chitwhittHITReviewPolicy "Use generic-lens or generic-optics with 'hITReviewPolicy' instead." #-}

-- | The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
--
-- /Note:/ Consider using 'maxAssignments' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittMaxAssignments :: Lens.Lens' CreateHITWithHITType (Core.Maybe Core.Int)
chitwhittMaxAssignments = Lens.field @"maxAssignments"
{-# DEPRECATED chitwhittMaxAssignments "Use generic-lens or generic-optics with 'maxAssignments' instead." #-}

-- | The data the person completing the HIT uses to produce the results.
--
-- Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace.
-- Either a Question parameter or a HITLayoutId parameter must be provided.
--
-- /Note:/ Consider using 'question' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittQuestion :: Lens.Lens' CreateHITWithHITType (Core.Maybe Types.Question)
chitwhittQuestion = Lens.field @"question"
{-# DEPRECATED chitwhittQuestion "Use generic-lens or generic-optics with 'question' instead." #-}

-- | An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT.
--
-- The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester.
-- The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped.
--
-- /Note:/ Consider using 'requesterAnnotation' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittRequesterAnnotation :: Lens.Lens' CreateHITWithHITType (Core.Maybe Types.RequesterAnnotation)
chitwhittRequesterAnnotation = Lens.field @"requesterAnnotation"
{-# DEPRECATED chitwhittRequesterAnnotation "Use generic-lens or generic-optics with 'requesterAnnotation' instead." #-}

-- | A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId.
--
-- /Note:/ Consider using 'uniqueRequestToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittUniqueRequestToken :: Lens.Lens' CreateHITWithHITType (Core.Maybe Types.IdempotencyToken)
chitwhittUniqueRequestToken = Lens.field @"uniqueRequestToken"
{-# DEPRECATED chitwhittUniqueRequestToken "Use generic-lens or generic-optics with 'uniqueRequestToken' instead." #-}

instance Core.FromJSON CreateHITWithHITType where
  toJSON CreateHITWithHITType {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("HITTypeId" Core..= hITTypeId),
            Core.Just ("LifetimeInSeconds" Core..= lifetimeInSeconds),
            ("AssignmentReviewPolicy" Core..=) Core.<$> assignmentReviewPolicy,
            ("HITLayoutId" Core..=) Core.<$> hITLayoutId,
            ("HITLayoutParameters" Core..=) Core.<$> hITLayoutParameters,
            ("HITReviewPolicy" Core..=) Core.<$> hITReviewPolicy,
            ("MaxAssignments" Core..=) Core.<$> maxAssignments,
            ("Question" Core..=) Core.<$> question,
            ("RequesterAnnotation" Core..=) Core.<$> requesterAnnotation,
            ("UniqueRequestToken" Core..=) Core.<$> uniqueRequestToken
          ]
      )

instance Core.AWSRequest CreateHITWithHITType where
  type Rs CreateHITWithHITType = CreateHITWithHITTypeResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "X-Amz-Target",
              "MTurkRequesterServiceV20170117.CreateHITWithHITType"
            )
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          CreateHITWithHITTypeResponse'
            Core.<$> (x Core..:? "HIT") Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkCreateHITWithHITTypeResponse' smart constructor.
data CreateHITWithHITTypeResponse = CreateHITWithHITTypeResponse'
  { -- | Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation.
    hit :: Core.Maybe Types.HIT,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'CreateHITWithHITTypeResponse' value with any optional fields omitted.
mkCreateHITWithHITTypeResponse ::
  -- | 'responseStatus'
  Core.Int ->
  CreateHITWithHITTypeResponse
mkCreateHITWithHITTypeResponse responseStatus =
  CreateHITWithHITTypeResponse' {hit = Core.Nothing, responseStatus}

-- | Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation.
--
-- /Note:/ Consider using 'hit' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittrrsHIT :: Lens.Lens' CreateHITWithHITTypeResponse (Core.Maybe Types.HIT)
chitwhittrrsHIT = Lens.field @"hit"
{-# DEPRECATED chitwhittrrsHIT "Use generic-lens or generic-optics with 'hit' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
chitwhittrrsResponseStatus :: Lens.Lens' CreateHITWithHITTypeResponse Core.Int
chitwhittrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED chitwhittrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
