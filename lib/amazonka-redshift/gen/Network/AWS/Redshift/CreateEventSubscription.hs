{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Redshift.CreateEventSubscription
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.
--
-- You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.
-- If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your AWS account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your AWS account. You must specify a source type if you specify a source ID.
module Network.AWS.Redshift.CreateEventSubscription
  ( -- * Creating a request
    CreateEventSubscription (..),
    mkCreateEventSubscription,

    -- ** Request lenses
    cesSubscriptionName,
    cesSnsTopicArn,
    cesEnabled,
    cesEventCategories,
    cesSeverity,
    cesSourceIds,
    cesSourceType,
    cesTags,

    -- * Destructuring the response
    CreateEventSubscriptionResponse (..),
    mkCreateEventSubscriptionResponse,

    -- ** Response lenses
    cesrrsEventSubscription,
    cesrrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Redshift.Types as Types
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- |
--
-- /See:/ 'mkCreateEventSubscription' smart constructor.
data CreateEventSubscription = CreateEventSubscription'
  { -- | The name of the event subscription to be created.
    --
    -- Constraints:
    --
    --     * Cannot be null, empty, or blank.
    --
    --
    --     * Must contain from 1 to 255 alphanumeric characters or hyphens.
    --
    --
    --     * First character must be a letter.
    --
    --
    --     * Cannot end with a hyphen or contain two consecutive hyphens.
    subscriptionName :: Types.String,
    -- | The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    snsTopicArn :: Types.String,
    -- | A boolean value; set to @true@ to activate the subscription, and set to @false@ to create the subscription but not activate it.
    enabled :: Core.Maybe Core.Bool,
    -- | Specifies the Amazon Redshift event categories to be published by the event notification subscription.
    --
    -- Values: configuration, management, monitoring, security
    eventCategories :: Core.Maybe [Types.String],
    -- | Specifies the Amazon Redshift event severity to be published by the event notification subscription.
    --
    -- Values: ERROR, INFO
    severity :: Core.Maybe Types.String,
    -- | A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.
    --
    -- Example: my-cluster-1, my-cluster-2
    -- Example: my-snapshot-20131010
    sourceIds :: Core.Maybe [Types.String],
    -- | The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.
    --
    -- Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    sourceType :: Core.Maybe Types.String,
    -- | A list of tag instances.
    tags :: Core.Maybe [Types.Tag]
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateEventSubscription' value with any optional fields omitted.
mkCreateEventSubscription ::
  -- | 'subscriptionName'
  Types.String ->
  -- | 'snsTopicArn'
  Types.String ->
  CreateEventSubscription
mkCreateEventSubscription subscriptionName snsTopicArn =
  CreateEventSubscription'
    { subscriptionName,
      snsTopicArn,
      enabled = Core.Nothing,
      eventCategories = Core.Nothing,
      severity = Core.Nothing,
      sourceIds = Core.Nothing,
      sourceType = Core.Nothing,
      tags = Core.Nothing
    }

-- | The name of the event subscription to be created.
--
-- Constraints:
--
--     * Cannot be null, empty, or blank.
--
--
--     * Must contain from 1 to 255 alphanumeric characters or hyphens.
--
--
--     * First character must be a letter.
--
--
--     * Cannot end with a hyphen or contain two consecutive hyphens.
--
--
--
-- /Note:/ Consider using 'subscriptionName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSubscriptionName :: Lens.Lens' CreateEventSubscription Types.String
cesSubscriptionName = Lens.field @"subscriptionName"
{-# DEPRECATED cesSubscriptionName "Use generic-lens or generic-optics with 'subscriptionName' instead." #-}

-- | The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
--
-- /Note:/ Consider using 'snsTopicArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSnsTopicArn :: Lens.Lens' CreateEventSubscription Types.String
cesSnsTopicArn = Lens.field @"snsTopicArn"
{-# DEPRECATED cesSnsTopicArn "Use generic-lens or generic-optics with 'snsTopicArn' instead." #-}

-- | A boolean value; set to @true@ to activate the subscription, and set to @false@ to create the subscription but not activate it.
--
-- /Note:/ Consider using 'enabled' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesEnabled :: Lens.Lens' CreateEventSubscription (Core.Maybe Core.Bool)
cesEnabled = Lens.field @"enabled"
{-# DEPRECATED cesEnabled "Use generic-lens or generic-optics with 'enabled' instead." #-}

-- | Specifies the Amazon Redshift event categories to be published by the event notification subscription.
--
-- Values: configuration, management, monitoring, security
--
-- /Note:/ Consider using 'eventCategories' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesEventCategories :: Lens.Lens' CreateEventSubscription (Core.Maybe [Types.String])
cesEventCategories = Lens.field @"eventCategories"
{-# DEPRECATED cesEventCategories "Use generic-lens or generic-optics with 'eventCategories' instead." #-}

-- | Specifies the Amazon Redshift event severity to be published by the event notification subscription.
--
-- Values: ERROR, INFO
--
-- /Note:/ Consider using 'severity' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSeverity :: Lens.Lens' CreateEventSubscription (Core.Maybe Types.String)
cesSeverity = Lens.field @"severity"
{-# DEPRECATED cesSeverity "Use generic-lens or generic-optics with 'severity' instead." #-}

-- | A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.
--
-- Example: my-cluster-1, my-cluster-2
-- Example: my-snapshot-20131010
--
-- /Note:/ Consider using 'sourceIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSourceIds :: Lens.Lens' CreateEventSubscription (Core.Maybe [Types.String])
cesSourceIds = Lens.field @"sourceIds"
{-# DEPRECATED cesSourceIds "Use generic-lens or generic-optics with 'sourceIds' instead." #-}

-- | The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.
--
-- Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
--
-- /Note:/ Consider using 'sourceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSourceType :: Lens.Lens' CreateEventSubscription (Core.Maybe Types.String)
cesSourceType = Lens.field @"sourceType"
{-# DEPRECATED cesSourceType "Use generic-lens or generic-optics with 'sourceType' instead." #-}

-- | A list of tag instances.
--
-- /Note:/ Consider using 'tags' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesTags :: Lens.Lens' CreateEventSubscription (Core.Maybe [Types.Tag])
cesTags = Lens.field @"tags"
{-# DEPRECATED cesTags "Use generic-lens or generic-optics with 'tags' instead." #-}

instance Core.AWSRequest CreateEventSubscription where
  type Rs CreateEventSubscription = CreateEventSubscriptionResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "Content-Type",
              "application/x-www-form-urlencoded; charset=utf-8"
            ),
        Core._rqBody =
          Core.toFormBody
            ( Core.pure ("Action", "CreateEventSubscription")
                Core.<> (Core.pure ("Version", "2012-12-01"))
                Core.<> (Core.toQueryValue "SubscriptionName" subscriptionName)
                Core.<> (Core.toQueryValue "SnsTopicArn" snsTopicArn)
                Core.<> (Core.toQueryValue "Enabled" Core.<$> enabled)
                Core.<> ( Core.toQueryValue
                            "EventCategories"
                            (Core.toQueryList "EventCategory" Core.<$> eventCategories)
                        )
                Core.<> (Core.toQueryValue "Severity" Core.<$> severity)
                Core.<> ( Core.toQueryValue
                            "SourceIds"
                            (Core.toQueryList "SourceId" Core.<$> sourceIds)
                        )
                Core.<> (Core.toQueryValue "SourceType" Core.<$> sourceType)
                Core.<> (Core.toQueryValue "Tags" (Core.toQueryList "Tag" Core.<$> tags))
            )
      }
  response =
    Response.receiveXMLWrapper
      "CreateEventSubscriptionResult"
      ( \s h x ->
          CreateEventSubscriptionResponse'
            Core.<$> (x Core..@? "EventSubscription")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkCreateEventSubscriptionResponse' smart constructor.
data CreateEventSubscriptionResponse = CreateEventSubscriptionResponse'
  { eventSubscription :: Core.Maybe Types.EventSubscription,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'CreateEventSubscriptionResponse' value with any optional fields omitted.
mkCreateEventSubscriptionResponse ::
  -- | 'responseStatus'
  Core.Int ->
  CreateEventSubscriptionResponse
mkCreateEventSubscriptionResponse responseStatus =
  CreateEventSubscriptionResponse'
    { eventSubscription =
        Core.Nothing,
      responseStatus
    }

-- | Undocumented field.
--
-- /Note:/ Consider using 'eventSubscription' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesrrsEventSubscription :: Lens.Lens' CreateEventSubscriptionResponse (Core.Maybe Types.EventSubscription)
cesrrsEventSubscription = Lens.field @"eventSubscription"
{-# DEPRECATED cesrrsEventSubscription "Use generic-lens or generic-optics with 'eventSubscription' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesrrsResponseStatus :: Lens.Lens' CreateEventSubscriptionResponse Core.Int
cesrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED cesrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
