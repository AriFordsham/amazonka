{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Redshift.ModifyEventSubscription
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Modifies an existing Amazon Redshift event notification subscription.
module Network.AWS.Redshift.ModifyEventSubscription
  ( -- * Creating a request
    ModifyEventSubscription (..),
    mkModifyEventSubscription,

    -- ** Request lenses
    mesSubscriptionName,
    mesEnabled,
    mesEventCategories,
    mesSeverity,
    mesSnsTopicArn,
    mesSourceIds,
    mesSourceType,

    -- * Destructuring the response
    ModifyEventSubscriptionResponse (..),
    mkModifyEventSubscriptionResponse,

    -- ** Response lenses
    mesrrsEventSubscription,
    mesrrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Redshift.Types as Types
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- |
--
-- /See:/ 'mkModifyEventSubscription' smart constructor.
data ModifyEventSubscription = ModifyEventSubscription'
  { -- | The name of the modified Amazon Redshift event notification subscription.
    subscriptionName :: Types.SubscriptionName,
    -- | A Boolean value indicating if the subscription is enabled. @true@ indicates the subscription is enabled
    enabled :: Core.Maybe Core.Bool,
    -- | Specifies the Amazon Redshift event categories to be published by the event notification subscription.
    --
    -- Values: configuration, management, monitoring, security
    eventCategories :: Core.Maybe [Types.String],
    -- | Specifies the Amazon Redshift event severity to be published by the event notification subscription.
    --
    -- Values: ERROR, INFO
    severity :: Core.Maybe Types.Severity,
    -- | The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
    snsTopicArn :: Core.Maybe Types.SnsTopicArn,
    -- | A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.
    --
    -- Example: my-cluster-1, my-cluster-2
    -- Example: my-snapshot-20131010
    sourceIds :: Core.Maybe [Types.String],
    -- | The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.
    --
    -- Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    sourceType :: Core.Maybe Types.String
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ModifyEventSubscription' value with any optional fields omitted.
mkModifyEventSubscription ::
  -- | 'subscriptionName'
  Types.SubscriptionName ->
  ModifyEventSubscription
mkModifyEventSubscription subscriptionName =
  ModifyEventSubscription'
    { subscriptionName,
      enabled = Core.Nothing,
      eventCategories = Core.Nothing,
      severity = Core.Nothing,
      snsTopicArn = Core.Nothing,
      sourceIds = Core.Nothing,
      sourceType = Core.Nothing
    }

-- | The name of the modified Amazon Redshift event notification subscription.
--
-- /Note:/ Consider using 'subscriptionName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSubscriptionName :: Lens.Lens' ModifyEventSubscription Types.SubscriptionName
mesSubscriptionName = Lens.field @"subscriptionName"
{-# DEPRECATED mesSubscriptionName "Use generic-lens or generic-optics with 'subscriptionName' instead." #-}

-- | A Boolean value indicating if the subscription is enabled. @true@ indicates the subscription is enabled
--
-- /Note:/ Consider using 'enabled' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesEnabled :: Lens.Lens' ModifyEventSubscription (Core.Maybe Core.Bool)
mesEnabled = Lens.field @"enabled"
{-# DEPRECATED mesEnabled "Use generic-lens or generic-optics with 'enabled' instead." #-}

-- | Specifies the Amazon Redshift event categories to be published by the event notification subscription.
--
-- Values: configuration, management, monitoring, security
--
-- /Note:/ Consider using 'eventCategories' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesEventCategories :: Lens.Lens' ModifyEventSubscription (Core.Maybe [Types.String])
mesEventCategories = Lens.field @"eventCategories"
{-# DEPRECATED mesEventCategories "Use generic-lens or generic-optics with 'eventCategories' instead." #-}

-- | Specifies the Amazon Redshift event severity to be published by the event notification subscription.
--
-- Values: ERROR, INFO
--
-- /Note:/ Consider using 'severity' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSeverity :: Lens.Lens' ModifyEventSubscription (Core.Maybe Types.Severity)
mesSeverity = Lens.field @"severity"
{-# DEPRECATED mesSeverity "Use generic-lens or generic-optics with 'severity' instead." #-}

-- | The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
--
-- /Note:/ Consider using 'snsTopicArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSnsTopicArn :: Lens.Lens' ModifyEventSubscription (Core.Maybe Types.SnsTopicArn)
mesSnsTopicArn = Lens.field @"snsTopicArn"
{-# DEPRECATED mesSnsTopicArn "Use generic-lens or generic-optics with 'snsTopicArn' instead." #-}

-- | A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.
--
-- Example: my-cluster-1, my-cluster-2
-- Example: my-snapshot-20131010
--
-- /Note:/ Consider using 'sourceIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSourceIds :: Lens.Lens' ModifyEventSubscription (Core.Maybe [Types.String])
mesSourceIds = Lens.field @"sourceIds"
{-# DEPRECATED mesSourceIds "Use generic-lens or generic-optics with 'sourceIds' instead." #-}

-- | The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.
--
-- Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
--
-- /Note:/ Consider using 'sourceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSourceType :: Lens.Lens' ModifyEventSubscription (Core.Maybe Types.String)
mesSourceType = Lens.field @"sourceType"
{-# DEPRECATED mesSourceType "Use generic-lens or generic-optics with 'sourceType' instead." #-}

instance Core.AWSRequest ModifyEventSubscription where
  type Rs ModifyEventSubscription = ModifyEventSubscriptionResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "Content-Type",
              "application/x-www-form-urlencoded; charset=utf-8"
            ),
        Core._rqBody =
          Core.toFormBody
            ( Core.pure ("Action", "ModifyEventSubscription")
                Core.<> (Core.pure ("Version", "2012-12-01"))
                Core.<> (Core.toQueryValue "SubscriptionName" subscriptionName)
                Core.<> (Core.toQueryValue "Enabled" Core.<$> enabled)
                Core.<> ( Core.toQueryValue
                            "EventCategories"
                            (Core.toQueryList "EventCategory" Core.<$> eventCategories)
                        )
                Core.<> (Core.toQueryValue "Severity" Core.<$> severity)
                Core.<> (Core.toQueryValue "SnsTopicArn" Core.<$> snsTopicArn)
                Core.<> ( Core.toQueryValue
                            "SourceIds"
                            (Core.toQueryList "SourceId" Core.<$> sourceIds)
                        )
                Core.<> (Core.toQueryValue "SourceType" Core.<$> sourceType)
            )
      }
  response =
    Response.receiveXMLWrapper
      "ModifyEventSubscriptionResult"
      ( \s h x ->
          ModifyEventSubscriptionResponse'
            Core.<$> (x Core..@? "EventSubscription")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkModifyEventSubscriptionResponse' smart constructor.
data ModifyEventSubscriptionResponse = ModifyEventSubscriptionResponse'
  { eventSubscription :: Core.Maybe Types.EventSubscription,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'ModifyEventSubscriptionResponse' value with any optional fields omitted.
mkModifyEventSubscriptionResponse ::
  -- | 'responseStatus'
  Core.Int ->
  ModifyEventSubscriptionResponse
mkModifyEventSubscriptionResponse responseStatus =
  ModifyEventSubscriptionResponse'
    { eventSubscription =
        Core.Nothing,
      responseStatus
    }

-- | Undocumented field.
--
-- /Note:/ Consider using 'eventSubscription' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesrrsEventSubscription :: Lens.Lens' ModifyEventSubscriptionResponse (Core.Maybe Types.EventSubscription)
mesrrsEventSubscription = Lens.field @"eventSubscription"
{-# DEPRECATED mesrrsEventSubscription "Use generic-lens or generic-optics with 'eventSubscription' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesrrsResponseStatus :: Lens.Lens' ModifyEventSubscriptionResponse Core.Int
mesrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED mesrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
