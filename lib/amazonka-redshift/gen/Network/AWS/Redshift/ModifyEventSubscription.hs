{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Redshift.ModifyEventSubscription
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Modifies an existing Amazon Redshift event notification subscription.
module Network.AWS.Redshift.ModifyEventSubscription
  ( -- * Creating a request
    ModifyEventSubscription (..),
    mkModifyEventSubscription,

    -- ** Request lenses
    mesSNSTopicARN,
    mesEnabled,
    mesSourceType,
    mesSeverity,
    mesEventCategories,
    mesSourceIds,
    mesSubscriptionName,

    -- * Destructuring the response
    ModifyEventSubscriptionResponse (..),
    mkModifyEventSubscriptionResponse,

    -- ** Response lenses
    mesrsEventSubscription,
    mesrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import Network.AWS.Redshift.Types
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- |
--
-- /See:/ 'mkModifyEventSubscription' smart constructor.
data ModifyEventSubscription = ModifyEventSubscription'
  { snsTopicARN ::
      Lude.Maybe Lude.Text,
    enabled :: Lude.Maybe Lude.Bool,
    sourceType :: Lude.Maybe Lude.Text,
    severity :: Lude.Maybe Lude.Text,
    eventCategories :: Lude.Maybe [Lude.Text],
    sourceIds :: Lude.Maybe [Lude.Text],
    subscriptionName :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ModifyEventSubscription' with the minimum fields required to make a request.
--
-- * 'enabled' - A Boolean value indicating if the subscription is enabled. @true@ indicates the subscription is enabled
-- * 'eventCategories' - Specifies the Amazon Redshift event categories to be published by the event notification subscription.
--
-- Values: configuration, management, monitoring, security
-- * 'severity' - Specifies the Amazon Redshift event severity to be published by the event notification subscription.
--
-- Values: ERROR, INFO
-- * 'snsTopicARN' - The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
-- * 'sourceIds' - A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.
--
-- Example: my-cluster-1, my-cluster-2
-- Example: my-snapshot-20131010
-- * 'sourceType' - The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.
--
-- Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
-- * 'subscriptionName' - The name of the modified Amazon Redshift event notification subscription.
mkModifyEventSubscription ::
  -- | 'subscriptionName'
  Lude.Text ->
  ModifyEventSubscription
mkModifyEventSubscription pSubscriptionName_ =
  ModifyEventSubscription'
    { snsTopicARN = Lude.Nothing,
      enabled = Lude.Nothing,
      sourceType = Lude.Nothing,
      severity = Lude.Nothing,
      eventCategories = Lude.Nothing,
      sourceIds = Lude.Nothing,
      subscriptionName = pSubscriptionName_
    }

-- | The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
--
-- /Note:/ Consider using 'snsTopicARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSNSTopicARN :: Lens.Lens' ModifyEventSubscription (Lude.Maybe Lude.Text)
mesSNSTopicARN = Lens.lens (snsTopicARN :: ModifyEventSubscription -> Lude.Maybe Lude.Text) (\s a -> s {snsTopicARN = a} :: ModifyEventSubscription)
{-# DEPRECATED mesSNSTopicARN "Use generic-lens or generic-optics with 'snsTopicARN' instead." #-}

-- | A Boolean value indicating if the subscription is enabled. @true@ indicates the subscription is enabled
--
-- /Note:/ Consider using 'enabled' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesEnabled :: Lens.Lens' ModifyEventSubscription (Lude.Maybe Lude.Bool)
mesEnabled = Lens.lens (enabled :: ModifyEventSubscription -> Lude.Maybe Lude.Bool) (\s a -> s {enabled = a} :: ModifyEventSubscription)
{-# DEPRECATED mesEnabled "Use generic-lens or generic-optics with 'enabled' instead." #-}

-- | The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.
--
-- Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
--
-- /Note:/ Consider using 'sourceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSourceType :: Lens.Lens' ModifyEventSubscription (Lude.Maybe Lude.Text)
mesSourceType = Lens.lens (sourceType :: ModifyEventSubscription -> Lude.Maybe Lude.Text) (\s a -> s {sourceType = a} :: ModifyEventSubscription)
{-# DEPRECATED mesSourceType "Use generic-lens or generic-optics with 'sourceType' instead." #-}

-- | Specifies the Amazon Redshift event severity to be published by the event notification subscription.
--
-- Values: ERROR, INFO
--
-- /Note:/ Consider using 'severity' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSeverity :: Lens.Lens' ModifyEventSubscription (Lude.Maybe Lude.Text)
mesSeverity = Lens.lens (severity :: ModifyEventSubscription -> Lude.Maybe Lude.Text) (\s a -> s {severity = a} :: ModifyEventSubscription)
{-# DEPRECATED mesSeverity "Use generic-lens or generic-optics with 'severity' instead." #-}

-- | Specifies the Amazon Redshift event categories to be published by the event notification subscription.
--
-- Values: configuration, management, monitoring, security
--
-- /Note:/ Consider using 'eventCategories' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesEventCategories :: Lens.Lens' ModifyEventSubscription (Lude.Maybe [Lude.Text])
mesEventCategories = Lens.lens (eventCategories :: ModifyEventSubscription -> Lude.Maybe [Lude.Text]) (\s a -> s {eventCategories = a} :: ModifyEventSubscription)
{-# DEPRECATED mesEventCategories "Use generic-lens or generic-optics with 'eventCategories' instead." #-}

-- | A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.
--
-- Example: my-cluster-1, my-cluster-2
-- Example: my-snapshot-20131010
--
-- /Note:/ Consider using 'sourceIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSourceIds :: Lens.Lens' ModifyEventSubscription (Lude.Maybe [Lude.Text])
mesSourceIds = Lens.lens (sourceIds :: ModifyEventSubscription -> Lude.Maybe [Lude.Text]) (\s a -> s {sourceIds = a} :: ModifyEventSubscription)
{-# DEPRECATED mesSourceIds "Use generic-lens or generic-optics with 'sourceIds' instead." #-}

-- | The name of the modified Amazon Redshift event notification subscription.
--
-- /Note:/ Consider using 'subscriptionName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSubscriptionName :: Lens.Lens' ModifyEventSubscription Lude.Text
mesSubscriptionName = Lens.lens (subscriptionName :: ModifyEventSubscription -> Lude.Text) (\s a -> s {subscriptionName = a} :: ModifyEventSubscription)
{-# DEPRECATED mesSubscriptionName "Use generic-lens or generic-optics with 'subscriptionName' instead." #-}

instance Lude.AWSRequest ModifyEventSubscription where
  type Rs ModifyEventSubscription = ModifyEventSubscriptionResponse
  request = Req.postQuery redshiftService
  response =
    Res.receiveXMLWrapper
      "ModifyEventSubscriptionResult"
      ( \s h x ->
          ModifyEventSubscriptionResponse'
            Lude.<$> (x Lude..@? "EventSubscription")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders ModifyEventSubscription where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath ModifyEventSubscription where
  toPath = Lude.const "/"

instance Lude.ToQuery ModifyEventSubscription where
  toQuery ModifyEventSubscription' {..} =
    Lude.mconcat
      [ "Action" Lude.=: ("ModifyEventSubscription" :: Lude.ByteString),
        "Version" Lude.=: ("2012-12-01" :: Lude.ByteString),
        "SnsTopicArn" Lude.=: snsTopicARN,
        "Enabled" Lude.=: enabled,
        "SourceType" Lude.=: sourceType,
        "Severity" Lude.=: severity,
        "EventCategories"
          Lude.=: Lude.toQuery
            (Lude.toQueryList "EventCategory" Lude.<$> eventCategories),
        "SourceIds"
          Lude.=: Lude.toQuery (Lude.toQueryList "SourceId" Lude.<$> sourceIds),
        "SubscriptionName" Lude.=: subscriptionName
      ]

-- | /See:/ 'mkModifyEventSubscriptionResponse' smart constructor.
data ModifyEventSubscriptionResponse = ModifyEventSubscriptionResponse'
  { eventSubscription ::
      Lude.Maybe
        EventSubscription,
    responseStatus :: Lude.Int
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ModifyEventSubscriptionResponse' with the minimum fields required to make a request.
--
-- * 'eventSubscription' - Undocumented field.
-- * 'responseStatus' - The response status code.
mkModifyEventSubscriptionResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  ModifyEventSubscriptionResponse
mkModifyEventSubscriptionResponse pResponseStatus_ =
  ModifyEventSubscriptionResponse'
    { eventSubscription =
        Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | Undocumented field.
--
-- /Note:/ Consider using 'eventSubscription' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesrsEventSubscription :: Lens.Lens' ModifyEventSubscriptionResponse (Lude.Maybe EventSubscription)
mesrsEventSubscription = Lens.lens (eventSubscription :: ModifyEventSubscriptionResponse -> Lude.Maybe EventSubscription) (\s a -> s {eventSubscription = a} :: ModifyEventSubscriptionResponse)
{-# DEPRECATED mesrsEventSubscription "Use generic-lens or generic-optics with 'eventSubscription' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesrsResponseStatus :: Lens.Lens' ModifyEventSubscriptionResponse Lude.Int
mesrsResponseStatus = Lens.lens (responseStatus :: ModifyEventSubscriptionResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: ModifyEventSubscriptionResponse)
{-# DEPRECATED mesrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
