{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Redshift.ModifyEventSubscription
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Modifies an existing Amazon Redshift event notification subscription.
module Network.AWS.Redshift.ModifyEventSubscription
    (
    -- * Creating a request
      ModifyEventSubscription (..)
    , mkModifyEventSubscription
    -- ** Request lenses
    , mesSubscriptionName
    , mesEnabled
    , mesEventCategories
    , mesSeverity
    , mesSnsTopicArn
    , mesSourceIds
    , mesSourceType

    -- * Destructuring the response
    , ModifyEventSubscriptionResponse (..)
    , mkModifyEventSubscriptionResponse
    -- ** Response lenses
    , mesrrsEventSubscription
    , mesrrsResponseStatus
    ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Redshift.Types as Types
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | 
--
-- /See:/ 'mkModifyEventSubscription' smart constructor.
data ModifyEventSubscription = ModifyEventSubscription'
  { subscriptionName :: Core.Text
    -- ^ The name of the modified Amazon Redshift event notification subscription.
  , enabled :: Core.Maybe Core.Bool
    -- ^ A Boolean value indicating if the subscription is enabled. @true@ indicates the subscription is enabled 
  , eventCategories :: Core.Maybe [Core.Text]
    -- ^ Specifies the Amazon Redshift event categories to be published by the event notification subscription.
--
-- Values: configuration, management, monitoring, security
  , severity :: Core.Maybe Core.Text
    -- ^ Specifies the Amazon Redshift event severity to be published by the event notification subscription.
--
-- Values: ERROR, INFO
  , snsTopicArn :: Core.Maybe Core.Text
    -- ^ The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
  , sourceIds :: Core.Maybe [Core.Text]
    -- ^ A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.
--
-- Example: my-cluster-1, my-cluster-2
-- Example: my-snapshot-20131010
  , sourceType :: Core.Maybe Core.Text
    -- ^ The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.
--
-- Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ModifyEventSubscription' value with any optional fields omitted.
mkModifyEventSubscription
    :: Core.Text -- ^ 'subscriptionName'
    -> ModifyEventSubscription
mkModifyEventSubscription subscriptionName
  = ModifyEventSubscription'{subscriptionName,
                             enabled = Core.Nothing, eventCategories = Core.Nothing,
                             severity = Core.Nothing, snsTopicArn = Core.Nothing,
                             sourceIds = Core.Nothing, sourceType = Core.Nothing}

-- | The name of the modified Amazon Redshift event notification subscription.
--
-- /Note:/ Consider using 'subscriptionName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSubscriptionName :: Lens.Lens' ModifyEventSubscription Core.Text
mesSubscriptionName = Lens.field @"subscriptionName"
{-# INLINEABLE mesSubscriptionName #-}
{-# DEPRECATED subscriptionName "Use generic-lens or generic-optics with 'subscriptionName' instead"  #-}

-- | A Boolean value indicating if the subscription is enabled. @true@ indicates the subscription is enabled 
--
-- /Note:/ Consider using 'enabled' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesEnabled :: Lens.Lens' ModifyEventSubscription (Core.Maybe Core.Bool)
mesEnabled = Lens.field @"enabled"
{-# INLINEABLE mesEnabled #-}
{-# DEPRECATED enabled "Use generic-lens or generic-optics with 'enabled' instead"  #-}

-- | Specifies the Amazon Redshift event categories to be published by the event notification subscription.
--
-- Values: configuration, management, monitoring, security
--
-- /Note:/ Consider using 'eventCategories' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesEventCategories :: Lens.Lens' ModifyEventSubscription (Core.Maybe [Core.Text])
mesEventCategories = Lens.field @"eventCategories"
{-# INLINEABLE mesEventCategories #-}
{-# DEPRECATED eventCategories "Use generic-lens or generic-optics with 'eventCategories' instead"  #-}

-- | Specifies the Amazon Redshift event severity to be published by the event notification subscription.
--
-- Values: ERROR, INFO
--
-- /Note:/ Consider using 'severity' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSeverity :: Lens.Lens' ModifyEventSubscription (Core.Maybe Core.Text)
mesSeverity = Lens.field @"severity"
{-# INLINEABLE mesSeverity #-}
{-# DEPRECATED severity "Use generic-lens or generic-optics with 'severity' instead"  #-}

-- | The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
--
-- /Note:/ Consider using 'snsTopicArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSnsTopicArn :: Lens.Lens' ModifyEventSubscription (Core.Maybe Core.Text)
mesSnsTopicArn = Lens.field @"snsTopicArn"
{-# INLINEABLE mesSnsTopicArn #-}
{-# DEPRECATED snsTopicArn "Use generic-lens or generic-optics with 'snsTopicArn' instead"  #-}

-- | A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.
--
-- Example: my-cluster-1, my-cluster-2
-- Example: my-snapshot-20131010
--
-- /Note:/ Consider using 'sourceIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSourceIds :: Lens.Lens' ModifyEventSubscription (Core.Maybe [Core.Text])
mesSourceIds = Lens.field @"sourceIds"
{-# INLINEABLE mesSourceIds #-}
{-# DEPRECATED sourceIds "Use generic-lens or generic-optics with 'sourceIds' instead"  #-}

-- | The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.
--
-- Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
--
-- /Note:/ Consider using 'sourceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesSourceType :: Lens.Lens' ModifyEventSubscription (Core.Maybe Core.Text)
mesSourceType = Lens.field @"sourceType"
{-# INLINEABLE mesSourceType #-}
{-# DEPRECATED sourceType "Use generic-lens or generic-optics with 'sourceType' instead"  #-}

instance Core.ToQuery ModifyEventSubscription where
        toQuery ModifyEventSubscription{..}
          = Core.toQueryPair "Action"
              ("ModifyEventSubscription" :: Core.Text)
              Core.<> Core.toQueryPair "Version" ("2012-12-01" :: Core.Text)
              Core.<> Core.toQueryPair "SubscriptionName" subscriptionName
              Core.<> Core.maybe Core.mempty (Core.toQueryPair "Enabled") enabled
              Core.<>
              Core.toQueryPair "EventCategories"
                (Core.maybe Core.mempty (Core.toQueryList "EventCategory")
                   eventCategories)
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "Severity") severity
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "SnsTopicArn") snsTopicArn
              Core.<>
              Core.toQueryPair "SourceIds"
                (Core.maybe Core.mempty (Core.toQueryList "SourceId") sourceIds)
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "SourceType") sourceType

instance Core.ToHeaders ModifyEventSubscription where
        toHeaders _ = Core.pure Core.mempty

instance Core.AWSRequest ModifyEventSubscription where
        type Rs ModifyEventSubscription = ModifyEventSubscriptionResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.mempty,
                         Core._rqHeaders =
                           Core.pure
                             ("Content-Type",
                              "application/x-www-form-urlencoded; charset=utf-8")
                             Core.<> Core.toHeaders x,
                         Core._rqBody = Core.toFormBody (Core.toQuery x)}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveXMLWrapper "ModifyEventSubscriptionResult"
              (\ s h x ->
                 ModifyEventSubscriptionResponse' Core.<$>
                   (x Core..@? "EventSubscription") Core.<*>
                     Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkModifyEventSubscriptionResponse' smart constructor.
data ModifyEventSubscriptionResponse = ModifyEventSubscriptionResponse'
  { eventSubscription :: Core.Maybe Types.EventSubscription
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'ModifyEventSubscriptionResponse' value with any optional fields omitted.
mkModifyEventSubscriptionResponse
    :: Core.Int -- ^ 'responseStatus'
    -> ModifyEventSubscriptionResponse
mkModifyEventSubscriptionResponse responseStatus
  = ModifyEventSubscriptionResponse'{eventSubscription =
                                       Core.Nothing,
                                     responseStatus}

-- | Undocumented field.
--
-- /Note:/ Consider using 'eventSubscription' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesrrsEventSubscription :: Lens.Lens' ModifyEventSubscriptionResponse (Core.Maybe Types.EventSubscription)
mesrrsEventSubscription = Lens.field @"eventSubscription"
{-# INLINEABLE mesrrsEventSubscription #-}
{-# DEPRECATED eventSubscription "Use generic-lens or generic-optics with 'eventSubscription' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mesrrsResponseStatus :: Lens.Lens' ModifyEventSubscriptionResponse Core.Int
mesrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE mesrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
