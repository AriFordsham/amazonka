{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SageMaker.Types.TrainingSpecification
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SageMaker.Types.TrainingSpecification
  ( TrainingSpecification (..),

    -- * Smart constructor
    mkTrainingSpecification,

    -- * Lenses
    tsTrainingImageDigest,
    tsSupportsDistributedTraining,
    tsSupportedHyperParameters,
    tsSupportedTuningJobObjectiveMetrics,
    tsMetricDefinitions,
    tsTrainingImage,
    tsSupportedTrainingInstanceTypes,
    tsTrainingChannels,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import Network.AWS.SageMaker.Types.ChannelSpecification
import Network.AWS.SageMaker.Types.HyperParameterSpecification
import Network.AWS.SageMaker.Types.HyperParameterTuningJobObjective
import Network.AWS.SageMaker.Types.MetricDefinition
import Network.AWS.SageMaker.Types.TrainingInstanceType

-- | Defines how the algorithm is used for a training job.
--
-- /See:/ 'mkTrainingSpecification' smart constructor.
data TrainingSpecification = TrainingSpecification'
  { trainingImageDigest ::
      Lude.Maybe Lude.Text,
    supportsDistributedTraining ::
      Lude.Maybe Lude.Bool,
    supportedHyperParameters ::
      Lude.Maybe [HyperParameterSpecification],
    supportedTuningJobObjectiveMetrics ::
      Lude.Maybe [HyperParameterTuningJobObjective],
    metricDefinitions ::
      Lude.Maybe [MetricDefinition],
    trainingImage :: Lude.Text,
    supportedTrainingInstanceTypes ::
      [TrainingInstanceType],
    trainingChannels ::
      Lude.NonEmpty ChannelSpecification
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'TrainingSpecification' with the minimum fields required to make a request.
--
-- * 'metricDefinitions' - A list of @MetricDefinition@ objects, which are used for parsing metrics generated by the algorithm.
-- * 'supportedHyperParameters' - A list of the @HyperParameterSpecification@ objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.>
-- * 'supportedTrainingInstanceTypes' - A list of the instance types that this algorithm can use for training.
-- * 'supportedTuningJobObjectiveMetrics' - A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.
-- * 'supportsDistributedTraining' - Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.
-- * 'trainingChannels' - A list of @ChannelSpecification@ objects, which specify the input sources to be used by the algorithm.
-- * 'trainingImage' - The Amazon ECR registry path of the Docker image that contains the training algorithm.
-- * 'trainingImageDigest' - An MD5 hash of the training algorithm that identifies the Docker image used for training.
mkTrainingSpecification ::
  -- | 'trainingImage'
  Lude.Text ->
  -- | 'trainingChannels'
  Lude.NonEmpty ChannelSpecification ->
  TrainingSpecification
mkTrainingSpecification pTrainingImage_ pTrainingChannels_ =
  TrainingSpecification'
    { trainingImageDigest = Lude.Nothing,
      supportsDistributedTraining = Lude.Nothing,
      supportedHyperParameters = Lude.Nothing,
      supportedTuningJobObjectiveMetrics = Lude.Nothing,
      metricDefinitions = Lude.Nothing,
      trainingImage = pTrainingImage_,
      supportedTrainingInstanceTypes = Lude.mempty,
      trainingChannels = pTrainingChannels_
    }

-- | An MD5 hash of the training algorithm that identifies the Docker image used for training.
--
-- /Note:/ Consider using 'trainingImageDigest' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsTrainingImageDigest :: Lens.Lens' TrainingSpecification (Lude.Maybe Lude.Text)
tsTrainingImageDigest = Lens.lens (trainingImageDigest :: TrainingSpecification -> Lude.Maybe Lude.Text) (\s a -> s {trainingImageDigest = a} :: TrainingSpecification)
{-# DEPRECATED tsTrainingImageDigest "Use generic-lens or generic-optics with 'trainingImageDigest' instead." #-}

-- | Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.
--
-- /Note:/ Consider using 'supportsDistributedTraining' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsSupportsDistributedTraining :: Lens.Lens' TrainingSpecification (Lude.Maybe Lude.Bool)
tsSupportsDistributedTraining = Lens.lens (supportsDistributedTraining :: TrainingSpecification -> Lude.Maybe Lude.Bool) (\s a -> s {supportsDistributedTraining = a} :: TrainingSpecification)
{-# DEPRECATED tsSupportsDistributedTraining "Use generic-lens or generic-optics with 'supportsDistributedTraining' instead." #-}

-- | A list of the @HyperParameterSpecification@ objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.>
--
-- /Note:/ Consider using 'supportedHyperParameters' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsSupportedHyperParameters :: Lens.Lens' TrainingSpecification (Lude.Maybe [HyperParameterSpecification])
tsSupportedHyperParameters = Lens.lens (supportedHyperParameters :: TrainingSpecification -> Lude.Maybe [HyperParameterSpecification]) (\s a -> s {supportedHyperParameters = a} :: TrainingSpecification)
{-# DEPRECATED tsSupportedHyperParameters "Use generic-lens or generic-optics with 'supportedHyperParameters' instead." #-}

-- | A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.
--
-- /Note:/ Consider using 'supportedTuningJobObjectiveMetrics' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsSupportedTuningJobObjectiveMetrics :: Lens.Lens' TrainingSpecification (Lude.Maybe [HyperParameterTuningJobObjective])
tsSupportedTuningJobObjectiveMetrics = Lens.lens (supportedTuningJobObjectiveMetrics :: TrainingSpecification -> Lude.Maybe [HyperParameterTuningJobObjective]) (\s a -> s {supportedTuningJobObjectiveMetrics = a} :: TrainingSpecification)
{-# DEPRECATED tsSupportedTuningJobObjectiveMetrics "Use generic-lens or generic-optics with 'supportedTuningJobObjectiveMetrics' instead." #-}

-- | A list of @MetricDefinition@ objects, which are used for parsing metrics generated by the algorithm.
--
-- /Note:/ Consider using 'metricDefinitions' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsMetricDefinitions :: Lens.Lens' TrainingSpecification (Lude.Maybe [MetricDefinition])
tsMetricDefinitions = Lens.lens (metricDefinitions :: TrainingSpecification -> Lude.Maybe [MetricDefinition]) (\s a -> s {metricDefinitions = a} :: TrainingSpecification)
{-# DEPRECATED tsMetricDefinitions "Use generic-lens or generic-optics with 'metricDefinitions' instead." #-}

-- | The Amazon ECR registry path of the Docker image that contains the training algorithm.
--
-- /Note:/ Consider using 'trainingImage' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsTrainingImage :: Lens.Lens' TrainingSpecification Lude.Text
tsTrainingImage = Lens.lens (trainingImage :: TrainingSpecification -> Lude.Text) (\s a -> s {trainingImage = a} :: TrainingSpecification)
{-# DEPRECATED tsTrainingImage "Use generic-lens or generic-optics with 'trainingImage' instead." #-}

-- | A list of the instance types that this algorithm can use for training.
--
-- /Note:/ Consider using 'supportedTrainingInstanceTypes' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsSupportedTrainingInstanceTypes :: Lens.Lens' TrainingSpecification [TrainingInstanceType]
tsSupportedTrainingInstanceTypes = Lens.lens (supportedTrainingInstanceTypes :: TrainingSpecification -> [TrainingInstanceType]) (\s a -> s {supportedTrainingInstanceTypes = a} :: TrainingSpecification)
{-# DEPRECATED tsSupportedTrainingInstanceTypes "Use generic-lens or generic-optics with 'supportedTrainingInstanceTypes' instead." #-}

-- | A list of @ChannelSpecification@ objects, which specify the input sources to be used by the algorithm.
--
-- /Note:/ Consider using 'trainingChannels' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsTrainingChannels :: Lens.Lens' TrainingSpecification (Lude.NonEmpty ChannelSpecification)
tsTrainingChannels = Lens.lens (trainingChannels :: TrainingSpecification -> Lude.NonEmpty ChannelSpecification) (\s a -> s {trainingChannels = a} :: TrainingSpecification)
{-# DEPRECATED tsTrainingChannels "Use generic-lens or generic-optics with 'trainingChannels' instead." #-}

instance Lude.FromJSON TrainingSpecification where
  parseJSON =
    Lude.withObject
      "TrainingSpecification"
      ( \x ->
          TrainingSpecification'
            Lude.<$> (x Lude..:? "TrainingImageDigest")
            Lude.<*> (x Lude..:? "SupportsDistributedTraining")
            Lude.<*> (x Lude..:? "SupportedHyperParameters" Lude..!= Lude.mempty)
            Lude.<*> ( x Lude..:? "SupportedTuningJobObjectiveMetrics"
                         Lude..!= Lude.mempty
                     )
            Lude.<*> (x Lude..:? "MetricDefinitions" Lude..!= Lude.mempty)
            Lude.<*> (x Lude..: "TrainingImage")
            Lude.<*> (x Lude..:? "SupportedTrainingInstanceTypes" Lude..!= Lude.mempty)
            Lude.<*> (x Lude..: "TrainingChannels")
      )

instance Lude.ToJSON TrainingSpecification where
  toJSON TrainingSpecification' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("TrainingImageDigest" Lude..=) Lude.<$> trainingImageDigest,
            ("SupportsDistributedTraining" Lude..=)
              Lude.<$> supportsDistributedTraining,
            ("SupportedHyperParameters" Lude..=)
              Lude.<$> supportedHyperParameters,
            ("SupportedTuningJobObjectiveMetrics" Lude..=)
              Lude.<$> supportedTuningJobObjectiveMetrics,
            ("MetricDefinitions" Lude..=) Lude.<$> metricDefinitions,
            Lude.Just ("TrainingImage" Lude..= trainingImage),
            Lude.Just
              ( "SupportedTrainingInstanceTypes"
                  Lude..= supportedTrainingInstanceTypes
              ),
            Lude.Just ("TrainingChannels" Lude..= trainingChannels)
          ]
      )
