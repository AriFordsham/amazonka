{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SageMaker.Types.TrainingSpecification
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SageMaker.Types.TrainingSpecification
  ( TrainingSpecification (..),

    -- * Smart constructor
    mkTrainingSpecification,

    -- * Lenses
    tsTrainingImage,
    tsSupportedTrainingInstanceTypes,
    tsTrainingChannels,
    tsMetricDefinitions,
    tsSupportedHyperParameters,
    tsSupportedTuningJobObjectiveMetrics,
    tsSupportsDistributedTraining,
    tsTrainingImageDigest,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.SageMaker.Types.ChannelSpecification as Types
import qualified Network.AWS.SageMaker.Types.HyperParameterSpecification as Types
import qualified Network.AWS.SageMaker.Types.HyperParameterTuningJobObjective as Types
import qualified Network.AWS.SageMaker.Types.MetricDefinition as Types
import qualified Network.AWS.SageMaker.Types.TrainingImage as Types
import qualified Network.AWS.SageMaker.Types.TrainingImageDigest as Types
import qualified Network.AWS.SageMaker.Types.TrainingInstanceType as Types

-- | Defines how the algorithm is used for a training job.
--
-- /See:/ 'mkTrainingSpecification' smart constructor.
data TrainingSpecification = TrainingSpecification'
  { -- | The Amazon ECR registry path of the Docker image that contains the training algorithm.
    trainingImage :: Types.TrainingImage,
    -- | A list of the instance types that this algorithm can use for training.
    supportedTrainingInstanceTypes :: [Types.TrainingInstanceType],
    -- | A list of @ChannelSpecification@ objects, which specify the input sources to be used by the algorithm.
    trainingChannels :: Core.NonEmpty Types.ChannelSpecification,
    -- | A list of @MetricDefinition@ objects, which are used for parsing metrics generated by the algorithm.
    metricDefinitions :: Core.Maybe [Types.MetricDefinition],
    -- | A list of the @HyperParameterSpecification@ objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.>
    supportedHyperParameters :: Core.Maybe [Types.HyperParameterSpecification],
    -- | A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.
    supportedTuningJobObjectiveMetrics :: Core.Maybe [Types.HyperParameterTuningJobObjective],
    -- | Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.
    supportsDistributedTraining :: Core.Maybe Core.Bool,
    -- | An MD5 hash of the training algorithm that identifies the Docker image used for training.
    trainingImageDigest :: Core.Maybe Types.TrainingImageDigest
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'TrainingSpecification' value with any optional fields omitted.
mkTrainingSpecification ::
  -- | 'trainingImage'
  Types.TrainingImage ->
  -- | 'trainingChannels'
  Core.NonEmpty Types.ChannelSpecification ->
  TrainingSpecification
mkTrainingSpecification trainingImage trainingChannels =
  TrainingSpecification'
    { trainingImage,
      supportedTrainingInstanceTypes = Core.mempty,
      trainingChannels,
      metricDefinitions = Core.Nothing,
      supportedHyperParameters = Core.Nothing,
      supportedTuningJobObjectiveMetrics = Core.Nothing,
      supportsDistributedTraining = Core.Nothing,
      trainingImageDigest = Core.Nothing
    }

-- | The Amazon ECR registry path of the Docker image that contains the training algorithm.
--
-- /Note:/ Consider using 'trainingImage' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsTrainingImage :: Lens.Lens' TrainingSpecification Types.TrainingImage
tsTrainingImage = Lens.field @"trainingImage"
{-# DEPRECATED tsTrainingImage "Use generic-lens or generic-optics with 'trainingImage' instead." #-}

-- | A list of the instance types that this algorithm can use for training.
--
-- /Note:/ Consider using 'supportedTrainingInstanceTypes' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsSupportedTrainingInstanceTypes :: Lens.Lens' TrainingSpecification [Types.TrainingInstanceType]
tsSupportedTrainingInstanceTypes = Lens.field @"supportedTrainingInstanceTypes"
{-# DEPRECATED tsSupportedTrainingInstanceTypes "Use generic-lens or generic-optics with 'supportedTrainingInstanceTypes' instead." #-}

-- | A list of @ChannelSpecification@ objects, which specify the input sources to be used by the algorithm.
--
-- /Note:/ Consider using 'trainingChannels' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsTrainingChannels :: Lens.Lens' TrainingSpecification (Core.NonEmpty Types.ChannelSpecification)
tsTrainingChannels = Lens.field @"trainingChannels"
{-# DEPRECATED tsTrainingChannels "Use generic-lens or generic-optics with 'trainingChannels' instead." #-}

-- | A list of @MetricDefinition@ objects, which are used for parsing metrics generated by the algorithm.
--
-- /Note:/ Consider using 'metricDefinitions' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsMetricDefinitions :: Lens.Lens' TrainingSpecification (Core.Maybe [Types.MetricDefinition])
tsMetricDefinitions = Lens.field @"metricDefinitions"
{-# DEPRECATED tsMetricDefinitions "Use generic-lens or generic-optics with 'metricDefinitions' instead." #-}

-- | A list of the @HyperParameterSpecification@ objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.>
--
-- /Note:/ Consider using 'supportedHyperParameters' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsSupportedHyperParameters :: Lens.Lens' TrainingSpecification (Core.Maybe [Types.HyperParameterSpecification])
tsSupportedHyperParameters = Lens.field @"supportedHyperParameters"
{-# DEPRECATED tsSupportedHyperParameters "Use generic-lens or generic-optics with 'supportedHyperParameters' instead." #-}

-- | A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.
--
-- /Note:/ Consider using 'supportedTuningJobObjectiveMetrics' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsSupportedTuningJobObjectiveMetrics :: Lens.Lens' TrainingSpecification (Core.Maybe [Types.HyperParameterTuningJobObjective])
tsSupportedTuningJobObjectiveMetrics = Lens.field @"supportedTuningJobObjectiveMetrics"
{-# DEPRECATED tsSupportedTuningJobObjectiveMetrics "Use generic-lens or generic-optics with 'supportedTuningJobObjectiveMetrics' instead." #-}

-- | Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.
--
-- /Note:/ Consider using 'supportsDistributedTraining' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsSupportsDistributedTraining :: Lens.Lens' TrainingSpecification (Core.Maybe Core.Bool)
tsSupportsDistributedTraining = Lens.field @"supportsDistributedTraining"
{-# DEPRECATED tsSupportsDistributedTraining "Use generic-lens or generic-optics with 'supportsDistributedTraining' instead." #-}

-- | An MD5 hash of the training algorithm that identifies the Docker image used for training.
--
-- /Note:/ Consider using 'trainingImageDigest' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
tsTrainingImageDigest :: Lens.Lens' TrainingSpecification (Core.Maybe Types.TrainingImageDigest)
tsTrainingImageDigest = Lens.field @"trainingImageDigest"
{-# DEPRECATED tsTrainingImageDigest "Use generic-lens or generic-optics with 'trainingImageDigest' instead." #-}

instance Core.FromJSON TrainingSpecification where
  toJSON TrainingSpecification {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("TrainingImage" Core..= trainingImage),
            Core.Just
              ( "SupportedTrainingInstanceTypes"
                  Core..= supportedTrainingInstanceTypes
              ),
            Core.Just ("TrainingChannels" Core..= trainingChannels),
            ("MetricDefinitions" Core..=) Core.<$> metricDefinitions,
            ("SupportedHyperParameters" Core..=)
              Core.<$> supportedHyperParameters,
            ("SupportedTuningJobObjectiveMetrics" Core..=)
              Core.<$> supportedTuningJobObjectiveMetrics,
            ("SupportsDistributedTraining" Core..=)
              Core.<$> supportsDistributedTraining,
            ("TrainingImageDigest" Core..=) Core.<$> trainingImageDigest
          ]
      )

instance Core.FromJSON TrainingSpecification where
  parseJSON =
    Core.withObject "TrainingSpecification" Core.$
      \x ->
        TrainingSpecification'
          Core.<$> (x Core..: "TrainingImage")
          Core.<*> (x Core..:? "SupportedTrainingInstanceTypes" Core..!= Core.mempty)
          Core.<*> (x Core..: "TrainingChannels")
          Core.<*> (x Core..:? "MetricDefinitions")
          Core.<*> (x Core..:? "SupportedHyperParameters")
          Core.<*> (x Core..:? "SupportedTuningJobObjectiveMetrics")
          Core.<*> (x Core..:? "SupportsDistributedTraining")
          Core.<*> (x Core..:? "TrainingImageDigest")
