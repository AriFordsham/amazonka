{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudWatchLogs.Types.ResultField
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.CloudWatchLogs.Types.ResultField
  ( ResultField (..)
  -- * Smart constructor
  , mkResultField
  -- * Lenses
  , rfField
  , rfValue
  ) where

import qualified Network.AWS.CloudWatchLogs.Types.Field as Types
import qualified Network.AWS.CloudWatchLogs.Types.Value as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.
--
-- For more information about the fields that are generated by CloudWatch logs, see <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html Supported Logs and Discovered Fields> .
--
-- /See:/ 'mkResultField' smart constructor.
data ResultField = ResultField'
  { field :: Core.Maybe Types.Field
    -- ^ The log event field.
  , value :: Core.Maybe Types.Value
    -- ^ The value of this field.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ResultField' value with any optional fields omitted.
mkResultField
    :: ResultField
mkResultField
  = ResultField'{field = Core.Nothing, value = Core.Nothing}

-- | The log event field.
--
-- /Note:/ Consider using 'field' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rfField :: Lens.Lens' ResultField (Core.Maybe Types.Field)
rfField = Lens.field @"field"
{-# INLINEABLE rfField #-}
{-# DEPRECATED field "Use generic-lens or generic-optics with 'field' instead"  #-}

-- | The value of this field.
--
-- /Note:/ Consider using 'value' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rfValue :: Lens.Lens' ResultField (Core.Maybe Types.Value)
rfValue = Lens.field @"value"
{-# INLINEABLE rfValue #-}
{-# DEPRECATED value "Use generic-lens or generic-optics with 'value' instead"  #-}

instance Core.FromJSON ResultField where
        parseJSON
          = Core.withObject "ResultField" Core.$
              \ x ->
                ResultField' Core.<$>
                  (x Core..:? "field") Core.<*> x Core..:? "value"
