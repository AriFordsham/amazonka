{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudWatchLogs.Types.ResultField
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.CloudWatchLogs.Types.ResultField
  ( ResultField (..),

    -- * Smart constructor
    mkResultField,

    -- * Lenses
    rfField,
    rfValue,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.
--
-- For more information about the fields that are generated by CloudWatch logs, see <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html Supported Logs and Discovered Fields> .
--
-- /See:/ 'mkResultField' smart constructor.
data ResultField = ResultField'
  { field :: Lude.Maybe Lude.Text,
    value :: Lude.Maybe Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ResultField' with the minimum fields required to make a request.
--
-- * 'field' - The log event field.
-- * 'value' - The value of this field.
mkResultField ::
  ResultField
mkResultField =
  ResultField' {field = Lude.Nothing, value = Lude.Nothing}

-- | The log event field.
--
-- /Note:/ Consider using 'field' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rfField :: Lens.Lens' ResultField (Lude.Maybe Lude.Text)
rfField = Lens.lens (field :: ResultField -> Lude.Maybe Lude.Text) (\s a -> s {field = a} :: ResultField)
{-# DEPRECATED rfField "Use generic-lens or generic-optics with 'field' instead." #-}

-- | The value of this field.
--
-- /Note:/ Consider using 'value' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rfValue :: Lens.Lens' ResultField (Lude.Maybe Lude.Text)
rfValue = Lens.lens (value :: ResultField -> Lude.Maybe Lude.Text) (\s a -> s {value = a} :: ResultField)
{-# DEPRECATED rfValue "Use generic-lens or generic-optics with 'value' instead." #-}

instance Lude.FromJSON ResultField where
  parseJSON =
    Lude.withObject
      "ResultField"
      ( \x ->
          ResultField'
            Lude.<$> (x Lude..:? "field") Lude.<*> (x Lude..:? "value")
      )
