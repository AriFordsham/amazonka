{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudWatchLogs.GetLogGroupFields
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns a list of the fields that are included in log events in the specified log group, along with the percentage of log events that contain each field. The search is limited to a time period that you specify.
--
-- In the results, fields that start with @ are fields generated by CloudWatch Logs. For example, @@timestamp@ is the timestamp of each log event. For more information about the fields that are generated by CloudWatch logs, see <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html Supported Logs and Discovered Fields> .
-- The response results are sorted by the frequency percentage, starting with the highest percentage.
module Network.AWS.CloudWatchLogs.GetLogGroupFields
    (
    -- * Creating a request
      GetLogGroupFields (..)
    , mkGetLogGroupFields
    -- ** Request lenses
    , glgfLogGroupName
    , glgfTime

    -- * Destructuring the response
    , GetLogGroupFieldsResponse (..)
    , mkGetLogGroupFieldsResponse
    -- ** Response lenses
    , glgfrrsLogGroupFields
    , glgfrrsResponseStatus
    ) where

import qualified Network.AWS.CloudWatchLogs.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkGetLogGroupFields' smart constructor.
data GetLogGroupFields = GetLogGroupFields'
  { logGroupName :: Types.LogGroupName
    -- ^ The name of the log group to search.
  , time :: Core.Maybe Core.Natural
    -- ^ The time to set as the center of the query. If you specify @time@ , the 8 minutes before and 8 minutes after this time are searched. If you omit @time@ , the past 15 minutes are queried.
--
-- The @time@ value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'GetLogGroupFields' value with any optional fields omitted.
mkGetLogGroupFields
    :: Types.LogGroupName -- ^ 'logGroupName'
    -> GetLogGroupFields
mkGetLogGroupFields logGroupName
  = GetLogGroupFields'{logGroupName, time = Core.Nothing}

-- | The name of the log group to search.
--
-- /Note:/ Consider using 'logGroupName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glgfLogGroupName :: Lens.Lens' GetLogGroupFields Types.LogGroupName
glgfLogGroupName = Lens.field @"logGroupName"
{-# INLINEABLE glgfLogGroupName #-}
{-# DEPRECATED logGroupName "Use generic-lens or generic-optics with 'logGroupName' instead"  #-}

-- | The time to set as the center of the query. If you specify @time@ , the 8 minutes before and 8 minutes after this time are searched. If you omit @time@ , the past 15 minutes are queried.
--
-- The @time@ value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
--
-- /Note:/ Consider using 'time' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glgfTime :: Lens.Lens' GetLogGroupFields (Core.Maybe Core.Natural)
glgfTime = Lens.field @"time"
{-# INLINEABLE glgfTime #-}
{-# DEPRECATED time "Use generic-lens or generic-optics with 'time' instead"  #-}

instance Core.ToQuery GetLogGroupFields where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders GetLogGroupFields where
        toHeaders GetLogGroupFields{..}
          = Core.pure ("X-Amz-Target", "Logs_20140328.GetLogGroupFields")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON GetLogGroupFields where
        toJSON GetLogGroupFields{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just ("logGroupName" Core..= logGroupName),
                  ("time" Core..=) Core.<$> time])

instance Core.AWSRequest GetLogGroupFields where
        type Rs GetLogGroupFields = GetLogGroupFieldsResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 GetLogGroupFieldsResponse' Core.<$>
                   (x Core..:? "logGroupFields") Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkGetLogGroupFieldsResponse' smart constructor.
data GetLogGroupFieldsResponse = GetLogGroupFieldsResponse'
  { logGroupFields :: Core.Maybe [Types.LogGroupField]
    -- ^ The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'GetLogGroupFieldsResponse' value with any optional fields omitted.
mkGetLogGroupFieldsResponse
    :: Core.Int -- ^ 'responseStatus'
    -> GetLogGroupFieldsResponse
mkGetLogGroupFieldsResponse responseStatus
  = GetLogGroupFieldsResponse'{logGroupFields = Core.Nothing,
                               responseStatus}

-- | The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.
--
-- /Note:/ Consider using 'logGroupFields' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glgfrrsLogGroupFields :: Lens.Lens' GetLogGroupFieldsResponse (Core.Maybe [Types.LogGroupField])
glgfrrsLogGroupFields = Lens.field @"logGroupFields"
{-# INLINEABLE glgfrrsLogGroupFields #-}
{-# DEPRECATED logGroupFields "Use generic-lens or generic-optics with 'logGroupFields' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glgfrrsResponseStatus :: Lens.Lens' GetLogGroupFieldsResponse Core.Int
glgfrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE glgfrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
