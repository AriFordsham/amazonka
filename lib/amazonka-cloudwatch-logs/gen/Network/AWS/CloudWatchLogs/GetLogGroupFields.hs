{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudWatchLogs.GetLogGroupFields
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns a list of the fields that are included in log events in the specified log group, along with the percentage of log events that contain each field. The search is limited to a time period that you specify.
--
-- In the results, fields that start with @ are fields generated by CloudWatch Logs. For example, @@timestamp@ is the timestamp of each log event. For more information about the fields that are generated by CloudWatch logs, see <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html Supported Logs and Discovered Fields> .
-- The response results are sorted by the frequency percentage, starting with the highest percentage.
module Network.AWS.CloudWatchLogs.GetLogGroupFields
  ( -- * Creating a request
    GetLogGroupFields (..),
    mkGetLogGroupFields,

    -- ** Request lenses
    glgfTime,
    glgfLogGroupName,

    -- * Destructuring the response
    GetLogGroupFieldsResponse (..),
    mkGetLogGroupFieldsResponse,

    -- ** Response lenses
    glgfrsLogGroupFields,
    glgfrsResponseStatus,
  )
where

import Network.AWS.CloudWatchLogs.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkGetLogGroupFields' smart constructor.
data GetLogGroupFields = GetLogGroupFields'
  { -- | The time to set as the center of the query. If you specify @time@ , the 8 minutes before and 8 minutes after this time are searched. If you omit @time@ , the past 15 minutes are queried.
    --
    -- The @time@ value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    time :: Lude.Maybe Lude.Natural,
    -- | The name of the log group to search.
    logGroupName :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'GetLogGroupFields' with the minimum fields required to make a request.
--
-- * 'time' - The time to set as the center of the query. If you specify @time@ , the 8 minutes before and 8 minutes after this time are searched. If you omit @time@ , the past 15 minutes are queried.
--
-- The @time@ value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
-- * 'logGroupName' - The name of the log group to search.
mkGetLogGroupFields ::
  -- | 'logGroupName'
  Lude.Text ->
  GetLogGroupFields
mkGetLogGroupFields pLogGroupName_ =
  GetLogGroupFields'
    { time = Lude.Nothing,
      logGroupName = pLogGroupName_
    }

-- | The time to set as the center of the query. If you specify @time@ , the 8 minutes before and 8 minutes after this time are searched. If you omit @time@ , the past 15 minutes are queried.
--
-- The @time@ value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
--
-- /Note:/ Consider using 'time' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glgfTime :: Lens.Lens' GetLogGroupFields (Lude.Maybe Lude.Natural)
glgfTime = Lens.lens (time :: GetLogGroupFields -> Lude.Maybe Lude.Natural) (\s a -> s {time = a} :: GetLogGroupFields)
{-# DEPRECATED glgfTime "Use generic-lens or generic-optics with 'time' instead." #-}

-- | The name of the log group to search.
--
-- /Note:/ Consider using 'logGroupName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glgfLogGroupName :: Lens.Lens' GetLogGroupFields Lude.Text
glgfLogGroupName = Lens.lens (logGroupName :: GetLogGroupFields -> Lude.Text) (\s a -> s {logGroupName = a} :: GetLogGroupFields)
{-# DEPRECATED glgfLogGroupName "Use generic-lens or generic-optics with 'logGroupName' instead." #-}

instance Lude.AWSRequest GetLogGroupFields where
  type Rs GetLogGroupFields = GetLogGroupFieldsResponse
  request = Req.postJSON cloudWatchLogsService
  response =
    Res.receiveJSON
      ( \s h x ->
          GetLogGroupFieldsResponse'
            Lude.<$> (x Lude..?> "logGroupFields" Lude..!@ Lude.mempty)
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders GetLogGroupFields where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("Logs_20140328.GetLogGroupFields" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON GetLogGroupFields where
  toJSON GetLogGroupFields' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("time" Lude..=) Lude.<$> time,
            Lude.Just ("logGroupName" Lude..= logGroupName)
          ]
      )

instance Lude.ToPath GetLogGroupFields where
  toPath = Lude.const "/"

instance Lude.ToQuery GetLogGroupFields where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkGetLogGroupFieldsResponse' smart constructor.
data GetLogGroupFieldsResponse = GetLogGroupFieldsResponse'
  { -- | The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.
    logGroupFields :: Lude.Maybe [LogGroupField],
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'GetLogGroupFieldsResponse' with the minimum fields required to make a request.
--
-- * 'logGroupFields' - The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.
-- * 'responseStatus' - The response status code.
mkGetLogGroupFieldsResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  GetLogGroupFieldsResponse
mkGetLogGroupFieldsResponse pResponseStatus_ =
  GetLogGroupFieldsResponse'
    { logGroupFields = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.
--
-- /Note:/ Consider using 'logGroupFields' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glgfrsLogGroupFields :: Lens.Lens' GetLogGroupFieldsResponse (Lude.Maybe [LogGroupField])
glgfrsLogGroupFields = Lens.lens (logGroupFields :: GetLogGroupFieldsResponse -> Lude.Maybe [LogGroupField]) (\s a -> s {logGroupFields = a} :: GetLogGroupFieldsResponse)
{-# DEPRECATED glgfrsLogGroupFields "Use generic-lens or generic-optics with 'logGroupFields' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glgfrsResponseStatus :: Lens.Lens' GetLogGroupFieldsResponse Lude.Int
glgfrsResponseStatus = Lens.lens (responseStatus :: GetLogGroupFieldsResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: GetLogGroupFieldsResponse)
{-# DEPRECATED glgfrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
