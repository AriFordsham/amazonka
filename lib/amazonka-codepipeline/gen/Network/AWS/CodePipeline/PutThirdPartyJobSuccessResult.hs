{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CodePipeline.PutThirdPartyJobSuccessResult
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Represents the success of a third party job as returned to the pipeline by a job worker. Used for partner actions only.
module Network.AWS.CodePipeline.PutThirdPartyJobSuccessResult
  ( -- * Creating a request
    PutThirdPartyJobSuccessResult (..),
    mkPutThirdPartyJobSuccessResult,

    -- ** Request lenses
    ptpjsrJobId,
    ptpjsrClientToken,
    ptpjsrContinuationToken,
    ptpjsrCurrentRevision,
    ptpjsrExecutionDetails,

    -- * Destructuring the response
    PutThirdPartyJobSuccessResultResponse (..),
    mkPutThirdPartyJobSuccessResultResponse,
  )
where

import qualified Network.AWS.CodePipeline.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | Represents the input of a @PutThirdPartyJobSuccessResult@ action.
--
-- /See:/ 'mkPutThirdPartyJobSuccessResult' smart constructor.
data PutThirdPartyJobSuccessResult = PutThirdPartyJobSuccessResult'
  { -- | The ID of the job that successfully completed. This is the same ID returned from @PollForThirdPartyJobs@ .
    jobId :: Types.JobId,
    -- | The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    clientToken :: Types.ClientToken,
    -- | A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
    continuationToken :: Core.Maybe Types.ContinuationToken,
    -- | Represents information about a current revision.
    currentRevision :: Core.Maybe Types.CurrentRevision,
    -- | The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
    executionDetails :: Core.Maybe Types.ExecutionDetails
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'PutThirdPartyJobSuccessResult' value with any optional fields omitted.
mkPutThirdPartyJobSuccessResult ::
  -- | 'jobId'
  Types.JobId ->
  -- | 'clientToken'
  Types.ClientToken ->
  PutThirdPartyJobSuccessResult
mkPutThirdPartyJobSuccessResult jobId clientToken =
  PutThirdPartyJobSuccessResult'
    { jobId,
      clientToken,
      continuationToken = Core.Nothing,
      currentRevision = Core.Nothing,
      executionDetails = Core.Nothing
    }

-- | The ID of the job that successfully completed. This is the same ID returned from @PollForThirdPartyJobs@ .
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrJobId :: Lens.Lens' PutThirdPartyJobSuccessResult Types.JobId
ptpjsrJobId = Lens.field @"jobId"
{-# DEPRECATED ptpjsrJobId "Use generic-lens or generic-optics with 'jobId' instead." #-}

-- | The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
--
-- /Note:/ Consider using 'clientToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrClientToken :: Lens.Lens' PutThirdPartyJobSuccessResult Types.ClientToken
ptpjsrClientToken = Lens.field @"clientToken"
{-# DEPRECATED ptpjsrClientToken "Use generic-lens or generic-optics with 'clientToken' instead." #-}

-- | A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
--
-- /Note:/ Consider using 'continuationToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrContinuationToken :: Lens.Lens' PutThirdPartyJobSuccessResult (Core.Maybe Types.ContinuationToken)
ptpjsrContinuationToken = Lens.field @"continuationToken"
{-# DEPRECATED ptpjsrContinuationToken "Use generic-lens or generic-optics with 'continuationToken' instead." #-}

-- | Represents information about a current revision.
--
-- /Note:/ Consider using 'currentRevision' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrCurrentRevision :: Lens.Lens' PutThirdPartyJobSuccessResult (Core.Maybe Types.CurrentRevision)
ptpjsrCurrentRevision = Lens.field @"currentRevision"
{-# DEPRECATED ptpjsrCurrentRevision "Use generic-lens or generic-optics with 'currentRevision' instead." #-}

-- | The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
--
-- /Note:/ Consider using 'executionDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrExecutionDetails :: Lens.Lens' PutThirdPartyJobSuccessResult (Core.Maybe Types.ExecutionDetails)
ptpjsrExecutionDetails = Lens.field @"executionDetails"
{-# DEPRECATED ptpjsrExecutionDetails "Use generic-lens or generic-optics with 'executionDetails' instead." #-}

instance Core.FromJSON PutThirdPartyJobSuccessResult where
  toJSON PutThirdPartyJobSuccessResult {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("jobId" Core..= jobId),
            Core.Just ("clientToken" Core..= clientToken),
            ("continuationToken" Core..=) Core.<$> continuationToken,
            ("currentRevision" Core..=) Core.<$> currentRevision,
            ("executionDetails" Core..=) Core.<$> executionDetails
          ]
      )

instance Core.AWSRequest PutThirdPartyJobSuccessResult where
  type
    Rs PutThirdPartyJobSuccessResult =
      PutThirdPartyJobSuccessResultResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "X-Amz-Target",
              "CodePipeline_20150709.PutThirdPartyJobSuccessResult"
            )
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveNull PutThirdPartyJobSuccessResultResponse'

-- | /See:/ 'mkPutThirdPartyJobSuccessResultResponse' smart constructor.
data PutThirdPartyJobSuccessResultResponse = PutThirdPartyJobSuccessResultResponse'
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'PutThirdPartyJobSuccessResultResponse' value with any optional fields omitted.
mkPutThirdPartyJobSuccessResultResponse ::
  PutThirdPartyJobSuccessResultResponse
mkPutThirdPartyJobSuccessResultResponse =
  PutThirdPartyJobSuccessResultResponse'
