{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CodePipeline.PutThirdPartyJobSuccessResult
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Represents the success of a third party job as returned to the pipeline by a job worker. Used for partner actions only.
module Network.AWS.CodePipeline.PutThirdPartyJobSuccessResult
  ( -- * Creating a request
    PutThirdPartyJobSuccessResult (..),
    mkPutThirdPartyJobSuccessResult,

    -- ** Request lenses
    ptpjsrJobId,
    ptpjsrClientToken,
    ptpjsrContinuationToken,
    ptpjsrExecutionDetails,
    ptpjsrCurrentRevision,

    -- * Destructuring the response
    PutThirdPartyJobSuccessResultResponse (..),
    mkPutThirdPartyJobSuccessResultResponse,
  )
where

import Network.AWS.CodePipeline.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | Represents the input of a @PutThirdPartyJobSuccessResult@ action.
--
-- /See:/ 'mkPutThirdPartyJobSuccessResult' smart constructor.
data PutThirdPartyJobSuccessResult = PutThirdPartyJobSuccessResult'
  { -- | The ID of the job that successfully completed. This is the same ID returned from @PollForThirdPartyJobs@ .
    jobId :: Lude.Text,
    -- | The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    clientToken :: Lude.Text,
    -- | A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
    continuationToken :: Lude.Maybe Lude.Text,
    -- | The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
    executionDetails :: Lude.Maybe ExecutionDetails,
    -- | Represents information about a current revision.
    currentRevision :: Lude.Maybe CurrentRevision
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutThirdPartyJobSuccessResult' with the minimum fields required to make a request.
--
-- * 'jobId' - The ID of the job that successfully completed. This is the same ID returned from @PollForThirdPartyJobs@ .
-- * 'clientToken' - The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
-- * 'continuationToken' - A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
-- * 'executionDetails' - The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
-- * 'currentRevision' - Represents information about a current revision.
mkPutThirdPartyJobSuccessResult ::
  -- | 'jobId'
  Lude.Text ->
  -- | 'clientToken'
  Lude.Text ->
  PutThirdPartyJobSuccessResult
mkPutThirdPartyJobSuccessResult pJobId_ pClientToken_ =
  PutThirdPartyJobSuccessResult'
    { jobId = pJobId_,
      clientToken = pClientToken_,
      continuationToken = Lude.Nothing,
      executionDetails = Lude.Nothing,
      currentRevision = Lude.Nothing
    }

-- | The ID of the job that successfully completed. This is the same ID returned from @PollForThirdPartyJobs@ .
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrJobId :: Lens.Lens' PutThirdPartyJobSuccessResult Lude.Text
ptpjsrJobId = Lens.lens (jobId :: PutThirdPartyJobSuccessResult -> Lude.Text) (\s a -> s {jobId = a} :: PutThirdPartyJobSuccessResult)
{-# DEPRECATED ptpjsrJobId "Use generic-lens or generic-optics with 'jobId' instead." #-}

-- | The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
--
-- /Note:/ Consider using 'clientToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrClientToken :: Lens.Lens' PutThirdPartyJobSuccessResult Lude.Text
ptpjsrClientToken = Lens.lens (clientToken :: PutThirdPartyJobSuccessResult -> Lude.Text) (\s a -> s {clientToken = a} :: PutThirdPartyJobSuccessResult)
{-# DEPRECATED ptpjsrClientToken "Use generic-lens or generic-optics with 'clientToken' instead." #-}

-- | A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
--
-- /Note:/ Consider using 'continuationToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrContinuationToken :: Lens.Lens' PutThirdPartyJobSuccessResult (Lude.Maybe Lude.Text)
ptpjsrContinuationToken = Lens.lens (continuationToken :: PutThirdPartyJobSuccessResult -> Lude.Maybe Lude.Text) (\s a -> s {continuationToken = a} :: PutThirdPartyJobSuccessResult)
{-# DEPRECATED ptpjsrContinuationToken "Use generic-lens or generic-optics with 'continuationToken' instead." #-}

-- | The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
--
-- /Note:/ Consider using 'executionDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrExecutionDetails :: Lens.Lens' PutThirdPartyJobSuccessResult (Lude.Maybe ExecutionDetails)
ptpjsrExecutionDetails = Lens.lens (executionDetails :: PutThirdPartyJobSuccessResult -> Lude.Maybe ExecutionDetails) (\s a -> s {executionDetails = a} :: PutThirdPartyJobSuccessResult)
{-# DEPRECATED ptpjsrExecutionDetails "Use generic-lens or generic-optics with 'executionDetails' instead." #-}

-- | Represents information about a current revision.
--
-- /Note:/ Consider using 'currentRevision' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ptpjsrCurrentRevision :: Lens.Lens' PutThirdPartyJobSuccessResult (Lude.Maybe CurrentRevision)
ptpjsrCurrentRevision = Lens.lens (currentRevision :: PutThirdPartyJobSuccessResult -> Lude.Maybe CurrentRevision) (\s a -> s {currentRevision = a} :: PutThirdPartyJobSuccessResult)
{-# DEPRECATED ptpjsrCurrentRevision "Use generic-lens or generic-optics with 'currentRevision' instead." #-}

instance Lude.AWSRequest PutThirdPartyJobSuccessResult where
  type
    Rs PutThirdPartyJobSuccessResult =
      PutThirdPartyJobSuccessResultResponse
  request = Req.postJSON codePipelineService
  response = Res.receiveNull PutThirdPartyJobSuccessResultResponse'

instance Lude.ToHeaders PutThirdPartyJobSuccessResult where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ( "CodePipeline_20150709.PutThirdPartyJobSuccessResult" ::
                          Lude.ByteString
                      ),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON PutThirdPartyJobSuccessResult where
  toJSON PutThirdPartyJobSuccessResult' {..} =
    Lude.object
      ( Lude.catMaybes
          [ Lude.Just ("jobId" Lude..= jobId),
            Lude.Just ("clientToken" Lude..= clientToken),
            ("continuationToken" Lude..=) Lude.<$> continuationToken,
            ("executionDetails" Lude..=) Lude.<$> executionDetails,
            ("currentRevision" Lude..=) Lude.<$> currentRevision
          ]
      )

instance Lude.ToPath PutThirdPartyJobSuccessResult where
  toPath = Lude.const "/"

instance Lude.ToQuery PutThirdPartyJobSuccessResult where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkPutThirdPartyJobSuccessResultResponse' smart constructor.
data PutThirdPartyJobSuccessResultResponse = PutThirdPartyJobSuccessResultResponse'
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutThirdPartyJobSuccessResultResponse' with the minimum fields required to make a request.
mkPutThirdPartyJobSuccessResultResponse ::
  PutThirdPartyJobSuccessResultResponse
mkPutThirdPartyJobSuccessResultResponse =
  PutThirdPartyJobSuccessResultResponse'
