{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CodePipeline.Types.ListWebhookItem
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.CodePipeline.Types.ListWebhookItem
  ( ListWebhookItem (..)
  -- * Smart constructor
  , mkListWebhookItem
  -- * Lenses
  , lwiDefinition
  , lwiUrl
  , lwiArn
  , lwiErrorCode
  , lwiErrorMessage
  , lwiLastTriggered
  , lwiTags
  ) where

import qualified Network.AWS.CodePipeline.Types.Arn as Types
import qualified Network.AWS.CodePipeline.Types.ErrorCode as Types
import qualified Network.AWS.CodePipeline.Types.ErrorMessage as Types
import qualified Network.AWS.CodePipeline.Types.Tag as Types
import qualified Network.AWS.CodePipeline.Types.WebhookDefinition as Types
import qualified Network.AWS.CodePipeline.Types.WebhookUrl as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | The detail returned for each webhook after listing webhooks, such as the webhook URL, the webhook name, and the webhook ARN.
--
-- /See:/ 'mkListWebhookItem' smart constructor.
data ListWebhookItem = ListWebhookItem'
  { definition :: Types.WebhookDefinition
    -- ^ The detail returned for each webhook, such as the webhook authentication type and filter rules.
  , url :: Types.WebhookUrl
    -- ^ A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.
  , arn :: Core.Maybe Types.Arn
    -- ^ The Amazon Resource Name (ARN) of the webhook.
  , errorCode :: Core.Maybe Types.ErrorCode
    -- ^ The number code of the error.
  , errorMessage :: Core.Maybe Types.ErrorMessage
    -- ^ The text of the error message about the webhook.
  , lastTriggered :: Core.Maybe Core.NominalDiffTime
    -- ^ The date and time a webhook was last successfully triggered, in timestamp format.
  , tags :: Core.Maybe [Types.Tag]
    -- ^ Specifies the tags applied to the webhook.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'ListWebhookItem' value with any optional fields omitted.
mkListWebhookItem
    :: Types.WebhookDefinition -- ^ 'definition'
    -> Types.WebhookUrl -- ^ 'url'
    -> ListWebhookItem
mkListWebhookItem definition url
  = ListWebhookItem'{definition, url, arn = Core.Nothing,
                     errorCode = Core.Nothing, errorMessage = Core.Nothing,
                     lastTriggered = Core.Nothing, tags = Core.Nothing}

-- | The detail returned for each webhook, such as the webhook authentication type and filter rules.
--
-- /Note:/ Consider using 'definition' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwiDefinition :: Lens.Lens' ListWebhookItem Types.WebhookDefinition
lwiDefinition = Lens.field @"definition"
{-# INLINEABLE lwiDefinition #-}
{-# DEPRECATED definition "Use generic-lens or generic-optics with 'definition' instead"  #-}

-- | A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.
--
-- /Note:/ Consider using 'url' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwiUrl :: Lens.Lens' ListWebhookItem Types.WebhookUrl
lwiUrl = Lens.field @"url"
{-# INLINEABLE lwiUrl #-}
{-# DEPRECATED url "Use generic-lens or generic-optics with 'url' instead"  #-}

-- | The Amazon Resource Name (ARN) of the webhook.
--
-- /Note:/ Consider using 'arn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwiArn :: Lens.Lens' ListWebhookItem (Core.Maybe Types.Arn)
lwiArn = Lens.field @"arn"
{-# INLINEABLE lwiArn #-}
{-# DEPRECATED arn "Use generic-lens or generic-optics with 'arn' instead"  #-}

-- | The number code of the error.
--
-- /Note:/ Consider using 'errorCode' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwiErrorCode :: Lens.Lens' ListWebhookItem (Core.Maybe Types.ErrorCode)
lwiErrorCode = Lens.field @"errorCode"
{-# INLINEABLE lwiErrorCode #-}
{-# DEPRECATED errorCode "Use generic-lens or generic-optics with 'errorCode' instead"  #-}

-- | The text of the error message about the webhook.
--
-- /Note:/ Consider using 'errorMessage' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwiErrorMessage :: Lens.Lens' ListWebhookItem (Core.Maybe Types.ErrorMessage)
lwiErrorMessage = Lens.field @"errorMessage"
{-# INLINEABLE lwiErrorMessage #-}
{-# DEPRECATED errorMessage "Use generic-lens or generic-optics with 'errorMessage' instead"  #-}

-- | The date and time a webhook was last successfully triggered, in timestamp format.
--
-- /Note:/ Consider using 'lastTriggered' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwiLastTriggered :: Lens.Lens' ListWebhookItem (Core.Maybe Core.NominalDiffTime)
lwiLastTriggered = Lens.field @"lastTriggered"
{-# INLINEABLE lwiLastTriggered #-}
{-# DEPRECATED lastTriggered "Use generic-lens or generic-optics with 'lastTriggered' instead"  #-}

-- | Specifies the tags applied to the webhook.
--
-- /Note:/ Consider using 'tags' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwiTags :: Lens.Lens' ListWebhookItem (Core.Maybe [Types.Tag])
lwiTags = Lens.field @"tags"
{-# INLINEABLE lwiTags #-}
{-# DEPRECATED tags "Use generic-lens or generic-optics with 'tags' instead"  #-}

instance Core.FromJSON ListWebhookItem where
        parseJSON
          = Core.withObject "ListWebhookItem" Core.$
              \ x ->
                ListWebhookItem' Core.<$>
                  (x Core..: "definition") Core.<*> x Core..: "url" Core.<*>
                    x Core..:? "arn"
                    Core.<*> x Core..:? "errorCode"
                    Core.<*> x Core..:? "errorMessage"
                    Core.<*> x Core..:? "lastTriggered"
                    Core.<*> x Core..:? "tags"
