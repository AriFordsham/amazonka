{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CodePipeline.PutWebhook
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Defines a webhook and returns a unique webhook URL generated by CodePipeline. This URL can be supplied to third party source hosting providers to call every time there's a code change. When CodePipeline receives a POST request on this URL, the pipeline defined in the webhook is started as long as the POST request satisfied the authentication and filtering requirements supplied when defining the webhook. RegisterWebhookWithThirdParty and DeregisterWebhookWithThirdParty APIs can be used to automatically configure supported third parties to call the generated webhook URL.
module Network.AWS.CodePipeline.PutWebhook
  ( -- * Creating a request
    PutWebhook (..),
    mkPutWebhook,

    -- ** Request lenses
    pwWebhook,
    pwTags,

    -- * Destructuring the response
    PutWebhookResponse (..),
    mkPutWebhookResponse,

    -- ** Response lenses
    pwrsWebhook,
    pwrsResponseStatus,
  )
where

import Network.AWS.CodePipeline.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkPutWebhook' smart constructor.
data PutWebhook = PutWebhook'
  { -- | The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.
    webhook :: WebhookDefinition,
    -- | The tags for the webhook.
    tags :: Lude.Maybe [Tag]
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutWebhook' with the minimum fields required to make a request.
--
-- * 'webhook' - The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.
-- * 'tags' - The tags for the webhook.
mkPutWebhook ::
  -- | 'webhook'
  WebhookDefinition ->
  PutWebhook
mkPutWebhook pWebhook_ =
  PutWebhook' {webhook = pWebhook_, tags = Lude.Nothing}

-- | The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.
--
-- /Note:/ Consider using 'webhook' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pwWebhook :: Lens.Lens' PutWebhook WebhookDefinition
pwWebhook = Lens.lens (webhook :: PutWebhook -> WebhookDefinition) (\s a -> s {webhook = a} :: PutWebhook)
{-# DEPRECATED pwWebhook "Use generic-lens or generic-optics with 'webhook' instead." #-}

-- | The tags for the webhook.
--
-- /Note:/ Consider using 'tags' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pwTags :: Lens.Lens' PutWebhook (Lude.Maybe [Tag])
pwTags = Lens.lens (tags :: PutWebhook -> Lude.Maybe [Tag]) (\s a -> s {tags = a} :: PutWebhook)
{-# DEPRECATED pwTags "Use generic-lens or generic-optics with 'tags' instead." #-}

instance Lude.AWSRequest PutWebhook where
  type Rs PutWebhook = PutWebhookResponse
  request = Req.postJSON codePipelineService
  response =
    Res.receiveJSON
      ( \s h x ->
          PutWebhookResponse'
            Lude.<$> (x Lude..?> "webhook") Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders PutWebhook where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("CodePipeline_20150709.PutWebhook" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON PutWebhook where
  toJSON PutWebhook' {..} =
    Lude.object
      ( Lude.catMaybes
          [ Lude.Just ("webhook" Lude..= webhook),
            ("tags" Lude..=) Lude.<$> tags
          ]
      )

instance Lude.ToPath PutWebhook where
  toPath = Lude.const "/"

instance Lude.ToQuery PutWebhook where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkPutWebhookResponse' smart constructor.
data PutWebhookResponse = PutWebhookResponse'
  { -- | The detail returned from creating the webhook, such as the webhook name, webhook URL, and webhook ARN.
    webhook :: Lude.Maybe ListWebhookItem,
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutWebhookResponse' with the minimum fields required to make a request.
--
-- * 'webhook' - The detail returned from creating the webhook, such as the webhook name, webhook URL, and webhook ARN.
-- * 'responseStatus' - The response status code.
mkPutWebhookResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  PutWebhookResponse
mkPutWebhookResponse pResponseStatus_ =
  PutWebhookResponse'
    { webhook = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | The detail returned from creating the webhook, such as the webhook name, webhook URL, and webhook ARN.
--
-- /Note:/ Consider using 'webhook' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pwrsWebhook :: Lens.Lens' PutWebhookResponse (Lude.Maybe ListWebhookItem)
pwrsWebhook = Lens.lens (webhook :: PutWebhookResponse -> Lude.Maybe ListWebhookItem) (\s a -> s {webhook = a} :: PutWebhookResponse)
{-# DEPRECATED pwrsWebhook "Use generic-lens or generic-optics with 'webhook' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pwrsResponseStatus :: Lens.Lens' PutWebhookResponse Lude.Int
pwrsResponseStatus = Lens.lens (responseStatus :: PutWebhookResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: PutWebhookResponse)
{-# DEPRECATED pwrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
