{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CodePipeline.PutWebhook
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Defines a webhook and returns a unique webhook URL generated by CodePipeline. This URL can be supplied to third party source hosting providers to call every time there's a code change. When CodePipeline receives a POST request on this URL, the pipeline defined in the webhook is started as long as the POST request satisfied the authentication and filtering requirements supplied when defining the webhook. RegisterWebhookWithThirdParty and DeregisterWebhookWithThirdParty APIs can be used to automatically configure supported third parties to call the generated webhook URL.
module Network.AWS.CodePipeline.PutWebhook
    (
    -- * Creating a request
      PutWebhook (..)
    , mkPutWebhook
    -- ** Request lenses
    , pwWebhook
    , pwTags

    -- * Destructuring the response
    , PutWebhookResponse (..)
    , mkPutWebhookResponse
    -- ** Response lenses
    , pwrrsWebhook
    , pwrrsResponseStatus
    ) where

import qualified Network.AWS.CodePipeline.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkPutWebhook' smart constructor.
data PutWebhook = PutWebhook'
  { webhook :: Types.WebhookDefinition
    -- ^ The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.
  , tags :: Core.Maybe [Types.Tag]
    -- ^ The tags for the webhook.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'PutWebhook' value with any optional fields omitted.
mkPutWebhook
    :: Types.WebhookDefinition -- ^ 'webhook'
    -> PutWebhook
mkPutWebhook webhook = PutWebhook'{webhook, tags = Core.Nothing}

-- | The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.
--
-- /Note:/ Consider using 'webhook' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pwWebhook :: Lens.Lens' PutWebhook Types.WebhookDefinition
pwWebhook = Lens.field @"webhook"
{-# INLINEABLE pwWebhook #-}
{-# DEPRECATED webhook "Use generic-lens or generic-optics with 'webhook' instead"  #-}

-- | The tags for the webhook.
--
-- /Note:/ Consider using 'tags' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pwTags :: Lens.Lens' PutWebhook (Core.Maybe [Types.Tag])
pwTags = Lens.field @"tags"
{-# INLINEABLE pwTags #-}
{-# DEPRECATED tags "Use generic-lens or generic-optics with 'tags' instead"  #-}

instance Core.ToQuery PutWebhook where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders PutWebhook where
        toHeaders PutWebhook{..}
          = Core.pure ("X-Amz-Target", "CodePipeline_20150709.PutWebhook")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON PutWebhook where
        toJSON PutWebhook{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just ("webhook" Core..= webhook),
                  ("tags" Core..=) Core.<$> tags])

instance Core.AWSRequest PutWebhook where
        type Rs PutWebhook = PutWebhookResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 PutWebhookResponse' Core.<$>
                   (x Core..:? "webhook") Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkPutWebhookResponse' smart constructor.
data PutWebhookResponse = PutWebhookResponse'
  { webhook :: Core.Maybe Types.ListWebhookItem
    -- ^ The detail returned from creating the webhook, such as the webhook name, webhook URL, and webhook ARN.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'PutWebhookResponse' value with any optional fields omitted.
mkPutWebhookResponse
    :: Core.Int -- ^ 'responseStatus'
    -> PutWebhookResponse
mkPutWebhookResponse responseStatus
  = PutWebhookResponse'{webhook = Core.Nothing, responseStatus}

-- | The detail returned from creating the webhook, such as the webhook name, webhook URL, and webhook ARN.
--
-- /Note:/ Consider using 'webhook' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pwrrsWebhook :: Lens.Lens' PutWebhookResponse (Core.Maybe Types.ListWebhookItem)
pwrrsWebhook = Lens.field @"webhook"
{-# INLINEABLE pwrrsWebhook #-}
{-# DEPRECATED webhook "Use generic-lens or generic-optics with 'webhook' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pwrrsResponseStatus :: Lens.Lens' PutWebhookResponse Core.Int
pwrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE pwrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
