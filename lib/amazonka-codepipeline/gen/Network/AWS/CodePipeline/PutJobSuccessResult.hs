{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CodePipeline.PutJobSuccessResult
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Represents the success of a job as returned to the pipeline by a job worker. Used for custom actions only.
module Network.AWS.CodePipeline.PutJobSuccessResult
  ( -- * Creating a request
    PutJobSuccessResult (..),
    mkPutJobSuccessResult,

    -- ** Request lenses
    pjsrJobId,
    pjsrContinuationToken,
    pjsrCurrentRevision,
    pjsrExecutionDetails,
    pjsrOutputVariables,

    -- * Destructuring the response
    PutJobSuccessResultResponse (..),
    mkPutJobSuccessResultResponse,
  )
where

import qualified Network.AWS.CodePipeline.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | Represents the input of a @PutJobSuccessResult@ action.
--
-- /See:/ 'mkPutJobSuccessResult' smart constructor.
data PutJobSuccessResult = PutJobSuccessResult'
  { -- | The unique system-generated ID of the job that succeeded. This is the same ID returned from @PollForJobs@ .
    jobId :: Types.JobId,
    -- | A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.
    continuationToken :: Core.Maybe Types.ContinuationToken,
    -- | The ID of the current revision of the artifact successfully worked on by the job.
    currentRevision :: Core.Maybe Types.CurrentRevision,
    -- | The execution details of the successful job, such as the actions taken by the job worker.
    executionDetails :: Core.Maybe Types.ExecutionDetails,
    -- | Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. @outputVariables@ can be included only when there is no continuation token on the request.
    outputVariables :: Core.Maybe (Core.HashMap Types.OutputVariablesKey Types.OutputVariablesValue)
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'PutJobSuccessResult' value with any optional fields omitted.
mkPutJobSuccessResult ::
  -- | 'jobId'
  Types.JobId ->
  PutJobSuccessResult
mkPutJobSuccessResult jobId =
  PutJobSuccessResult'
    { jobId,
      continuationToken = Core.Nothing,
      currentRevision = Core.Nothing,
      executionDetails = Core.Nothing,
      outputVariables = Core.Nothing
    }

-- | The unique system-generated ID of the job that succeeded. This is the same ID returned from @PollForJobs@ .
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrJobId :: Lens.Lens' PutJobSuccessResult Types.JobId
pjsrJobId = Lens.field @"jobId"
{-# DEPRECATED pjsrJobId "Use generic-lens or generic-optics with 'jobId' instead." #-}

-- | A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.
--
-- /Note:/ Consider using 'continuationToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrContinuationToken :: Lens.Lens' PutJobSuccessResult (Core.Maybe Types.ContinuationToken)
pjsrContinuationToken = Lens.field @"continuationToken"
{-# DEPRECATED pjsrContinuationToken "Use generic-lens or generic-optics with 'continuationToken' instead." #-}

-- | The ID of the current revision of the artifact successfully worked on by the job.
--
-- /Note:/ Consider using 'currentRevision' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrCurrentRevision :: Lens.Lens' PutJobSuccessResult (Core.Maybe Types.CurrentRevision)
pjsrCurrentRevision = Lens.field @"currentRevision"
{-# DEPRECATED pjsrCurrentRevision "Use generic-lens or generic-optics with 'currentRevision' instead." #-}

-- | The execution details of the successful job, such as the actions taken by the job worker.
--
-- /Note:/ Consider using 'executionDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrExecutionDetails :: Lens.Lens' PutJobSuccessResult (Core.Maybe Types.ExecutionDetails)
pjsrExecutionDetails = Lens.field @"executionDetails"
{-# DEPRECATED pjsrExecutionDetails "Use generic-lens or generic-optics with 'executionDetails' instead." #-}

-- | Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. @outputVariables@ can be included only when there is no continuation token on the request.
--
-- /Note:/ Consider using 'outputVariables' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrOutputVariables :: Lens.Lens' PutJobSuccessResult (Core.Maybe (Core.HashMap Types.OutputVariablesKey Types.OutputVariablesValue))
pjsrOutputVariables = Lens.field @"outputVariables"
{-# DEPRECATED pjsrOutputVariables "Use generic-lens or generic-optics with 'outputVariables' instead." #-}

instance Core.FromJSON PutJobSuccessResult where
  toJSON PutJobSuccessResult {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("jobId" Core..= jobId),
            ("continuationToken" Core..=) Core.<$> continuationToken,
            ("currentRevision" Core..=) Core.<$> currentRevision,
            ("executionDetails" Core..=) Core.<$> executionDetails,
            ("outputVariables" Core..=) Core.<$> outputVariables
          ]
      )

instance Core.AWSRequest PutJobSuccessResult where
  type Rs PutJobSuccessResult = PutJobSuccessResultResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ("X-Amz-Target", "CodePipeline_20150709.PutJobSuccessResult")
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response = Response.receiveNull PutJobSuccessResultResponse'

-- | /See:/ 'mkPutJobSuccessResultResponse' smart constructor.
data PutJobSuccessResultResponse = PutJobSuccessResultResponse'
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'PutJobSuccessResultResponse' value with any optional fields omitted.
mkPutJobSuccessResultResponse ::
  PutJobSuccessResultResponse
mkPutJobSuccessResultResponse = PutJobSuccessResultResponse'
