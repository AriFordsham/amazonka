{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CodePipeline.PutJobSuccessResult
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Represents the success of a job as returned to the pipeline by a job worker. Used for custom actions only.
module Network.AWS.CodePipeline.PutJobSuccessResult
  ( -- * Creating a request
    PutJobSuccessResult (..),
    mkPutJobSuccessResult,

    -- ** Request lenses
    pjsrOutputVariables,
    pjsrContinuationToken,
    pjsrExecutionDetails,
    pjsrCurrentRevision,
    pjsrJobId,

    -- * Destructuring the response
    PutJobSuccessResultResponse (..),
    mkPutJobSuccessResultResponse,
  )
where

import Network.AWS.CodePipeline.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | Represents the input of a @PutJobSuccessResult@ action.
--
-- /See:/ 'mkPutJobSuccessResult' smart constructor.
data PutJobSuccessResult = PutJobSuccessResult'
  { outputVariables ::
      Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text)),
    continuationToken :: Lude.Maybe Lude.Text,
    executionDetails :: Lude.Maybe ExecutionDetails,
    currentRevision :: Lude.Maybe CurrentRevision,
    jobId :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutJobSuccessResult' with the minimum fields required to make a request.
--
-- * 'continuationToken' - A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.
-- * 'currentRevision' - The ID of the current revision of the artifact successfully worked on by the job.
-- * 'executionDetails' - The execution details of the successful job, such as the actions taken by the job worker.
-- * 'jobId' - The unique system-generated ID of the job that succeeded. This is the same ID returned from @PollForJobs@ .
-- * 'outputVariables' - Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. @outputVariables@ can be included only when there is no continuation token on the request.
mkPutJobSuccessResult ::
  -- | 'jobId'
  Lude.Text ->
  PutJobSuccessResult
mkPutJobSuccessResult pJobId_ =
  PutJobSuccessResult'
    { outputVariables = Lude.Nothing,
      continuationToken = Lude.Nothing,
      executionDetails = Lude.Nothing,
      currentRevision = Lude.Nothing,
      jobId = pJobId_
    }

-- | Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. @outputVariables@ can be included only when there is no continuation token on the request.
--
-- /Note:/ Consider using 'outputVariables' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrOutputVariables :: Lens.Lens' PutJobSuccessResult (Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text)))
pjsrOutputVariables = Lens.lens (outputVariables :: PutJobSuccessResult -> Lude.Maybe (Lude.HashMap Lude.Text (Lude.Text))) (\s a -> s {outputVariables = a} :: PutJobSuccessResult)
{-# DEPRECATED pjsrOutputVariables "Use generic-lens or generic-optics with 'outputVariables' instead." #-}

-- | A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.
--
-- /Note:/ Consider using 'continuationToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrContinuationToken :: Lens.Lens' PutJobSuccessResult (Lude.Maybe Lude.Text)
pjsrContinuationToken = Lens.lens (continuationToken :: PutJobSuccessResult -> Lude.Maybe Lude.Text) (\s a -> s {continuationToken = a} :: PutJobSuccessResult)
{-# DEPRECATED pjsrContinuationToken "Use generic-lens or generic-optics with 'continuationToken' instead." #-}

-- | The execution details of the successful job, such as the actions taken by the job worker.
--
-- /Note:/ Consider using 'executionDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrExecutionDetails :: Lens.Lens' PutJobSuccessResult (Lude.Maybe ExecutionDetails)
pjsrExecutionDetails = Lens.lens (executionDetails :: PutJobSuccessResult -> Lude.Maybe ExecutionDetails) (\s a -> s {executionDetails = a} :: PutJobSuccessResult)
{-# DEPRECATED pjsrExecutionDetails "Use generic-lens or generic-optics with 'executionDetails' instead." #-}

-- | The ID of the current revision of the artifact successfully worked on by the job.
--
-- /Note:/ Consider using 'currentRevision' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrCurrentRevision :: Lens.Lens' PutJobSuccessResult (Lude.Maybe CurrentRevision)
pjsrCurrentRevision = Lens.lens (currentRevision :: PutJobSuccessResult -> Lude.Maybe CurrentRevision) (\s a -> s {currentRevision = a} :: PutJobSuccessResult)
{-# DEPRECATED pjsrCurrentRevision "Use generic-lens or generic-optics with 'currentRevision' instead." #-}

-- | The unique system-generated ID of the job that succeeded. This is the same ID returned from @PollForJobs@ .
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
pjsrJobId :: Lens.Lens' PutJobSuccessResult Lude.Text
pjsrJobId = Lens.lens (jobId :: PutJobSuccessResult -> Lude.Text) (\s a -> s {jobId = a} :: PutJobSuccessResult)
{-# DEPRECATED pjsrJobId "Use generic-lens or generic-optics with 'jobId' instead." #-}

instance Lude.AWSRequest PutJobSuccessResult where
  type Rs PutJobSuccessResult = PutJobSuccessResultResponse
  request = Req.postJSON codePipelineService
  response = Res.receiveNull PutJobSuccessResultResponse'

instance Lude.ToHeaders PutJobSuccessResult where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("CodePipeline_20150709.PutJobSuccessResult" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON PutJobSuccessResult where
  toJSON PutJobSuccessResult' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("outputVariables" Lude..=) Lude.<$> outputVariables,
            ("continuationToken" Lude..=) Lude.<$> continuationToken,
            ("executionDetails" Lude..=) Lude.<$> executionDetails,
            ("currentRevision" Lude..=) Lude.<$> currentRevision,
            Lude.Just ("jobId" Lude..= jobId)
          ]
      )

instance Lude.ToPath PutJobSuccessResult where
  toPath = Lude.const "/"

instance Lude.ToQuery PutJobSuccessResult where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkPutJobSuccessResultResponse' smart constructor.
data PutJobSuccessResultResponse = PutJobSuccessResultResponse'
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'PutJobSuccessResultResponse' with the minimum fields required to make a request.
mkPutJobSuccessResultResponse ::
  PutJobSuccessResultResponse
mkPutJobSuccessResultResponse = PutJobSuccessResultResponse'
