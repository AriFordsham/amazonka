{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.AlexaBusiness.RegisterAVSDevice
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Registers an Alexa-enabled device built by an Original Equipment Manufacturer (OEM) using Alexa Voice Service (AVS).
module Network.AWS.AlexaBusiness.RegisterAVSDevice
    (
    -- * Creating a request
      RegisterAVSDevice (..)
    , mkRegisterAVSDevice
    -- ** Request lenses
    , ravsdClientId
    , ravsdUserCode
    , ravsdProductId
    , ravsdAmazonId
    , ravsdDeviceSerialNumber
    , ravsdRoomArn

    -- * Destructuring the response
    , RegisterAVSDeviceResponse (..)
    , mkRegisterAVSDeviceResponse
    -- ** Response lenses
    , ravsdrrsDeviceArn
    , ravsdrrsResponseStatus
    ) where

import qualified Network.AWS.AlexaBusiness.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkRegisterAVSDevice' smart constructor.
data RegisterAVSDevice = RegisterAVSDevice'
  { clientId :: Types.ClientId
    -- ^ The client ID of the OEM used for code-based linking authorization on an AVS device.
  , userCode :: Types.UserCode
    -- ^ The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.
  , productId :: Types.ProductId
    -- ^ The product ID used to identify your AVS device during authorization.
  , amazonId :: Types.AmazonId
    -- ^ The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.
  , deviceSerialNumber :: Core.Maybe Types.DeviceSerialNumberForAVS
    -- ^ The key generated by the OEM that uniquely identifies a specified instance of your AVS device.
  , roomArn :: Core.Maybe Types.RoomArn
    -- ^ The ARN of the room with which to associate your AVS device.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'RegisterAVSDevice' value with any optional fields omitted.
mkRegisterAVSDevice
    :: Types.ClientId -- ^ 'clientId'
    -> Types.UserCode -- ^ 'userCode'
    -> Types.ProductId -- ^ 'productId'
    -> Types.AmazonId -- ^ 'amazonId'
    -> RegisterAVSDevice
mkRegisterAVSDevice clientId userCode productId amazonId
  = RegisterAVSDevice'{clientId, userCode, productId, amazonId,
                       deviceSerialNumber = Core.Nothing, roomArn = Core.Nothing}

-- | The client ID of the OEM used for code-based linking authorization on an AVS device.
--
-- /Note:/ Consider using 'clientId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ravsdClientId :: Lens.Lens' RegisterAVSDevice Types.ClientId
ravsdClientId = Lens.field @"clientId"
{-# INLINEABLE ravsdClientId #-}
{-# DEPRECATED clientId "Use generic-lens or generic-optics with 'clientId' instead"  #-}

-- | The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.
--
-- /Note:/ Consider using 'userCode' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ravsdUserCode :: Lens.Lens' RegisterAVSDevice Types.UserCode
ravsdUserCode = Lens.field @"userCode"
{-# INLINEABLE ravsdUserCode #-}
{-# DEPRECATED userCode "Use generic-lens or generic-optics with 'userCode' instead"  #-}

-- | The product ID used to identify your AVS device during authorization.
--
-- /Note:/ Consider using 'productId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ravsdProductId :: Lens.Lens' RegisterAVSDevice Types.ProductId
ravsdProductId = Lens.field @"productId"
{-# INLINEABLE ravsdProductId #-}
{-# DEPRECATED productId "Use generic-lens or generic-optics with 'productId' instead"  #-}

-- | The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.
--
-- /Note:/ Consider using 'amazonId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ravsdAmazonId :: Lens.Lens' RegisterAVSDevice Types.AmazonId
ravsdAmazonId = Lens.field @"amazonId"
{-# INLINEABLE ravsdAmazonId #-}
{-# DEPRECATED amazonId "Use generic-lens or generic-optics with 'amazonId' instead"  #-}

-- | The key generated by the OEM that uniquely identifies a specified instance of your AVS device.
--
-- /Note:/ Consider using 'deviceSerialNumber' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ravsdDeviceSerialNumber :: Lens.Lens' RegisterAVSDevice (Core.Maybe Types.DeviceSerialNumberForAVS)
ravsdDeviceSerialNumber = Lens.field @"deviceSerialNumber"
{-# INLINEABLE ravsdDeviceSerialNumber #-}
{-# DEPRECATED deviceSerialNumber "Use generic-lens or generic-optics with 'deviceSerialNumber' instead"  #-}

-- | The ARN of the room with which to associate your AVS device.
--
-- /Note:/ Consider using 'roomArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ravsdRoomArn :: Lens.Lens' RegisterAVSDevice (Core.Maybe Types.RoomArn)
ravsdRoomArn = Lens.field @"roomArn"
{-# INLINEABLE ravsdRoomArn #-}
{-# DEPRECATED roomArn "Use generic-lens or generic-optics with 'roomArn' instead"  #-}

instance Core.ToQuery RegisterAVSDevice where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders RegisterAVSDevice where
        toHeaders RegisterAVSDevice{..}
          = Core.pure ("X-Amz-Target", "AlexaForBusiness.RegisterAVSDevice")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON RegisterAVSDevice where
        toJSON RegisterAVSDevice{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just ("ClientId" Core..= clientId),
                  Core.Just ("UserCode" Core..= userCode),
                  Core.Just ("ProductId" Core..= productId),
                  Core.Just ("AmazonId" Core..= amazonId),
                  ("DeviceSerialNumber" Core..=) Core.<$> deviceSerialNumber,
                  ("RoomArn" Core..=) Core.<$> roomArn])

instance Core.AWSRequest RegisterAVSDevice where
        type Rs RegisterAVSDevice = RegisterAVSDeviceResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 RegisterAVSDeviceResponse' Core.<$>
                   (x Core..:? "DeviceArn") Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkRegisterAVSDeviceResponse' smart constructor.
data RegisterAVSDeviceResponse = RegisterAVSDeviceResponse'
  { deviceArn :: Core.Maybe Types.Arn
    -- ^ The ARN of the device.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'RegisterAVSDeviceResponse' value with any optional fields omitted.
mkRegisterAVSDeviceResponse
    :: Core.Int -- ^ 'responseStatus'
    -> RegisterAVSDeviceResponse
mkRegisterAVSDeviceResponse responseStatus
  = RegisterAVSDeviceResponse'{deviceArn = Core.Nothing,
                               responseStatus}

-- | The ARN of the device.
--
-- /Note:/ Consider using 'deviceArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ravsdrrsDeviceArn :: Lens.Lens' RegisterAVSDeviceResponse (Core.Maybe Types.Arn)
ravsdrrsDeviceArn = Lens.field @"deviceArn"
{-# INLINEABLE ravsdrrsDeviceArn #-}
{-# DEPRECATED deviceArn "Use generic-lens or generic-optics with 'deviceArn' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ravsdrrsResponseStatus :: Lens.Lens' RegisterAVSDeviceResponse Core.Int
ravsdrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE ravsdrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
