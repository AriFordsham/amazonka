{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Lightsail.GetLoadBalancerMetricData
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns information about health metrics for your Lightsail load balancer.
--
-- Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.
module Network.AWS.Lightsail.GetLoadBalancerMetricData
  ( -- * Creating a request
    GetLoadBalancerMetricData (..),
    mkGetLoadBalancerMetricData,

    -- ** Request lenses
    glbmdLoadBalancerName,
    glbmdMetricName,
    glbmdPeriod,
    glbmdStartTime,
    glbmdEndTime,
    glbmdUnit,
    glbmdStatistics,

    -- * Destructuring the response
    GetLoadBalancerMetricDataResponse (..),
    mkGetLoadBalancerMetricDataResponse,

    -- ** Response lenses
    glbmdrrsMetricData,
    glbmdrrsMetricName,
    glbmdrrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Lightsail.Types as Types
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkGetLoadBalancerMetricData' smart constructor.
data GetLoadBalancerMetricData = GetLoadBalancerMetricData'
  { -- | The name of the load balancer.
    loadBalancerName :: Types.ResourceName,
    -- | The metric for which you want to return information.
    --
    -- Valid load balancer metric names are listed below, along with the most useful @statistics@ to include in your request, and the published @unit@ value.
    --
    --     * __@ClientTLSNegotiationErrorCount@ __ - The number of TLS connections initiated by the client that did not establish a session with the load balancer due to a TLS error generated by the load balancer. Possible causes include a mismatch of ciphers or protocols.
    -- @Statistics@ : The most useful statistic is @Sum@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@HealthyHostCount@ __ - The number of target instances that are considered healthy.
    -- @Statistics@ : The most useful statistic are @Average@ , @Minimum@ , and @Maximum@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@HTTPCode_Instance_2XX_Count@ __ - The number of HTTP 2XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.
    -- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@HTTPCode_Instance_3XX_Count@ __ - The number of HTTP 3XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.
    -- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@HTTPCode_Instance_4XX_Count@ __ - The number of HTTP 4XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.
    -- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@HTTPCode_Instance_5XX_Count@ __ - The number of HTTP 5XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.
    -- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@HTTPCode_LB_4XX_Count@ __ - The number of HTTP 4XX client error codes that originated from the load balancer. Client errors are generated when requests are malformed or incomplete. These requests were not received by the target instance. This count does not include response codes generated by the target instances.
    -- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@HTTPCode_LB_5XX_Count@ __ - The number of HTTP 5XX server error codes that originated from the load balancer. This does not include any response codes generated by the target instance. This metric is reported if there are no healthy instances attached to the load balancer, or if the request rate exceeds the capacity of the instances (spillover) or the load balancer.
    -- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@InstanceResponseTime@ __ - The time elapsed, in seconds, after the request leaves the load balancer until a response from the target instance is received.
    -- @Statistics@ : The most useful statistic is @Average@ .
    -- @Unit@ : The published unit is @Seconds@ .
    --
    --
    --     * __@RejectedConnectionCount@ __ - The number of connections that were rejected because the load balancer had reached its maximum number of connections.
    -- @Statistics@ : The most useful statistic is @Sum@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@RequestCount@ __ - The number of requests processed over IPv4. This count includes only the requests with a response generated by a target instance of the load balancer.
    -- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
    -- @Unit@ : The published unit is @Count@ .
    --
    --
    --     * __@UnhealthyHostCount@ __ - The number of target instances that are considered unhealthy.
    -- @Statistics@ : The most useful statistic are @Average@ , @Minimum@ , and @Maximum@ .
    -- @Unit@ : The published unit is @Count@ .
    metricName :: Types.LoadBalancerMetricName,
    -- | The granularity, in seconds, of the returned data points.
    period :: Core.Natural,
    -- | The start time of the period.
    startTime :: Core.NominalDiffTime,
    -- | The end time of the period.
    endTime :: Core.NominalDiffTime,
    -- | The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the @metricName@ parameter.
    unit :: Types.MetricUnit,
    -- | The statistic for the metric.
    --
    -- The following statistics are available:
    --
    --     * @Minimum@ - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
    --
    --
    --     * @Maximum@ - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
    --
    --
    --     * @Sum@ - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
    --
    --
    --     * @Average@ - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
    --
    --
    --     * @SampleCount@ - The count, or number, of data points used for the statistical calculation.
    statistics :: [Types.MetricStatistic]
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'GetLoadBalancerMetricData' value with any optional fields omitted.
mkGetLoadBalancerMetricData ::
  -- | 'loadBalancerName'
  Types.ResourceName ->
  -- | 'metricName'
  Types.LoadBalancerMetricName ->
  -- | 'period'
  Core.Natural ->
  -- | 'startTime'
  Core.NominalDiffTime ->
  -- | 'endTime'
  Core.NominalDiffTime ->
  -- | 'unit'
  Types.MetricUnit ->
  GetLoadBalancerMetricData
mkGetLoadBalancerMetricData
  loadBalancerName
  metricName
  period
  startTime
  endTime
  unit =
    GetLoadBalancerMetricData'
      { loadBalancerName,
        metricName,
        period,
        startTime,
        endTime,
        unit,
        statistics = Core.mempty
      }

-- | The name of the load balancer.
--
-- /Note:/ Consider using 'loadBalancerName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdLoadBalancerName :: Lens.Lens' GetLoadBalancerMetricData Types.ResourceName
glbmdLoadBalancerName = Lens.field @"loadBalancerName"
{-# DEPRECATED glbmdLoadBalancerName "Use generic-lens or generic-optics with 'loadBalancerName' instead." #-}

-- | The metric for which you want to return information.
--
-- Valid load balancer metric names are listed below, along with the most useful @statistics@ to include in your request, and the published @unit@ value.
--
--     * __@ClientTLSNegotiationErrorCount@ __ - The number of TLS connections initiated by the client that did not establish a session with the load balancer due to a TLS error generated by the load balancer. Possible causes include a mismatch of ciphers or protocols.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@HealthyHostCount@ __ - The number of target instances that are considered healthy.
-- @Statistics@ : The most useful statistic are @Average@ , @Minimum@ , and @Maximum@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@HTTPCode_Instance_2XX_Count@ __ - The number of HTTP 2XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.
-- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@HTTPCode_Instance_3XX_Count@ __ - The number of HTTP 3XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.
-- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@HTTPCode_Instance_4XX_Count@ __ - The number of HTTP 4XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.
-- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@HTTPCode_Instance_5XX_Count@ __ - The number of HTTP 5XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.
-- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@HTTPCode_LB_4XX_Count@ __ - The number of HTTP 4XX client error codes that originated from the load balancer. Client errors are generated when requests are malformed or incomplete. These requests were not received by the target instance. This count does not include response codes generated by the target instances.
-- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@HTTPCode_LB_5XX_Count@ __ - The number of HTTP 5XX server error codes that originated from the load balancer. This does not include any response codes generated by the target instance. This metric is reported if there are no healthy instances attached to the load balancer, or if the request rate exceeds the capacity of the instances (spillover) or the load balancer.
-- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@InstanceResponseTime@ __ - The time elapsed, in seconds, after the request leaves the load balancer until a response from the target instance is received.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Seconds@ .
--
--
--     * __@RejectedConnectionCount@ __ - The number of connections that were rejected because the load balancer had reached its maximum number of connections.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@RequestCount@ __ - The number of requests processed over IPv4. This count includes only the requests with a response generated by a target instance of the load balancer.
-- @Statistics@ : The most useful statistic is @Sum@ . Note that @Minimum@ , @Maximum@ , and @Average@ all return @1@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@UnhealthyHostCount@ __ - The number of target instances that are considered unhealthy.
-- @Statistics@ : The most useful statistic are @Average@ , @Minimum@ , and @Maximum@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--
-- /Note:/ Consider using 'metricName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdMetricName :: Lens.Lens' GetLoadBalancerMetricData Types.LoadBalancerMetricName
glbmdMetricName = Lens.field @"metricName"
{-# DEPRECATED glbmdMetricName "Use generic-lens or generic-optics with 'metricName' instead." #-}

-- | The granularity, in seconds, of the returned data points.
--
-- /Note:/ Consider using 'period' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdPeriod :: Lens.Lens' GetLoadBalancerMetricData Core.Natural
glbmdPeriod = Lens.field @"period"
{-# DEPRECATED glbmdPeriod "Use generic-lens or generic-optics with 'period' instead." #-}

-- | The start time of the period.
--
-- /Note:/ Consider using 'startTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdStartTime :: Lens.Lens' GetLoadBalancerMetricData Core.NominalDiffTime
glbmdStartTime = Lens.field @"startTime"
{-# DEPRECATED glbmdStartTime "Use generic-lens or generic-optics with 'startTime' instead." #-}

-- | The end time of the period.
--
-- /Note:/ Consider using 'endTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdEndTime :: Lens.Lens' GetLoadBalancerMetricData Core.NominalDiffTime
glbmdEndTime = Lens.field @"endTime"
{-# DEPRECATED glbmdEndTime "Use generic-lens or generic-optics with 'endTime' instead." #-}

-- | The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the @metricName@ parameter.
--
-- /Note:/ Consider using 'unit' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdUnit :: Lens.Lens' GetLoadBalancerMetricData Types.MetricUnit
glbmdUnit = Lens.field @"unit"
{-# DEPRECATED glbmdUnit "Use generic-lens or generic-optics with 'unit' instead." #-}

-- | The statistic for the metric.
--
-- The following statistics are available:
--
--     * @Minimum@ - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
--
--
--     * @Maximum@ - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
--
--
--     * @Sum@ - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
--
--
--     * @Average@ - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
--
--
--     * @SampleCount@ - The count, or number, of data points used for the statistical calculation.
--
--
--
-- /Note:/ Consider using 'statistics' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdStatistics :: Lens.Lens' GetLoadBalancerMetricData [Types.MetricStatistic]
glbmdStatistics = Lens.field @"statistics"
{-# DEPRECATED glbmdStatistics "Use generic-lens or generic-optics with 'statistics' instead." #-}

instance Core.FromJSON GetLoadBalancerMetricData where
  toJSON GetLoadBalancerMetricData {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("loadBalancerName" Core..= loadBalancerName),
            Core.Just ("metricName" Core..= metricName),
            Core.Just ("period" Core..= period),
            Core.Just ("startTime" Core..= startTime),
            Core.Just ("endTime" Core..= endTime),
            Core.Just ("unit" Core..= unit),
            Core.Just ("statistics" Core..= statistics)
          ]
      )

instance Core.AWSRequest GetLoadBalancerMetricData where
  type
    Rs GetLoadBalancerMetricData =
      GetLoadBalancerMetricDataResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ("X-Amz-Target", "Lightsail_20161128.GetLoadBalancerMetricData")
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          GetLoadBalancerMetricDataResponse'
            Core.<$> (x Core..:? "metricData")
            Core.<*> (x Core..:? "metricName")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkGetLoadBalancerMetricDataResponse' smart constructor.
data GetLoadBalancerMetricDataResponse = GetLoadBalancerMetricDataResponse'
  { -- | An array of objects that describe the metric data returned.
    metricData :: Core.Maybe [Types.MetricDatapoint],
    -- | The name of the metric returned.
    metricName :: Core.Maybe Types.LoadBalancerMetricName,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'GetLoadBalancerMetricDataResponse' value with any optional fields omitted.
mkGetLoadBalancerMetricDataResponse ::
  -- | 'responseStatus'
  Core.Int ->
  GetLoadBalancerMetricDataResponse
mkGetLoadBalancerMetricDataResponse responseStatus =
  GetLoadBalancerMetricDataResponse'
    { metricData = Core.Nothing,
      metricName = Core.Nothing,
      responseStatus
    }

-- | An array of objects that describe the metric data returned.
--
-- /Note:/ Consider using 'metricData' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdrrsMetricData :: Lens.Lens' GetLoadBalancerMetricDataResponse (Core.Maybe [Types.MetricDatapoint])
glbmdrrsMetricData = Lens.field @"metricData"
{-# DEPRECATED glbmdrrsMetricData "Use generic-lens or generic-optics with 'metricData' instead." #-}

-- | The name of the metric returned.
--
-- /Note:/ Consider using 'metricName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdrrsMetricName :: Lens.Lens' GetLoadBalancerMetricDataResponse (Core.Maybe Types.LoadBalancerMetricName)
glbmdrrsMetricName = Lens.field @"metricName"
{-# DEPRECATED glbmdrrsMetricName "Use generic-lens or generic-optics with 'metricName' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
glbmdrrsResponseStatus :: Lens.Lens' GetLoadBalancerMetricDataResponse Core.Int
glbmdrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED glbmdrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
