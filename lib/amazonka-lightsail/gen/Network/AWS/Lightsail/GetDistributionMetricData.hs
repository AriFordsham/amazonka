{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Lightsail.GetDistributionMetricData
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns the data points of a specific metric for an Amazon Lightsail content delivery network (CDN) distribution.
--
-- Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.
module Network.AWS.Lightsail.GetDistributionMetricData
    (
    -- * Creating a request
      GetDistributionMetricData (..)
    , mkGetDistributionMetricData
    -- ** Request lenses
    , gdmdDistributionName
    , gdmdMetricName
    , gdmdStartTime
    , gdmdEndTime
    , gdmdPeriod
    , gdmdUnit
    , gdmdStatistics

    -- * Destructuring the response
    , GetDistributionMetricDataResponse (..)
    , mkGetDistributionMetricDataResponse
    -- ** Response lenses
    , gdmdrrsMetricData
    , gdmdrrsMetricName
    , gdmdrrsResponseStatus
    ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Lightsail.Types as Types
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkGetDistributionMetricData' smart constructor.
data GetDistributionMetricData = GetDistributionMetricData'
  { distributionName :: Types.ResourceName
    -- ^ The name of the distribution for which to get metric data.
--
-- Use the @GetDistributions@ action to get a list of distribution names that you can specify.
  , metricName :: Types.DistributionMetricName
    -- ^ The metric for which you want to return information.
--
-- Valid distribution metric names are listed below, along with the most useful @statistics@ to include in your request, and the published @unit@ value.
--
--     * __@Requests@ __ - The total number of viewer requests received by your Lightsail distribution, for all HTTP methods, and for both HTTP and HTTPS requests.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @None@ .
--
--
--     * __@BytesDownloaded@ __ - The number of bytes downloaded by viewers for GET, HEAD, and OPTIONS requests.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @None@ .
--
--
--     * __@BytesUploaded @ __ - The number of bytes uploaded to your origin by your Lightsail distribution, using POST and PUT requests.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @None@ .
--
--
--     * __@TotalErrorRate@ __ - The percentage of all viewer requests for which the response's HTTP status code was 4xx or 5xx.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Percent@ .
--
--
--     * __@4xxErrorRate@ __ - The percentage of all viewer requests for which the response's HTTP status cod was 4xx. In these cases, the client or client viewer may have made an error. For example, a status code of 404 (Not Found) means that the client requested an object that could not be found.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Percent@ .
--
--
--     * __@5xxErrorRate@ __ - The percentage of all viewer requests for which the response's HTTP status code was 5xx. In these cases, the origin server did not satisfy the requests. For example, a status code of 503 (Service Unavailable) means that the origin server is currently unavailable.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Percent@ .
--
--
  , startTime :: Core.NominalDiffTime
    -- ^ The start of the time interval for which to get metric data.
--
-- Constraints:
--
--     * Specified in Coordinated Universal Time (UTC).
--
--
--     * Specified in the Unix time format.
-- For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify @1538424000@ as the start time.
--
--
-- You can convert a human-friendly time to Unix time format using a converter like <https://www.epochconverter.com/ Epoch converter> .
  , endTime :: Core.NominalDiffTime
    -- ^ The end of the time interval for which to get metric data.
--
-- Constraints:
--
--     * Specified in Coordinated Universal Time (UTC).
--
--
--     * Specified in the Unix time format.
-- For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify @1538427600@ as the end time.
--
--
-- You can convert a human-friendly time to Unix time format using a converter like <https://www.epochconverter.com/ Epoch converter> .
  , period :: Core.Natural
    -- ^ The granularity, in seconds, for the metric data points that will be returned.
  , unit :: Types.MetricUnit
    -- ^ The unit for the metric data request.
--
-- Valid units depend on the metric data being requested. For the valid units with each available metric, see the @metricName@ parameter.
  , statistics :: [Types.MetricStatistic]
    -- ^ The statistic for the metric.
--
-- The following statistics are available:
--
--     * @Minimum@ - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
--
--
--     * @Maximum@ - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
--
--
--     * @Sum@ - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
--
--
--     * @Average@ - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
--
--
--     * @SampleCount@ - The count, or number, of data points used for the statistical calculation.
--
--
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'GetDistributionMetricData' value with any optional fields omitted.
mkGetDistributionMetricData
    :: Types.ResourceName -- ^ 'distributionName'
    -> Types.DistributionMetricName -- ^ 'metricName'
    -> Core.NominalDiffTime -- ^ 'startTime'
    -> Core.NominalDiffTime -- ^ 'endTime'
    -> Core.Natural -- ^ 'period'
    -> Types.MetricUnit -- ^ 'unit'
    -> GetDistributionMetricData
mkGetDistributionMetricData distributionName metricName startTime
  endTime period unit
  = GetDistributionMetricData'{distributionName, metricName,
                               startTime, endTime, period, unit, statistics = Core.mempty}

-- | The name of the distribution for which to get metric data.
--
-- Use the @GetDistributions@ action to get a list of distribution names that you can specify.
--
-- /Note:/ Consider using 'distributionName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdDistributionName :: Lens.Lens' GetDistributionMetricData Types.ResourceName
gdmdDistributionName = Lens.field @"distributionName"
{-# INLINEABLE gdmdDistributionName #-}
{-# DEPRECATED distributionName "Use generic-lens or generic-optics with 'distributionName' instead"  #-}

-- | The metric for which you want to return information.
--
-- Valid distribution metric names are listed below, along with the most useful @statistics@ to include in your request, and the published @unit@ value.
--
--     * __@Requests@ __ - The total number of viewer requests received by your Lightsail distribution, for all HTTP methods, and for both HTTP and HTTPS requests.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @None@ .
--
--
--     * __@BytesDownloaded@ __ - The number of bytes downloaded by viewers for GET, HEAD, and OPTIONS requests.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @None@ .
--
--
--     * __@BytesUploaded @ __ - The number of bytes uploaded to your origin by your Lightsail distribution, using POST and PUT requests.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @None@ .
--
--
--     * __@TotalErrorRate@ __ - The percentage of all viewer requests for which the response's HTTP status code was 4xx or 5xx.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Percent@ .
--
--
--     * __@4xxErrorRate@ __ - The percentage of all viewer requests for which the response's HTTP status cod was 4xx. In these cases, the client or client viewer may have made an error. For example, a status code of 404 (Not Found) means that the client requested an object that could not be found.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Percent@ .
--
--
--     * __@5xxErrorRate@ __ - The percentage of all viewer requests for which the response's HTTP status code was 5xx. In these cases, the origin server did not satisfy the requests. For example, a status code of 503 (Service Unavailable) means that the origin server is currently unavailable.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Percent@ .
--
--
--
-- /Note:/ Consider using 'metricName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdMetricName :: Lens.Lens' GetDistributionMetricData Types.DistributionMetricName
gdmdMetricName = Lens.field @"metricName"
{-# INLINEABLE gdmdMetricName #-}
{-# DEPRECATED metricName "Use generic-lens or generic-optics with 'metricName' instead"  #-}

-- | The start of the time interval for which to get metric data.
--
-- Constraints:
--
--     * Specified in Coordinated Universal Time (UTC).
--
--
--     * Specified in the Unix time format.
-- For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify @1538424000@ as the start time.
--
--
-- You can convert a human-friendly time to Unix time format using a converter like <https://www.epochconverter.com/ Epoch converter> .
--
-- /Note:/ Consider using 'startTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdStartTime :: Lens.Lens' GetDistributionMetricData Core.NominalDiffTime
gdmdStartTime = Lens.field @"startTime"
{-# INLINEABLE gdmdStartTime #-}
{-# DEPRECATED startTime "Use generic-lens or generic-optics with 'startTime' instead"  #-}

-- | The end of the time interval for which to get metric data.
--
-- Constraints:
--
--     * Specified in Coordinated Universal Time (UTC).
--
--
--     * Specified in the Unix time format.
-- For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify @1538427600@ as the end time.
--
--
-- You can convert a human-friendly time to Unix time format using a converter like <https://www.epochconverter.com/ Epoch converter> .
--
-- /Note:/ Consider using 'endTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdEndTime :: Lens.Lens' GetDistributionMetricData Core.NominalDiffTime
gdmdEndTime = Lens.field @"endTime"
{-# INLINEABLE gdmdEndTime #-}
{-# DEPRECATED endTime "Use generic-lens or generic-optics with 'endTime' instead"  #-}

-- | The granularity, in seconds, for the metric data points that will be returned.
--
-- /Note:/ Consider using 'period' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdPeriod :: Lens.Lens' GetDistributionMetricData Core.Natural
gdmdPeriod = Lens.field @"period"
{-# INLINEABLE gdmdPeriod #-}
{-# DEPRECATED period "Use generic-lens or generic-optics with 'period' instead"  #-}

-- | The unit for the metric data request.
--
-- Valid units depend on the metric data being requested. For the valid units with each available metric, see the @metricName@ parameter.
--
-- /Note:/ Consider using 'unit' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdUnit :: Lens.Lens' GetDistributionMetricData Types.MetricUnit
gdmdUnit = Lens.field @"unit"
{-# INLINEABLE gdmdUnit #-}
{-# DEPRECATED unit "Use generic-lens or generic-optics with 'unit' instead"  #-}

-- | The statistic for the metric.
--
-- The following statistics are available:
--
--     * @Minimum@ - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
--
--
--     * @Maximum@ - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
--
--
--     * @Sum@ - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
--
--
--     * @Average@ - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
--
--
--     * @SampleCount@ - The count, or number, of data points used for the statistical calculation.
--
--
--
-- /Note:/ Consider using 'statistics' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdStatistics :: Lens.Lens' GetDistributionMetricData [Types.MetricStatistic]
gdmdStatistics = Lens.field @"statistics"
{-# INLINEABLE gdmdStatistics #-}
{-# DEPRECATED statistics "Use generic-lens or generic-optics with 'statistics' instead"  #-}

instance Core.ToQuery GetDistributionMetricData where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders GetDistributionMetricData where
        toHeaders GetDistributionMetricData{..}
          = Core.pure
              ("X-Amz-Target", "Lightsail_20161128.GetDistributionMetricData")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON GetDistributionMetricData where
        toJSON GetDistributionMetricData{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just ("distributionName" Core..= distributionName),
                  Core.Just ("metricName" Core..= metricName),
                  Core.Just ("startTime" Core..= startTime),
                  Core.Just ("endTime" Core..= endTime),
                  Core.Just ("period" Core..= period),
                  Core.Just ("unit" Core..= unit),
                  Core.Just ("statistics" Core..= statistics)])

instance Core.AWSRequest GetDistributionMetricData where
        type Rs GetDistributionMetricData =
             GetDistributionMetricDataResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 GetDistributionMetricDataResponse' Core.<$>
                   (x Core..:? "metricData") Core.<*> x Core..:? "metricName" Core.<*>
                     Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkGetDistributionMetricDataResponse' smart constructor.
data GetDistributionMetricDataResponse = GetDistributionMetricDataResponse'
  { metricData :: Core.Maybe [Types.MetricDatapoint]
    -- ^ An array of objects that describe the metric data returned.
  , metricName :: Core.Maybe Types.DistributionMetricName
    -- ^ The name of the metric returned.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'GetDistributionMetricDataResponse' value with any optional fields omitted.
mkGetDistributionMetricDataResponse
    :: Core.Int -- ^ 'responseStatus'
    -> GetDistributionMetricDataResponse
mkGetDistributionMetricDataResponse responseStatus
  = GetDistributionMetricDataResponse'{metricData = Core.Nothing,
                                       metricName = Core.Nothing, responseStatus}

-- | An array of objects that describe the metric data returned.
--
-- /Note:/ Consider using 'metricData' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdrrsMetricData :: Lens.Lens' GetDistributionMetricDataResponse (Core.Maybe [Types.MetricDatapoint])
gdmdrrsMetricData = Lens.field @"metricData"
{-# INLINEABLE gdmdrrsMetricData #-}
{-# DEPRECATED metricData "Use generic-lens or generic-optics with 'metricData' instead"  #-}

-- | The name of the metric returned.
--
-- /Note:/ Consider using 'metricName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdrrsMetricName :: Lens.Lens' GetDistributionMetricDataResponse (Core.Maybe Types.DistributionMetricName)
gdmdrrsMetricName = Lens.field @"metricName"
{-# INLINEABLE gdmdrrsMetricName #-}
{-# DEPRECATED metricName "Use generic-lens or generic-optics with 'metricName' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gdmdrrsResponseStatus :: Lens.Lens' GetDistributionMetricDataResponse Core.Int
gdmdrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE gdmdrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
