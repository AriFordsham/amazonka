{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Lightsail.GetRelationalDatabaseMetricData
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns the data points of the specified metric for a database in Amazon Lightsail.
--
-- Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.
module Network.AWS.Lightsail.GetRelationalDatabaseMetricData
    (
    -- * Creating a request
      GetRelationalDatabaseMetricData (..)
    , mkGetRelationalDatabaseMetricData
    -- ** Request lenses
    , grdmdRelationalDatabaseName
    , grdmdMetricName
    , grdmdPeriod
    , grdmdStartTime
    , grdmdEndTime
    , grdmdUnit
    , grdmdStatistics

    -- * Destructuring the response
    , GetRelationalDatabaseMetricDataResponse (..)
    , mkGetRelationalDatabaseMetricDataResponse
    -- ** Response lenses
    , grdmdrrsMetricData
    , grdmdrrsMetricName
    , grdmdrrsResponseStatus
    ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Lightsail.Types as Types
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkGetRelationalDatabaseMetricData' smart constructor.
data GetRelationalDatabaseMetricData = GetRelationalDatabaseMetricData'
  { relationalDatabaseName :: Types.ResourceName
    -- ^ The name of your database from which to get metric data.
  , metricName :: Types.RelationalDatabaseMetricName
    -- ^ The metric for which you want to return information.
--
-- Valid relational database metric names are listed below, along with the most useful @statistics@ to include in your request, and the published @unit@ value. All relational database metric data is available in 1-minute (60 seconds) granularity.
--
--     * __@CPUUtilization@ __ - The percentage of CPU utilization currently in use on the database.
-- @Statistics@ : The most useful statistics are @Maximum@ and @Average@ .
-- @Unit@ : The published unit is @Percent@ .
--
--
--     * __@DatabaseConnections@ __ - The number of database connections in use.
-- @Statistics@ : The most useful statistics are @Maximum@ and @Sum@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@DiskQueueDepth@ __ - The number of outstanding IOs (read/write requests) that are waiting to access the disk.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@FreeStorageSpace@ __ - The amount of available storage space.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @Bytes@ .
--
--
--     * __@NetworkReceiveThroughput@ __ - The incoming (Receive) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Bytes/Second@ .
--
--
--     * __@NetworkTransmitThroughput@ __ - The outgoing (Transmit) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Bytes/Second@ .
--
--
  , period :: Core.Natural
    -- ^ The granularity, in seconds, of the returned data points.
--
-- All relational database metric data is available in 1-minute (60 seconds) granularity.
  , startTime :: Core.NominalDiffTime
    -- ^ The start of the time interval from which to get metric data.
--
-- Constraints:
--
--     * Specified in Coordinated Universal Time (UTC).
--
--
--     * Specified in the Unix time format.
-- For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input @1538424000@ as the start time.
--
--
  , endTime :: Core.NominalDiffTime
    -- ^ The end of the time interval from which to get metric data.
--
-- Constraints:
--
--     * Specified in Coordinated Universal Time (UTC).
--
--
--     * Specified in the Unix time format.
-- For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input @1538424000@ as the end time.
--
--
  , unit :: Types.MetricUnit
    -- ^ The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the @metricName@ parameter.
  , statistics :: [Types.MetricStatistic]
    -- ^ The statistic for the metric.
--
-- The following statistics are available:
--
--     * @Minimum@ - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
--
--
--     * @Maximum@ - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
--
--
--     * @Sum@ - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
--
--
--     * @Average@ - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
--
--
--     * @SampleCount@ - The count, or number, of data points used for the statistical calculation.
--
--
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'GetRelationalDatabaseMetricData' value with any optional fields omitted.
mkGetRelationalDatabaseMetricData
    :: Types.ResourceName -- ^ 'relationalDatabaseName'
    -> Types.RelationalDatabaseMetricName -- ^ 'metricName'
    -> Core.Natural -- ^ 'period'
    -> Core.NominalDiffTime -- ^ 'startTime'
    -> Core.NominalDiffTime -- ^ 'endTime'
    -> Types.MetricUnit -- ^ 'unit'
    -> GetRelationalDatabaseMetricData
mkGetRelationalDatabaseMetricData relationalDatabaseName metricName
  period startTime endTime unit
  = GetRelationalDatabaseMetricData'{relationalDatabaseName,
                                     metricName, period, startTime, endTime, unit,
                                     statistics = Core.mempty}

-- | The name of your database from which to get metric data.
--
-- /Note:/ Consider using 'relationalDatabaseName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdRelationalDatabaseName :: Lens.Lens' GetRelationalDatabaseMetricData Types.ResourceName
grdmdRelationalDatabaseName = Lens.field @"relationalDatabaseName"
{-# INLINEABLE grdmdRelationalDatabaseName #-}
{-# DEPRECATED relationalDatabaseName "Use generic-lens or generic-optics with 'relationalDatabaseName' instead"  #-}

-- | The metric for which you want to return information.
--
-- Valid relational database metric names are listed below, along with the most useful @statistics@ to include in your request, and the published @unit@ value. All relational database metric data is available in 1-minute (60 seconds) granularity.
--
--     * __@CPUUtilization@ __ - The percentage of CPU utilization currently in use on the database.
-- @Statistics@ : The most useful statistics are @Maximum@ and @Average@ .
-- @Unit@ : The published unit is @Percent@ .
--
--
--     * __@DatabaseConnections@ __ - The number of database connections in use.
-- @Statistics@ : The most useful statistics are @Maximum@ and @Sum@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@DiskQueueDepth@ __ - The number of outstanding IOs (read/write requests) that are waiting to access the disk.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @Count@ .
--
--
--     * __@FreeStorageSpace@ __ - The amount of available storage space.
-- @Statistics@ : The most useful statistic is @Sum@ .
-- @Unit@ : The published unit is @Bytes@ .
--
--
--     * __@NetworkReceiveThroughput@ __ - The incoming (Receive) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Bytes/Second@ .
--
--
--     * __@NetworkTransmitThroughput@ __ - The outgoing (Transmit) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication.
-- @Statistics@ : The most useful statistic is @Average@ .
-- @Unit@ : The published unit is @Bytes/Second@ .
--
--
--
-- /Note:/ Consider using 'metricName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdMetricName :: Lens.Lens' GetRelationalDatabaseMetricData Types.RelationalDatabaseMetricName
grdmdMetricName = Lens.field @"metricName"
{-# INLINEABLE grdmdMetricName #-}
{-# DEPRECATED metricName "Use generic-lens or generic-optics with 'metricName' instead"  #-}

-- | The granularity, in seconds, of the returned data points.
--
-- All relational database metric data is available in 1-minute (60 seconds) granularity.
--
-- /Note:/ Consider using 'period' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdPeriod :: Lens.Lens' GetRelationalDatabaseMetricData Core.Natural
grdmdPeriod = Lens.field @"period"
{-# INLINEABLE grdmdPeriod #-}
{-# DEPRECATED period "Use generic-lens or generic-optics with 'period' instead"  #-}

-- | The start of the time interval from which to get metric data.
--
-- Constraints:
--
--     * Specified in Coordinated Universal Time (UTC).
--
--
--     * Specified in the Unix time format.
-- For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input @1538424000@ as the start time.
--
--
--
-- /Note:/ Consider using 'startTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdStartTime :: Lens.Lens' GetRelationalDatabaseMetricData Core.NominalDiffTime
grdmdStartTime = Lens.field @"startTime"
{-# INLINEABLE grdmdStartTime #-}
{-# DEPRECATED startTime "Use generic-lens or generic-optics with 'startTime' instead"  #-}

-- | The end of the time interval from which to get metric data.
--
-- Constraints:
--
--     * Specified in Coordinated Universal Time (UTC).
--
--
--     * Specified in the Unix time format.
-- For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input @1538424000@ as the end time.
--
--
--
-- /Note:/ Consider using 'endTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdEndTime :: Lens.Lens' GetRelationalDatabaseMetricData Core.NominalDiffTime
grdmdEndTime = Lens.field @"endTime"
{-# INLINEABLE grdmdEndTime #-}
{-# DEPRECATED endTime "Use generic-lens or generic-optics with 'endTime' instead"  #-}

-- | The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the @metricName@ parameter.
--
-- /Note:/ Consider using 'unit' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdUnit :: Lens.Lens' GetRelationalDatabaseMetricData Types.MetricUnit
grdmdUnit = Lens.field @"unit"
{-# INLINEABLE grdmdUnit #-}
{-# DEPRECATED unit "Use generic-lens or generic-optics with 'unit' instead"  #-}

-- | The statistic for the metric.
--
-- The following statistics are available:
--
--     * @Minimum@ - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
--
--
--     * @Maximum@ - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
--
--
--     * @Sum@ - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
--
--
--     * @Average@ - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
--
--
--     * @SampleCount@ - The count, or number, of data points used for the statistical calculation.
--
--
--
-- /Note:/ Consider using 'statistics' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdStatistics :: Lens.Lens' GetRelationalDatabaseMetricData [Types.MetricStatistic]
grdmdStatistics = Lens.field @"statistics"
{-# INLINEABLE grdmdStatistics #-}
{-# DEPRECATED statistics "Use generic-lens or generic-optics with 'statistics' instead"  #-}

instance Core.ToQuery GetRelationalDatabaseMetricData where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders GetRelationalDatabaseMetricData where
        toHeaders GetRelationalDatabaseMetricData{..}
          = Core.pure
              ("X-Amz-Target",
               "Lightsail_20161128.GetRelationalDatabaseMetricData")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON GetRelationalDatabaseMetricData where
        toJSON GetRelationalDatabaseMetricData{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just
                    ("relationalDatabaseName" Core..= relationalDatabaseName),
                  Core.Just ("metricName" Core..= metricName),
                  Core.Just ("period" Core..= period),
                  Core.Just ("startTime" Core..= startTime),
                  Core.Just ("endTime" Core..= endTime),
                  Core.Just ("unit" Core..= unit),
                  Core.Just ("statistics" Core..= statistics)])

instance Core.AWSRequest GetRelationalDatabaseMetricData where
        type Rs GetRelationalDatabaseMetricData =
             GetRelationalDatabaseMetricDataResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 GetRelationalDatabaseMetricDataResponse' Core.<$>
                   (x Core..:? "metricData") Core.<*> x Core..:? "metricName" Core.<*>
                     Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkGetRelationalDatabaseMetricDataResponse' smart constructor.
data GetRelationalDatabaseMetricDataResponse = GetRelationalDatabaseMetricDataResponse'
  { metricData :: Core.Maybe [Types.MetricDatapoint]
    -- ^ An array of objects that describe the metric data returned.
  , metricName :: Core.Maybe Types.RelationalDatabaseMetricName
    -- ^ The name of the metric returned.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'GetRelationalDatabaseMetricDataResponse' value with any optional fields omitted.
mkGetRelationalDatabaseMetricDataResponse
    :: Core.Int -- ^ 'responseStatus'
    -> GetRelationalDatabaseMetricDataResponse
mkGetRelationalDatabaseMetricDataResponse responseStatus
  = GetRelationalDatabaseMetricDataResponse'{metricData =
                                               Core.Nothing,
                                             metricName = Core.Nothing, responseStatus}

-- | An array of objects that describe the metric data returned.
--
-- /Note:/ Consider using 'metricData' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdrrsMetricData :: Lens.Lens' GetRelationalDatabaseMetricDataResponse (Core.Maybe [Types.MetricDatapoint])
grdmdrrsMetricData = Lens.field @"metricData"
{-# INLINEABLE grdmdrrsMetricData #-}
{-# DEPRECATED metricData "Use generic-lens or generic-optics with 'metricData' instead"  #-}

-- | The name of the metric returned.
--
-- /Note:/ Consider using 'metricName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdrrsMetricName :: Lens.Lens' GetRelationalDatabaseMetricDataResponse (Core.Maybe Types.RelationalDatabaseMetricName)
grdmdrrsMetricName = Lens.field @"metricName"
{-# INLINEABLE grdmdrrsMetricName #-}
{-# DEPRECATED metricName "Use generic-lens or generic-optics with 'metricName' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
grdmdrrsResponseStatus :: Lens.Lens' GetRelationalDatabaseMetricDataResponse Core.Int
grdmdrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE grdmdrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
