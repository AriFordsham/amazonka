{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.GuardDuty.CreateThreatIntelSet
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the master account can use this operation.
module Network.AWS.GuardDuty.CreateThreatIntelSet
  ( -- * Creating a request
    CreateThreatIntelSet (..),
    mkCreateThreatIntelSet,

    -- ** Request lenses
    ctisDetectorId,
    ctisName,
    ctisFormat,
    ctisLocation,
    ctisActivate,
    ctisClientToken,
    ctisTags,

    -- * Destructuring the response
    CreateThreatIntelSetResponse (..),
    mkCreateThreatIntelSetResponse,

    -- ** Response lenses
    ctisrrsThreatIntelSetId,
    ctisrrsResponseStatus,
  )
where

import qualified Network.AWS.GuardDuty.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkCreateThreatIntelSet' smart constructor.
data CreateThreatIntelSet = CreateThreatIntelSet'
  { -- | The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.
    detectorId :: Types.DetectorId,
    -- | A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
    name :: Types.Name,
    -- | The format of the file that contains the ThreatIntelSet.
    format :: Types.ThreatIntelSetFormat,
    -- | The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.
    location :: Types.Location,
    -- | A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
    activate :: Core.Bool,
    -- | The idempotency token for the create request.
    clientToken :: Core.Maybe Types.ClientToken,
    -- | The tags to be added to a new threat list resource.
    tags :: Core.Maybe (Core.HashMap Types.TagKey Types.TagValue)
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateThreatIntelSet' value with any optional fields omitted.
mkCreateThreatIntelSet ::
  -- | 'detectorId'
  Types.DetectorId ->
  -- | 'name'
  Types.Name ->
  -- | 'format'
  Types.ThreatIntelSetFormat ->
  -- | 'location'
  Types.Location ->
  -- | 'activate'
  Core.Bool ->
  CreateThreatIntelSet
mkCreateThreatIntelSet detectorId name format location activate =
  CreateThreatIntelSet'
    { detectorId,
      name,
      format,
      location,
      activate,
      clientToken = Core.Nothing,
      tags = Core.Nothing
    }

-- | The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.
--
-- /Note:/ Consider using 'detectorId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisDetectorId :: Lens.Lens' CreateThreatIntelSet Types.DetectorId
ctisDetectorId = Lens.field @"detectorId"
{-# DEPRECATED ctisDetectorId "Use generic-lens or generic-optics with 'detectorId' instead." #-}

-- | A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
--
-- /Note:/ Consider using 'name' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisName :: Lens.Lens' CreateThreatIntelSet Types.Name
ctisName = Lens.field @"name"
{-# DEPRECATED ctisName "Use generic-lens or generic-optics with 'name' instead." #-}

-- | The format of the file that contains the ThreatIntelSet.
--
-- /Note:/ Consider using 'format' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisFormat :: Lens.Lens' CreateThreatIntelSet Types.ThreatIntelSetFormat
ctisFormat = Lens.field @"format"
{-# DEPRECATED ctisFormat "Use generic-lens or generic-optics with 'format' instead." #-}

-- | The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.
--
-- /Note:/ Consider using 'location' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisLocation :: Lens.Lens' CreateThreatIntelSet Types.Location
ctisLocation = Lens.field @"location"
{-# DEPRECATED ctisLocation "Use generic-lens or generic-optics with 'location' instead." #-}

-- | A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
--
-- /Note:/ Consider using 'activate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisActivate :: Lens.Lens' CreateThreatIntelSet Core.Bool
ctisActivate = Lens.field @"activate"
{-# DEPRECATED ctisActivate "Use generic-lens or generic-optics with 'activate' instead." #-}

-- | The idempotency token for the create request.
--
-- /Note:/ Consider using 'clientToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisClientToken :: Lens.Lens' CreateThreatIntelSet (Core.Maybe Types.ClientToken)
ctisClientToken = Lens.field @"clientToken"
{-# DEPRECATED ctisClientToken "Use generic-lens or generic-optics with 'clientToken' instead." #-}

-- | The tags to be added to a new threat list resource.
--
-- /Note:/ Consider using 'tags' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisTags :: Lens.Lens' CreateThreatIntelSet (Core.Maybe (Core.HashMap Types.TagKey Types.TagValue))
ctisTags = Lens.field @"tags"
{-# DEPRECATED ctisTags "Use generic-lens or generic-optics with 'tags' instead." #-}

instance Core.FromJSON CreateThreatIntelSet where
  toJSON CreateThreatIntelSet {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("name" Core..= name),
            Core.Just ("format" Core..= format),
            Core.Just ("location" Core..= location),
            Core.Just ("activate" Core..= activate),
            ("clientToken" Core..=) Core.<$> clientToken,
            ("tags" Core..=) Core.<$> tags
          ]
      )

instance Core.AWSRequest CreateThreatIntelSet where
  type Rs CreateThreatIntelSet = CreateThreatIntelSetResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath =
          Core.rawPath
            ( "/detector/" Core.<> (Core.toText detectorId)
                Core.<> ("/threatintelset")
            ),
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure ("Content-Type", "application/x-amz-json-1.1"),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          CreateThreatIntelSetResponse'
            Core.<$> (x Core..: "threatIntelSetId")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkCreateThreatIntelSetResponse' smart constructor.
data CreateThreatIntelSetResponse = CreateThreatIntelSetResponse'
  { -- | The ID of the ThreatIntelSet resource.
    threatIntelSetId :: Types.String,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateThreatIntelSetResponse' value with any optional fields omitted.
mkCreateThreatIntelSetResponse ::
  -- | 'threatIntelSetId'
  Types.String ->
  -- | 'responseStatus'
  Core.Int ->
  CreateThreatIntelSetResponse
mkCreateThreatIntelSetResponse threatIntelSetId responseStatus =
  CreateThreatIntelSetResponse' {threatIntelSetId, responseStatus}

-- | The ID of the ThreatIntelSet resource.
--
-- /Note:/ Consider using 'threatIntelSetId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisrrsThreatIntelSetId :: Lens.Lens' CreateThreatIntelSetResponse Types.String
ctisrrsThreatIntelSetId = Lens.field @"threatIntelSetId"
{-# DEPRECATED ctisrrsThreatIntelSetId "Use generic-lens or generic-optics with 'threatIntelSetId' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctisrrsResponseStatus :: Lens.Lens' CreateThreatIntelSetResponse Core.Int
ctisrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED ctisrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
