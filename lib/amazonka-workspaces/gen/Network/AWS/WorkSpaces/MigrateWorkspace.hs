{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.WorkSpaces.MigrateWorkspace
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume.
--
-- The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume from the last available snapshot of the original WorkSpace. During migration, the original @D:\Users\%USERNAME%@ user profile folder is renamed to @D:\Users\%USERNAME%MMddyyTHHmmss%.NotMigrated@ . A new @D:\Users\%USERNAME%\@ folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile.
-- For available migration scenarios, details about what happens during migration, and best practices, see <https://docs.aws.amazon.com/workspaces/latest/adminguide/migrate-workspaces.html Migrate a WorkSpace> .
module Network.AWS.WorkSpaces.MigrateWorkspace
  ( -- * Creating a request
    MigrateWorkspace (..),
    mkMigrateWorkspace,

    -- ** Request lenses
    mwBundleId,
    mwSourceWorkspaceId,

    -- * Destructuring the response
    MigrateWorkspaceResponse (..),
    mkMigrateWorkspaceResponse,

    -- ** Response lenses
    mwrsSourceWorkspaceId,
    mwrsTargetWorkspaceId,
    mwrsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.WorkSpaces.Types

-- | /See:/ 'mkMigrateWorkspace' smart constructor.
data MigrateWorkspace = MigrateWorkspace'
  { -- | The identifier of the target bundle type to migrate the WorkSpace to.
    bundleId :: Lude.Text,
    -- | The identifier of the WorkSpace to migrate from.
    sourceWorkspaceId :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'MigrateWorkspace' with the minimum fields required to make a request.
--
-- * 'bundleId' - The identifier of the target bundle type to migrate the WorkSpace to.
-- * 'sourceWorkspaceId' - The identifier of the WorkSpace to migrate from.
mkMigrateWorkspace ::
  -- | 'bundleId'
  Lude.Text ->
  -- | 'sourceWorkspaceId'
  Lude.Text ->
  MigrateWorkspace
mkMigrateWorkspace pBundleId_ pSourceWorkspaceId_ =
  MigrateWorkspace'
    { bundleId = pBundleId_,
      sourceWorkspaceId = pSourceWorkspaceId_
    }

-- | The identifier of the target bundle type to migrate the WorkSpace to.
--
-- /Note:/ Consider using 'bundleId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mwBundleId :: Lens.Lens' MigrateWorkspace Lude.Text
mwBundleId = Lens.lens (bundleId :: MigrateWorkspace -> Lude.Text) (\s a -> s {bundleId = a} :: MigrateWorkspace)
{-# DEPRECATED mwBundleId "Use generic-lens or generic-optics with 'bundleId' instead." #-}

-- | The identifier of the WorkSpace to migrate from.
--
-- /Note:/ Consider using 'sourceWorkspaceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mwSourceWorkspaceId :: Lens.Lens' MigrateWorkspace Lude.Text
mwSourceWorkspaceId = Lens.lens (sourceWorkspaceId :: MigrateWorkspace -> Lude.Text) (\s a -> s {sourceWorkspaceId = a} :: MigrateWorkspace)
{-# DEPRECATED mwSourceWorkspaceId "Use generic-lens or generic-optics with 'sourceWorkspaceId' instead." #-}

instance Lude.AWSRequest MigrateWorkspace where
  type Rs MigrateWorkspace = MigrateWorkspaceResponse
  request = Req.postJSON workSpacesService
  response =
    Res.receiveJSON
      ( \s h x ->
          MigrateWorkspaceResponse'
            Lude.<$> (x Lude..?> "SourceWorkspaceId")
            Lude.<*> (x Lude..?> "TargetWorkspaceId")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders MigrateWorkspace where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("WorkspacesService.MigrateWorkspace" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON MigrateWorkspace where
  toJSON MigrateWorkspace' {..} =
    Lude.object
      ( Lude.catMaybes
          [ Lude.Just ("BundleId" Lude..= bundleId),
            Lude.Just ("SourceWorkspaceId" Lude..= sourceWorkspaceId)
          ]
      )

instance Lude.ToPath MigrateWorkspace where
  toPath = Lude.const "/"

instance Lude.ToQuery MigrateWorkspace where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkMigrateWorkspaceResponse' smart constructor.
data MigrateWorkspaceResponse = MigrateWorkspaceResponse'
  { -- | The original identifier of the WorkSpace that is being migrated.
    sourceWorkspaceId :: Lude.Maybe Lude.Text,
    -- | The new identifier of the WorkSpace that is being migrated. If the migration does not succeed, the target WorkSpace ID will not be used, and the WorkSpace will still have the original WorkSpace ID.
    targetWorkspaceId :: Lude.Maybe Lude.Text,
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'MigrateWorkspaceResponse' with the minimum fields required to make a request.
--
-- * 'sourceWorkspaceId' - The original identifier of the WorkSpace that is being migrated.
-- * 'targetWorkspaceId' - The new identifier of the WorkSpace that is being migrated. If the migration does not succeed, the target WorkSpace ID will not be used, and the WorkSpace will still have the original WorkSpace ID.
-- * 'responseStatus' - The response status code.
mkMigrateWorkspaceResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  MigrateWorkspaceResponse
mkMigrateWorkspaceResponse pResponseStatus_ =
  MigrateWorkspaceResponse'
    { sourceWorkspaceId = Lude.Nothing,
      targetWorkspaceId = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | The original identifier of the WorkSpace that is being migrated.
--
-- /Note:/ Consider using 'sourceWorkspaceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mwrsSourceWorkspaceId :: Lens.Lens' MigrateWorkspaceResponse (Lude.Maybe Lude.Text)
mwrsSourceWorkspaceId = Lens.lens (sourceWorkspaceId :: MigrateWorkspaceResponse -> Lude.Maybe Lude.Text) (\s a -> s {sourceWorkspaceId = a} :: MigrateWorkspaceResponse)
{-# DEPRECATED mwrsSourceWorkspaceId "Use generic-lens or generic-optics with 'sourceWorkspaceId' instead." #-}

-- | The new identifier of the WorkSpace that is being migrated. If the migration does not succeed, the target WorkSpace ID will not be used, and the WorkSpace will still have the original WorkSpace ID.
--
-- /Note:/ Consider using 'targetWorkspaceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mwrsTargetWorkspaceId :: Lens.Lens' MigrateWorkspaceResponse (Lude.Maybe Lude.Text)
mwrsTargetWorkspaceId = Lens.lens (targetWorkspaceId :: MigrateWorkspaceResponse -> Lude.Maybe Lude.Text) (\s a -> s {targetWorkspaceId = a} :: MigrateWorkspaceResponse)
{-# DEPRECATED mwrsTargetWorkspaceId "Use generic-lens or generic-optics with 'targetWorkspaceId' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mwrsResponseStatus :: Lens.Lens' MigrateWorkspaceResponse Lude.Int
mwrsResponseStatus = Lens.lens (responseStatus :: MigrateWorkspaceResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: MigrateWorkspaceResponse)
{-# DEPRECATED mwrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
