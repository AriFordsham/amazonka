{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DMS.CreateEventSubscription
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates an AWS DMS event notification subscription.
--
-- You can specify the type of source (@SourceType@ ) you want to be notified of, provide a list of AWS DMS source IDs (@SourceIds@ ) that triggers the events, and provide a list of event categories (@EventCategories@ ) for events you want to be notified of. If you specify both the @SourceType@ and @SourceIds@ , such as @SourceType = replication-instance@ and @SourceIdentifier = my-replinstance@ , you will be notified of all the replication instance events for the specified source. If you specify a @SourceType@ but don't specify a @SourceIdentifier@ , you receive notice of the events for that source type for all your AWS DMS sources. If you don't specify either @SourceType@ nor @SourceIdentifier@ , you will be notified of events generated from all AWS DMS sources belonging to your customer account.
-- For more information about AWS DMS events, see <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html Working with Events and Notifications> in the /AWS Database Migration Service User Guide./
module Network.AWS.DMS.CreateEventSubscription
  ( -- * Creating a request
    CreateEventSubscription (..),
    mkCreateEventSubscription,

    -- ** Request lenses
    cesSubscriptionName,
    cesSnsTopicArn,
    cesEnabled,
    cesEventCategories,
    cesSourceIds,
    cesSourceType,
    cesTags,

    -- * Destructuring the response
    CreateEventSubscriptionResponse (..),
    mkCreateEventSubscriptionResponse,

    -- ** Response lenses
    cesrrsEventSubscription,
    cesrrsResponseStatus,
  )
where

import qualified Network.AWS.DMS.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- |
--
-- /See:/ 'mkCreateEventSubscription' smart constructor.
data CreateEventSubscription = CreateEventSubscription'
  { -- | The name of the AWS DMS event notification subscription. This name must be less than 255 characters.
    subscriptionName :: Types.String,
    -- | The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    snsTopicArn :: Types.String,
    -- | A Boolean value; set to @true@ to activate the subscription, or set to @false@ to create the subscription but not activate it.
    enabled :: Core.Maybe Core.Bool,
    -- | A list of event categories for a source type that you want to subscribe to. For more information, see <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html Working with Events and Notifications> in the /AWS Database Migration Service User Guide./
    eventCategories :: Core.Maybe [Types.String],
    -- | A list of identifiers for which AWS DMS provides notification events.
    --
    -- If you don't specify a value, notifications are provided for all sources.
    -- If you specify multiple values, they must be of the same type. For example, if you specify a database instance ID, then all of the other values must be database instance IDs.
    sourceIds :: Core.Maybe [Types.String],
    -- | The type of AWS DMS resource that generates the events. For example, if you want to be notified of events generated by a replication instance, you set this parameter to @replication-instance@ . If this value isn't specified, all events are returned.
    --
    -- Valid values: @replication-instance@ | @replication-task@
    sourceType :: Core.Maybe Types.String,
    -- | One or more tags to be assigned to the event subscription.
    tags :: Core.Maybe [Types.Tag]
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateEventSubscription' value with any optional fields omitted.
mkCreateEventSubscription ::
  -- | 'subscriptionName'
  Types.String ->
  -- | 'snsTopicArn'
  Types.String ->
  CreateEventSubscription
mkCreateEventSubscription subscriptionName snsTopicArn =
  CreateEventSubscription'
    { subscriptionName,
      snsTopicArn,
      enabled = Core.Nothing,
      eventCategories = Core.Nothing,
      sourceIds = Core.Nothing,
      sourceType = Core.Nothing,
      tags = Core.Nothing
    }

-- | The name of the AWS DMS event notification subscription. This name must be less than 255 characters.
--
-- /Note:/ Consider using 'subscriptionName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSubscriptionName :: Lens.Lens' CreateEventSubscription Types.String
cesSubscriptionName = Lens.field @"subscriptionName"
{-# DEPRECATED cesSubscriptionName "Use generic-lens or generic-optics with 'subscriptionName' instead." #-}

-- | The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
--
-- /Note:/ Consider using 'snsTopicArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSnsTopicArn :: Lens.Lens' CreateEventSubscription Types.String
cesSnsTopicArn = Lens.field @"snsTopicArn"
{-# DEPRECATED cesSnsTopicArn "Use generic-lens or generic-optics with 'snsTopicArn' instead." #-}

-- | A Boolean value; set to @true@ to activate the subscription, or set to @false@ to create the subscription but not activate it.
--
-- /Note:/ Consider using 'enabled' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesEnabled :: Lens.Lens' CreateEventSubscription (Core.Maybe Core.Bool)
cesEnabled = Lens.field @"enabled"
{-# DEPRECATED cesEnabled "Use generic-lens or generic-optics with 'enabled' instead." #-}

-- | A list of event categories for a source type that you want to subscribe to. For more information, see <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html Working with Events and Notifications> in the /AWS Database Migration Service User Guide./
--
-- /Note:/ Consider using 'eventCategories' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesEventCategories :: Lens.Lens' CreateEventSubscription (Core.Maybe [Types.String])
cesEventCategories = Lens.field @"eventCategories"
{-# DEPRECATED cesEventCategories "Use generic-lens or generic-optics with 'eventCategories' instead." #-}

-- | A list of identifiers for which AWS DMS provides notification events.
--
-- If you don't specify a value, notifications are provided for all sources.
-- If you specify multiple values, they must be of the same type. For example, if you specify a database instance ID, then all of the other values must be database instance IDs.
--
-- /Note:/ Consider using 'sourceIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSourceIds :: Lens.Lens' CreateEventSubscription (Core.Maybe [Types.String])
cesSourceIds = Lens.field @"sourceIds"
{-# DEPRECATED cesSourceIds "Use generic-lens or generic-optics with 'sourceIds' instead." #-}

-- | The type of AWS DMS resource that generates the events. For example, if you want to be notified of events generated by a replication instance, you set this parameter to @replication-instance@ . If this value isn't specified, all events are returned.
--
-- Valid values: @replication-instance@ | @replication-task@
--
-- /Note:/ Consider using 'sourceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesSourceType :: Lens.Lens' CreateEventSubscription (Core.Maybe Types.String)
cesSourceType = Lens.field @"sourceType"
{-# DEPRECATED cesSourceType "Use generic-lens or generic-optics with 'sourceType' instead." #-}

-- | One or more tags to be assigned to the event subscription.
--
-- /Note:/ Consider using 'tags' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesTags :: Lens.Lens' CreateEventSubscription (Core.Maybe [Types.Tag])
cesTags = Lens.field @"tags"
{-# DEPRECATED cesTags "Use generic-lens or generic-optics with 'tags' instead." #-}

instance Core.FromJSON CreateEventSubscription where
  toJSON CreateEventSubscription {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("SubscriptionName" Core..= subscriptionName),
            Core.Just ("SnsTopicArn" Core..= snsTopicArn),
            ("Enabled" Core..=) Core.<$> enabled,
            ("EventCategories" Core..=) Core.<$> eventCategories,
            ("SourceIds" Core..=) Core.<$> sourceIds,
            ("SourceType" Core..=) Core.<$> sourceType,
            ("Tags" Core..=) Core.<$> tags
          ]
      )

instance Core.AWSRequest CreateEventSubscription where
  type Rs CreateEventSubscription = CreateEventSubscriptionResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ("X-Amz-Target", "AmazonDMSv20160101.CreateEventSubscription")
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          CreateEventSubscriptionResponse'
            Core.<$> (x Core..:? "EventSubscription")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- |
--
-- /See:/ 'mkCreateEventSubscriptionResponse' smart constructor.
data CreateEventSubscriptionResponse = CreateEventSubscriptionResponse'
  { -- | The event subscription that was created.
    eventSubscription :: Core.Maybe Types.EventSubscription,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateEventSubscriptionResponse' value with any optional fields omitted.
mkCreateEventSubscriptionResponse ::
  -- | 'responseStatus'
  Core.Int ->
  CreateEventSubscriptionResponse
mkCreateEventSubscriptionResponse responseStatus =
  CreateEventSubscriptionResponse'
    { eventSubscription =
        Core.Nothing,
      responseStatus
    }

-- | The event subscription that was created.
--
-- /Note:/ Consider using 'eventSubscription' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesrrsEventSubscription :: Lens.Lens' CreateEventSubscriptionResponse (Core.Maybe Types.EventSubscription)
cesrrsEventSubscription = Lens.field @"eventSubscription"
{-# DEPRECATED cesrrsEventSubscription "Use generic-lens or generic-optics with 'eventSubscription' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cesrrsResponseStatus :: Lens.Lens' CreateEventSubscriptionResponse Core.Int
cesrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED cesrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
