{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DMS.Types.ReplicationTaskAssessmentRun
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.DMS.Types.ReplicationTaskAssessmentRun
  ( ReplicationTaskAssessmentRun (..)
  -- * Smart constructor
  , mkReplicationTaskAssessmentRun
  -- * Lenses
  , rtarAssessmentProgress
  , rtarAssessmentRunName
  , rtarLastFailureMessage
  , rtarReplicationTaskArn
  , rtarReplicationTaskAssessmentRunArn
  , rtarReplicationTaskAssessmentRunCreationDate
  , rtarResultEncryptionMode
  , rtarResultKmsKeyArn
  , rtarResultLocationBucket
  , rtarResultLocationFolder
  , rtarServiceAccessRoleArn
  , rtarStatus
  ) where

import qualified Network.AWS.DMS.Types.ReplicationTaskAssessmentRunProgress as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | Provides information that describes a premigration assessment run that you have started using the @StartReplicationTaskAssessmentRun@ operation.
--
-- Some of the information appears based on other operations that can return the @ReplicationTaskAssessmentRun@ object.
--
-- /See:/ 'mkReplicationTaskAssessmentRun' smart constructor.
data ReplicationTaskAssessmentRun = ReplicationTaskAssessmentRun'
  { assessmentProgress :: Core.Maybe Types.ReplicationTaskAssessmentRunProgress
    -- ^ Indication of the completion progress for the individual assessments specified to run.
  , assessmentRunName :: Core.Maybe Core.Text
    -- ^ Unique name of the assessment run.
  , lastFailureMessage :: Core.Maybe Core.Text
    -- ^ Last message generated by an individual assessment failure.
  , replicationTaskArn :: Core.Maybe Core.Text
    -- ^ ARN of the migration task associated with this premigration assessment run.
  , replicationTaskAssessmentRunArn :: Core.Maybe Core.Text
    -- ^ Amazon Resource Name (ARN) of this assessment run.
  , replicationTaskAssessmentRunCreationDate :: Core.Maybe Core.NominalDiffTime
    -- ^ Date on which the assessment run was created using the @StartReplicationTaskAssessmentRun@ operation.
  , resultEncryptionMode :: Core.Maybe Core.Text
    -- ^ Encryption mode used to encrypt the assessment run results.
  , resultKmsKeyArn :: Core.Maybe Core.Text
    -- ^ ARN of the AWS KMS encryption key used to encrypt the assessment run results.
  , resultLocationBucket :: Core.Maybe Core.Text
    -- ^ Amazon S3 bucket where AWS DMS stores the results of this assessment run.
  , resultLocationFolder :: Core.Maybe Core.Text
    -- ^ Folder in an Amazon S3 bucket where AWS DMS stores the results of this assessment run.
  , serviceAccessRoleArn :: Core.Maybe Core.Text
    -- ^ ARN of the service role used to start the assessment run using the @StartReplicationTaskAssessmentRun@ operation.
  , status :: Core.Maybe Core.Text
    -- ^ Assessment run status. 
--
-- This status can have one of the following values:
--
--     * @"cancelling"@ – The assessment run was canceled by the @CancelReplicationTaskAssessmentRun@ operation.
--
--
--     * @"deleting"@ – The assessment run was deleted by the @DeleteReplicationTaskAssessmentRun@ operation.
--
--
--     * @"failed"@ – At least one individual assessment completed with a @failed@ status.
--
--
--     * @"error-provisioning"@ – An internal error occurred while resources were provisioned (during @provisioning@ status).
--
--
--     * @"error-executing"@ – An internal error occurred while individual assessments ran (during @running@ status).
--
--
--     * @"invalid state"@ – The assessment run is in an unknown state.
--
--
--     * @"passed"@ – All individual assessments have completed, and none has a @failed@ status.
--
--
--     * @"provisioning"@ – Resources required to run individual assessments are being provisioned.
--
--
--     * @"running"@ – Individual assessments are being run.
--
--
--     * @"starting"@ – The assessment run is starting, but resources are not yet being provisioned for individual assessments.
--
--
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'ReplicationTaskAssessmentRun' value with any optional fields omitted.
mkReplicationTaskAssessmentRun
    :: ReplicationTaskAssessmentRun
mkReplicationTaskAssessmentRun
  = ReplicationTaskAssessmentRun'{assessmentProgress = Core.Nothing,
                                  assessmentRunName = Core.Nothing,
                                  lastFailureMessage = Core.Nothing,
                                  replicationTaskArn = Core.Nothing,
                                  replicationTaskAssessmentRunArn = Core.Nothing,
                                  replicationTaskAssessmentRunCreationDate = Core.Nothing,
                                  resultEncryptionMode = Core.Nothing,
                                  resultKmsKeyArn = Core.Nothing,
                                  resultLocationBucket = Core.Nothing,
                                  resultLocationFolder = Core.Nothing,
                                  serviceAccessRoleArn = Core.Nothing, status = Core.Nothing}

-- | Indication of the completion progress for the individual assessments specified to run.
--
-- /Note:/ Consider using 'assessmentProgress' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarAssessmentProgress :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.ReplicationTaskAssessmentRunProgress)
rtarAssessmentProgress = Lens.field @"assessmentProgress"
{-# INLINEABLE rtarAssessmentProgress #-}
{-# DEPRECATED assessmentProgress "Use generic-lens or generic-optics with 'assessmentProgress' instead"  #-}

-- | Unique name of the assessment run.
--
-- /Note:/ Consider using 'assessmentRunName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarAssessmentRunName :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarAssessmentRunName = Lens.field @"assessmentRunName"
{-# INLINEABLE rtarAssessmentRunName #-}
{-# DEPRECATED assessmentRunName "Use generic-lens or generic-optics with 'assessmentRunName' instead"  #-}

-- | Last message generated by an individual assessment failure.
--
-- /Note:/ Consider using 'lastFailureMessage' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarLastFailureMessage :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarLastFailureMessage = Lens.field @"lastFailureMessage"
{-# INLINEABLE rtarLastFailureMessage #-}
{-# DEPRECATED lastFailureMessage "Use generic-lens or generic-optics with 'lastFailureMessage' instead"  #-}

-- | ARN of the migration task associated with this premigration assessment run.
--
-- /Note:/ Consider using 'replicationTaskArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskArn :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarReplicationTaskArn = Lens.field @"replicationTaskArn"
{-# INLINEABLE rtarReplicationTaskArn #-}
{-# DEPRECATED replicationTaskArn "Use generic-lens or generic-optics with 'replicationTaskArn' instead"  #-}

-- | Amazon Resource Name (ARN) of this assessment run.
--
-- /Note:/ Consider using 'replicationTaskAssessmentRunArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskAssessmentRunArn :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarReplicationTaskAssessmentRunArn = Lens.field @"replicationTaskAssessmentRunArn"
{-# INLINEABLE rtarReplicationTaskAssessmentRunArn #-}
{-# DEPRECATED replicationTaskAssessmentRunArn "Use generic-lens or generic-optics with 'replicationTaskAssessmentRunArn' instead"  #-}

-- | Date on which the assessment run was created using the @StartReplicationTaskAssessmentRun@ operation.
--
-- /Note:/ Consider using 'replicationTaskAssessmentRunCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskAssessmentRunCreationDate :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.NominalDiffTime)
rtarReplicationTaskAssessmentRunCreationDate = Lens.field @"replicationTaskAssessmentRunCreationDate"
{-# INLINEABLE rtarReplicationTaskAssessmentRunCreationDate #-}
{-# DEPRECATED replicationTaskAssessmentRunCreationDate "Use generic-lens or generic-optics with 'replicationTaskAssessmentRunCreationDate' instead"  #-}

-- | Encryption mode used to encrypt the assessment run results.
--
-- /Note:/ Consider using 'resultEncryptionMode' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultEncryptionMode :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarResultEncryptionMode = Lens.field @"resultEncryptionMode"
{-# INLINEABLE rtarResultEncryptionMode #-}
{-# DEPRECATED resultEncryptionMode "Use generic-lens or generic-optics with 'resultEncryptionMode' instead"  #-}

-- | ARN of the AWS KMS encryption key used to encrypt the assessment run results.
--
-- /Note:/ Consider using 'resultKmsKeyArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultKmsKeyArn :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarResultKmsKeyArn = Lens.field @"resultKmsKeyArn"
{-# INLINEABLE rtarResultKmsKeyArn #-}
{-# DEPRECATED resultKmsKeyArn "Use generic-lens or generic-optics with 'resultKmsKeyArn' instead"  #-}

-- | Amazon S3 bucket where AWS DMS stores the results of this assessment run.
--
-- /Note:/ Consider using 'resultLocationBucket' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultLocationBucket :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarResultLocationBucket = Lens.field @"resultLocationBucket"
{-# INLINEABLE rtarResultLocationBucket #-}
{-# DEPRECATED resultLocationBucket "Use generic-lens or generic-optics with 'resultLocationBucket' instead"  #-}

-- | Folder in an Amazon S3 bucket where AWS DMS stores the results of this assessment run.
--
-- /Note:/ Consider using 'resultLocationFolder' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultLocationFolder :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarResultLocationFolder = Lens.field @"resultLocationFolder"
{-# INLINEABLE rtarResultLocationFolder #-}
{-# DEPRECATED resultLocationFolder "Use generic-lens or generic-optics with 'resultLocationFolder' instead"  #-}

-- | ARN of the service role used to start the assessment run using the @StartReplicationTaskAssessmentRun@ operation.
--
-- /Note:/ Consider using 'serviceAccessRoleArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarServiceAccessRoleArn :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarServiceAccessRoleArn = Lens.field @"serviceAccessRoleArn"
{-# INLINEABLE rtarServiceAccessRoleArn #-}
{-# DEPRECATED serviceAccessRoleArn "Use generic-lens or generic-optics with 'serviceAccessRoleArn' instead"  #-}

-- | Assessment run status. 
--
-- This status can have one of the following values:
--
--     * @"cancelling"@ – The assessment run was canceled by the @CancelReplicationTaskAssessmentRun@ operation.
--
--
--     * @"deleting"@ – The assessment run was deleted by the @DeleteReplicationTaskAssessmentRun@ operation.
--
--
--     * @"failed"@ – At least one individual assessment completed with a @failed@ status.
--
--
--     * @"error-provisioning"@ – An internal error occurred while resources were provisioned (during @provisioning@ status).
--
--
--     * @"error-executing"@ – An internal error occurred while individual assessments ran (during @running@ status).
--
--
--     * @"invalid state"@ – The assessment run is in an unknown state.
--
--
--     * @"passed"@ – All individual assessments have completed, and none has a @failed@ status.
--
--
--     * @"provisioning"@ – Resources required to run individual assessments are being provisioned.
--
--
--     * @"running"@ – Individual assessments are being run.
--
--
--     * @"starting"@ – The assessment run is starting, but resources are not yet being provisioned for individual assessments.
--
--
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarStatus :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.Text)
rtarStatus = Lens.field @"status"
{-# INLINEABLE rtarStatus #-}
{-# DEPRECATED status "Use generic-lens or generic-optics with 'status' instead"  #-}

instance Core.FromJSON ReplicationTaskAssessmentRun where
        parseJSON
          = Core.withObject "ReplicationTaskAssessmentRun" Core.$
              \ x ->
                ReplicationTaskAssessmentRun' Core.<$>
                  (x Core..:? "AssessmentProgress") Core.<*>
                    x Core..:? "AssessmentRunName"
                    Core.<*> x Core..:? "LastFailureMessage"
                    Core.<*> x Core..:? "ReplicationTaskArn"
                    Core.<*> x Core..:? "ReplicationTaskAssessmentRunArn"
                    Core.<*> x Core..:? "ReplicationTaskAssessmentRunCreationDate"
                    Core.<*> x Core..:? "ResultEncryptionMode"
                    Core.<*> x Core..:? "ResultKmsKeyArn"
                    Core.<*> x Core..:? "ResultLocationBucket"
                    Core.<*> x Core..:? "ResultLocationFolder"
                    Core.<*> x Core..:? "ServiceAccessRoleArn"
                    Core.<*> x Core..:? "Status"
