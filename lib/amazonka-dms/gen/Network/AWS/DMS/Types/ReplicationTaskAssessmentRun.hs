{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DMS.Types.ReplicationTaskAssessmentRun
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.DMS.Types.ReplicationTaskAssessmentRun
  ( ReplicationTaskAssessmentRun (..),

    -- * Smart constructor
    mkReplicationTaskAssessmentRun,

    -- * Lenses
    rtarStatus,
    rtarServiceAccessRoleARN,
    rtarReplicationTaskAssessmentRunCreationDate,
    rtarAssessmentProgress,
    rtarResultKMSKeyARN,
    rtarReplicationTaskARN,
    rtarResultLocationBucket,
    rtarResultLocationFolder,
    rtarResultEncryptionMode,
    rtarAssessmentRunName,
    rtarReplicationTaskAssessmentRunARN,
    rtarLastFailureMessage,
  )
where

import Network.AWS.DMS.Types.ReplicationTaskAssessmentRunProgress
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | Provides information that describes a premigration assessment run that you have started using the @StartReplicationTaskAssessmentRun@ operation.
--
-- Some of the information appears based on other operations that can return the @ReplicationTaskAssessmentRun@ object.
--
-- /See:/ 'mkReplicationTaskAssessmentRun' smart constructor.
data ReplicationTaskAssessmentRun = ReplicationTaskAssessmentRun'
  { status ::
      Lude.Maybe Lude.Text,
    serviceAccessRoleARN ::
      Lude.Maybe Lude.Text,
    replicationTaskAssessmentRunCreationDate ::
      Lude.Maybe Lude.Timestamp,
    assessmentProgress ::
      Lude.Maybe
        ReplicationTaskAssessmentRunProgress,
    resultKMSKeyARN ::
      Lude.Maybe Lude.Text,
    replicationTaskARN ::
      Lude.Maybe Lude.Text,
    resultLocationBucket ::
      Lude.Maybe Lude.Text,
    resultLocationFolder ::
      Lude.Maybe Lude.Text,
    resultEncryptionMode ::
      Lude.Maybe Lude.Text,
    assessmentRunName ::
      Lude.Maybe Lude.Text,
    replicationTaskAssessmentRunARN ::
      Lude.Maybe Lude.Text,
    lastFailureMessage ::
      Lude.Maybe Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ReplicationTaskAssessmentRun' with the minimum fields required to make a request.
--
-- * 'assessmentProgress' - Indication of the completion progress for the individual assessments specified to run.
-- * 'assessmentRunName' - Unique name of the assessment run.
-- * 'lastFailureMessage' - Last message generated by an individual assessment failure.
-- * 'replicationTaskARN' - ARN of the migration task associated with this premigration assessment run.
-- * 'replicationTaskAssessmentRunARN' - Amazon Resource Name (ARN) of this assessment run.
-- * 'replicationTaskAssessmentRunCreationDate' - Date on which the assessment run was created using the @StartReplicationTaskAssessmentRun@ operation.
-- * 'resultEncryptionMode' - Encryption mode used to encrypt the assessment run results.
-- * 'resultKMSKeyARN' - ARN of the AWS KMS encryption key used to encrypt the assessment run results.
-- * 'resultLocationBucket' - Amazon S3 bucket where AWS DMS stores the results of this assessment run.
-- * 'resultLocationFolder' - Folder in an Amazon S3 bucket where AWS DMS stores the results of this assessment run.
-- * 'serviceAccessRoleARN' - ARN of the service role used to start the assessment run using the @StartReplicationTaskAssessmentRun@ operation.
-- * 'status' - Assessment run status.
--
-- This status can have one of the following values:
--
--     * @"cancelling"@ – The assessment run was canceled by the @CancelReplicationTaskAssessmentRun@ operation.
--
--
--     * @"deleting"@ – The assessment run was deleted by the @DeleteReplicationTaskAssessmentRun@ operation.
--
--
--     * @"failed"@ – At least one individual assessment completed with a @failed@ status.
--
--
--     * @"error-provisioning"@ – An internal error occurred while resources were provisioned (during @provisioning@ status).
--
--
--     * @"error-executing"@ – An internal error occurred while individual assessments ran (during @running@ status).
--
--
--     * @"invalid state"@ – The assessment run is in an unknown state.
--
--
--     * @"passed"@ – All individual assessments have completed, and none has a @failed@ status.
--
--
--     * @"provisioning"@ – Resources required to run individual assessments are being provisioned.
--
--
--     * @"running"@ – Individual assessments are being run.
--
--
--     * @"starting"@ – The assessment run is starting, but resources are not yet being provisioned for individual assessments.
mkReplicationTaskAssessmentRun ::
  ReplicationTaskAssessmentRun
mkReplicationTaskAssessmentRun =
  ReplicationTaskAssessmentRun'
    { status = Lude.Nothing,
      serviceAccessRoleARN = Lude.Nothing,
      replicationTaskAssessmentRunCreationDate = Lude.Nothing,
      assessmentProgress = Lude.Nothing,
      resultKMSKeyARN = Lude.Nothing,
      replicationTaskARN = Lude.Nothing,
      resultLocationBucket = Lude.Nothing,
      resultLocationFolder = Lude.Nothing,
      resultEncryptionMode = Lude.Nothing,
      assessmentRunName = Lude.Nothing,
      replicationTaskAssessmentRunARN = Lude.Nothing,
      lastFailureMessage = Lude.Nothing
    }

-- | Assessment run status.
--
-- This status can have one of the following values:
--
--     * @"cancelling"@ – The assessment run was canceled by the @CancelReplicationTaskAssessmentRun@ operation.
--
--
--     * @"deleting"@ – The assessment run was deleted by the @DeleteReplicationTaskAssessmentRun@ operation.
--
--
--     * @"failed"@ – At least one individual assessment completed with a @failed@ status.
--
--
--     * @"error-provisioning"@ – An internal error occurred while resources were provisioned (during @provisioning@ status).
--
--
--     * @"error-executing"@ – An internal error occurred while individual assessments ran (during @running@ status).
--
--
--     * @"invalid state"@ – The assessment run is in an unknown state.
--
--
--     * @"passed"@ – All individual assessments have completed, and none has a @failed@ status.
--
--
--     * @"provisioning"@ – Resources required to run individual assessments are being provisioned.
--
--
--     * @"running"@ – Individual assessments are being run.
--
--
--     * @"starting"@ – The assessment run is starting, but resources are not yet being provisioned for individual assessments.
--
--
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarStatus :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarStatus = Lens.lens (status :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {status = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarStatus "Use generic-lens or generic-optics with 'status' instead." #-}

-- | ARN of the service role used to start the assessment run using the @StartReplicationTaskAssessmentRun@ operation.
--
-- /Note:/ Consider using 'serviceAccessRoleARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarServiceAccessRoleARN :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarServiceAccessRoleARN = Lens.lens (serviceAccessRoleARN :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {serviceAccessRoleARN = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarServiceAccessRoleARN "Use generic-lens or generic-optics with 'serviceAccessRoleARN' instead." #-}

-- | Date on which the assessment run was created using the @StartReplicationTaskAssessmentRun@ operation.
--
-- /Note:/ Consider using 'replicationTaskAssessmentRunCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskAssessmentRunCreationDate :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Timestamp)
rtarReplicationTaskAssessmentRunCreationDate = Lens.lens (replicationTaskAssessmentRunCreationDate :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Timestamp) (\s a -> s {replicationTaskAssessmentRunCreationDate = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarReplicationTaskAssessmentRunCreationDate "Use generic-lens or generic-optics with 'replicationTaskAssessmentRunCreationDate' instead." #-}

-- | Indication of the completion progress for the individual assessments specified to run.
--
-- /Note:/ Consider using 'assessmentProgress' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarAssessmentProgress :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe ReplicationTaskAssessmentRunProgress)
rtarAssessmentProgress = Lens.lens (assessmentProgress :: ReplicationTaskAssessmentRun -> Lude.Maybe ReplicationTaskAssessmentRunProgress) (\s a -> s {assessmentProgress = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarAssessmentProgress "Use generic-lens or generic-optics with 'assessmentProgress' instead." #-}

-- | ARN of the AWS KMS encryption key used to encrypt the assessment run results.
--
-- /Note:/ Consider using 'resultKMSKeyARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultKMSKeyARN :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarResultKMSKeyARN = Lens.lens (resultKMSKeyARN :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {resultKMSKeyARN = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarResultKMSKeyARN "Use generic-lens or generic-optics with 'resultKMSKeyARN' instead." #-}

-- | ARN of the migration task associated with this premigration assessment run.
--
-- /Note:/ Consider using 'replicationTaskARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskARN :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarReplicationTaskARN = Lens.lens (replicationTaskARN :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {replicationTaskARN = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarReplicationTaskARN "Use generic-lens or generic-optics with 'replicationTaskARN' instead." #-}

-- | Amazon S3 bucket where AWS DMS stores the results of this assessment run.
--
-- /Note:/ Consider using 'resultLocationBucket' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultLocationBucket :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarResultLocationBucket = Lens.lens (resultLocationBucket :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {resultLocationBucket = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarResultLocationBucket "Use generic-lens or generic-optics with 'resultLocationBucket' instead." #-}

-- | Folder in an Amazon S3 bucket where AWS DMS stores the results of this assessment run.
--
-- /Note:/ Consider using 'resultLocationFolder' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultLocationFolder :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarResultLocationFolder = Lens.lens (resultLocationFolder :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {resultLocationFolder = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarResultLocationFolder "Use generic-lens or generic-optics with 'resultLocationFolder' instead." #-}

-- | Encryption mode used to encrypt the assessment run results.
--
-- /Note:/ Consider using 'resultEncryptionMode' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultEncryptionMode :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarResultEncryptionMode = Lens.lens (resultEncryptionMode :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {resultEncryptionMode = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarResultEncryptionMode "Use generic-lens or generic-optics with 'resultEncryptionMode' instead." #-}

-- | Unique name of the assessment run.
--
-- /Note:/ Consider using 'assessmentRunName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarAssessmentRunName :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarAssessmentRunName = Lens.lens (assessmentRunName :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {assessmentRunName = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarAssessmentRunName "Use generic-lens or generic-optics with 'assessmentRunName' instead." #-}

-- | Amazon Resource Name (ARN) of this assessment run.
--
-- /Note:/ Consider using 'replicationTaskAssessmentRunARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskAssessmentRunARN :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarReplicationTaskAssessmentRunARN = Lens.lens (replicationTaskAssessmentRunARN :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {replicationTaskAssessmentRunARN = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarReplicationTaskAssessmentRunARN "Use generic-lens or generic-optics with 'replicationTaskAssessmentRunARN' instead." #-}

-- | Last message generated by an individual assessment failure.
--
-- /Note:/ Consider using 'lastFailureMessage' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarLastFailureMessage :: Lens.Lens' ReplicationTaskAssessmentRun (Lude.Maybe Lude.Text)
rtarLastFailureMessage = Lens.lens (lastFailureMessage :: ReplicationTaskAssessmentRun -> Lude.Maybe Lude.Text) (\s a -> s {lastFailureMessage = a} :: ReplicationTaskAssessmentRun)
{-# DEPRECATED rtarLastFailureMessage "Use generic-lens or generic-optics with 'lastFailureMessage' instead." #-}

instance Lude.FromJSON ReplicationTaskAssessmentRun where
  parseJSON =
    Lude.withObject
      "ReplicationTaskAssessmentRun"
      ( \x ->
          ReplicationTaskAssessmentRun'
            Lude.<$> (x Lude..:? "Status")
            Lude.<*> (x Lude..:? "ServiceAccessRoleArn")
            Lude.<*> (x Lude..:? "ReplicationTaskAssessmentRunCreationDate")
            Lude.<*> (x Lude..:? "AssessmentProgress")
            Lude.<*> (x Lude..:? "ResultKmsKeyArn")
            Lude.<*> (x Lude..:? "ReplicationTaskArn")
            Lude.<*> (x Lude..:? "ResultLocationBucket")
            Lude.<*> (x Lude..:? "ResultLocationFolder")
            Lude.<*> (x Lude..:? "ResultEncryptionMode")
            Lude.<*> (x Lude..:? "AssessmentRunName")
            Lude.<*> (x Lude..:? "ReplicationTaskAssessmentRunArn")
            Lude.<*> (x Lude..:? "LastFailureMessage")
      )
