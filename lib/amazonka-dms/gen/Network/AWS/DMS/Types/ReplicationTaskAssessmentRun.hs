{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DMS.Types.ReplicationTaskAssessmentRun
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.DMS.Types.ReplicationTaskAssessmentRun
  ( ReplicationTaskAssessmentRun (..),

    -- * Smart constructor
    mkReplicationTaskAssessmentRun,

    -- * Lenses
    rtarAssessmentProgress,
    rtarAssessmentRunName,
    rtarLastFailureMessage,
    rtarReplicationTaskArn,
    rtarReplicationTaskAssessmentRunArn,
    rtarReplicationTaskAssessmentRunCreationDate,
    rtarResultEncryptionMode,
    rtarResultKmsKeyArn,
    rtarResultLocationBucket,
    rtarResultLocationFolder,
    rtarServiceAccessRoleArn,
    rtarStatus,
  )
where

import qualified Network.AWS.DMS.Types.ReplicationTaskAssessmentRunProgress as Types
import qualified Network.AWS.DMS.Types.String as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | Provides information that describes a premigration assessment run that you have started using the @StartReplicationTaskAssessmentRun@ operation.
--
-- Some of the information appears based on other operations that can return the @ReplicationTaskAssessmentRun@ object.
--
-- /See:/ 'mkReplicationTaskAssessmentRun' smart constructor.
data ReplicationTaskAssessmentRun = ReplicationTaskAssessmentRun'
  { -- | Indication of the completion progress for the individual assessments specified to run.
    assessmentProgress :: Core.Maybe Types.ReplicationTaskAssessmentRunProgress,
    -- | Unique name of the assessment run.
    assessmentRunName :: Core.Maybe Types.String,
    -- | Last message generated by an individual assessment failure.
    lastFailureMessage :: Core.Maybe Types.String,
    -- | ARN of the migration task associated with this premigration assessment run.
    replicationTaskArn :: Core.Maybe Types.String,
    -- | Amazon Resource Name (ARN) of this assessment run.
    replicationTaskAssessmentRunArn :: Core.Maybe Types.String,
    -- | Date on which the assessment run was created using the @StartReplicationTaskAssessmentRun@ operation.
    replicationTaskAssessmentRunCreationDate :: Core.Maybe Core.NominalDiffTime,
    -- | Encryption mode used to encrypt the assessment run results.
    resultEncryptionMode :: Core.Maybe Types.String,
    -- | ARN of the AWS KMS encryption key used to encrypt the assessment run results.
    resultKmsKeyArn :: Core.Maybe Types.String,
    -- | Amazon S3 bucket where AWS DMS stores the results of this assessment run.
    resultLocationBucket :: Core.Maybe Types.String,
    -- | Folder in an Amazon S3 bucket where AWS DMS stores the results of this assessment run.
    resultLocationFolder :: Core.Maybe Types.String,
    -- | ARN of the service role used to start the assessment run using the @StartReplicationTaskAssessmentRun@ operation.
    serviceAccessRoleArn :: Core.Maybe Types.String,
    -- | Assessment run status.
    --
    -- This status can have one of the following values:
    --
    --     * @"cancelling"@ – The assessment run was canceled by the @CancelReplicationTaskAssessmentRun@ operation.
    --
    --
    --     * @"deleting"@ – The assessment run was deleted by the @DeleteReplicationTaskAssessmentRun@ operation.
    --
    --
    --     * @"failed"@ – At least one individual assessment completed with a @failed@ status.
    --
    --
    --     * @"error-provisioning"@ – An internal error occurred while resources were provisioned (during @provisioning@ status).
    --
    --
    --     * @"error-executing"@ – An internal error occurred while individual assessments ran (during @running@ status).
    --
    --
    --     * @"invalid state"@ – The assessment run is in an unknown state.
    --
    --
    --     * @"passed"@ – All individual assessments have completed, and none has a @failed@ status.
    --
    --
    --     * @"provisioning"@ – Resources required to run individual assessments are being provisioned.
    --
    --
    --     * @"running"@ – Individual assessments are being run.
    --
    --
    --     * @"starting"@ – The assessment run is starting, but resources are not yet being provisioned for individual assessments.
    status :: Core.Maybe Types.String
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'ReplicationTaskAssessmentRun' value with any optional fields omitted.
mkReplicationTaskAssessmentRun ::
  ReplicationTaskAssessmentRun
mkReplicationTaskAssessmentRun =
  ReplicationTaskAssessmentRun'
    { assessmentProgress = Core.Nothing,
      assessmentRunName = Core.Nothing,
      lastFailureMessage = Core.Nothing,
      replicationTaskArn = Core.Nothing,
      replicationTaskAssessmentRunArn = Core.Nothing,
      replicationTaskAssessmentRunCreationDate = Core.Nothing,
      resultEncryptionMode = Core.Nothing,
      resultKmsKeyArn = Core.Nothing,
      resultLocationBucket = Core.Nothing,
      resultLocationFolder = Core.Nothing,
      serviceAccessRoleArn = Core.Nothing,
      status = Core.Nothing
    }

-- | Indication of the completion progress for the individual assessments specified to run.
--
-- /Note:/ Consider using 'assessmentProgress' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarAssessmentProgress :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.ReplicationTaskAssessmentRunProgress)
rtarAssessmentProgress = Lens.field @"assessmentProgress"
{-# DEPRECATED rtarAssessmentProgress "Use generic-lens or generic-optics with 'assessmentProgress' instead." #-}

-- | Unique name of the assessment run.
--
-- /Note:/ Consider using 'assessmentRunName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarAssessmentRunName :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarAssessmentRunName = Lens.field @"assessmentRunName"
{-# DEPRECATED rtarAssessmentRunName "Use generic-lens or generic-optics with 'assessmentRunName' instead." #-}

-- | Last message generated by an individual assessment failure.
--
-- /Note:/ Consider using 'lastFailureMessage' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarLastFailureMessage :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarLastFailureMessage = Lens.field @"lastFailureMessage"
{-# DEPRECATED rtarLastFailureMessage "Use generic-lens or generic-optics with 'lastFailureMessage' instead." #-}

-- | ARN of the migration task associated with this premigration assessment run.
--
-- /Note:/ Consider using 'replicationTaskArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskArn :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarReplicationTaskArn = Lens.field @"replicationTaskArn"
{-# DEPRECATED rtarReplicationTaskArn "Use generic-lens or generic-optics with 'replicationTaskArn' instead." #-}

-- | Amazon Resource Name (ARN) of this assessment run.
--
-- /Note:/ Consider using 'replicationTaskAssessmentRunArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskAssessmentRunArn :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarReplicationTaskAssessmentRunArn = Lens.field @"replicationTaskAssessmentRunArn"
{-# DEPRECATED rtarReplicationTaskAssessmentRunArn "Use generic-lens or generic-optics with 'replicationTaskAssessmentRunArn' instead." #-}

-- | Date on which the assessment run was created using the @StartReplicationTaskAssessmentRun@ operation.
--
-- /Note:/ Consider using 'replicationTaskAssessmentRunCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarReplicationTaskAssessmentRunCreationDate :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Core.NominalDiffTime)
rtarReplicationTaskAssessmentRunCreationDate = Lens.field @"replicationTaskAssessmentRunCreationDate"
{-# DEPRECATED rtarReplicationTaskAssessmentRunCreationDate "Use generic-lens or generic-optics with 'replicationTaskAssessmentRunCreationDate' instead." #-}

-- | Encryption mode used to encrypt the assessment run results.
--
-- /Note:/ Consider using 'resultEncryptionMode' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultEncryptionMode :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarResultEncryptionMode = Lens.field @"resultEncryptionMode"
{-# DEPRECATED rtarResultEncryptionMode "Use generic-lens or generic-optics with 'resultEncryptionMode' instead." #-}

-- | ARN of the AWS KMS encryption key used to encrypt the assessment run results.
--
-- /Note:/ Consider using 'resultKmsKeyArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultKmsKeyArn :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarResultKmsKeyArn = Lens.field @"resultKmsKeyArn"
{-# DEPRECATED rtarResultKmsKeyArn "Use generic-lens or generic-optics with 'resultKmsKeyArn' instead." #-}

-- | Amazon S3 bucket where AWS DMS stores the results of this assessment run.
--
-- /Note:/ Consider using 'resultLocationBucket' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultLocationBucket :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarResultLocationBucket = Lens.field @"resultLocationBucket"
{-# DEPRECATED rtarResultLocationBucket "Use generic-lens or generic-optics with 'resultLocationBucket' instead." #-}

-- | Folder in an Amazon S3 bucket where AWS DMS stores the results of this assessment run.
--
-- /Note:/ Consider using 'resultLocationFolder' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarResultLocationFolder :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarResultLocationFolder = Lens.field @"resultLocationFolder"
{-# DEPRECATED rtarResultLocationFolder "Use generic-lens or generic-optics with 'resultLocationFolder' instead." #-}

-- | ARN of the service role used to start the assessment run using the @StartReplicationTaskAssessmentRun@ operation.
--
-- /Note:/ Consider using 'serviceAccessRoleArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarServiceAccessRoleArn :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarServiceAccessRoleArn = Lens.field @"serviceAccessRoleArn"
{-# DEPRECATED rtarServiceAccessRoleArn "Use generic-lens or generic-optics with 'serviceAccessRoleArn' instead." #-}

-- | Assessment run status.
--
-- This status can have one of the following values:
--
--     * @"cancelling"@ – The assessment run was canceled by the @CancelReplicationTaskAssessmentRun@ operation.
--
--
--     * @"deleting"@ – The assessment run was deleted by the @DeleteReplicationTaskAssessmentRun@ operation.
--
--
--     * @"failed"@ – At least one individual assessment completed with a @failed@ status.
--
--
--     * @"error-provisioning"@ – An internal error occurred while resources were provisioned (during @provisioning@ status).
--
--
--     * @"error-executing"@ – An internal error occurred while individual assessments ran (during @running@ status).
--
--
--     * @"invalid state"@ – The assessment run is in an unknown state.
--
--
--     * @"passed"@ – All individual assessments have completed, and none has a @failed@ status.
--
--
--     * @"provisioning"@ – Resources required to run individual assessments are being provisioned.
--
--
--     * @"running"@ – Individual assessments are being run.
--
--
--     * @"starting"@ – The assessment run is starting, but resources are not yet being provisioned for individual assessments.
--
--
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rtarStatus :: Lens.Lens' ReplicationTaskAssessmentRun (Core.Maybe Types.String)
rtarStatus = Lens.field @"status"
{-# DEPRECATED rtarStatus "Use generic-lens or generic-optics with 'status' instead." #-}

instance Core.FromJSON ReplicationTaskAssessmentRun where
  parseJSON =
    Core.withObject "ReplicationTaskAssessmentRun" Core.$
      \x ->
        ReplicationTaskAssessmentRun'
          Core.<$> (x Core..:? "AssessmentProgress")
          Core.<*> (x Core..:? "AssessmentRunName")
          Core.<*> (x Core..:? "LastFailureMessage")
          Core.<*> (x Core..:? "ReplicationTaskArn")
          Core.<*> (x Core..:? "ReplicationTaskAssessmentRunArn")
          Core.<*> (x Core..:? "ReplicationTaskAssessmentRunCreationDate")
          Core.<*> (x Core..:? "ResultEncryptionMode")
          Core.<*> (x Core..:? "ResultKmsKeyArn")
          Core.<*> (x Core..:? "ResultLocationBucket")
          Core.<*> (x Core..:? "ResultLocationFolder")
          Core.<*> (x Core..:? "ServiceAccessRoleArn")
          Core.<*> (x Core..:? "Status")
