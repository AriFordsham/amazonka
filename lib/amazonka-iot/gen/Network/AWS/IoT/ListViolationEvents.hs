{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IoT.ListViolationEvents
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
--
-- This operation returns paginated results.
module Network.AWS.IoT.ListViolationEvents
  ( -- * Creating a request
    ListViolationEvents (..),
    mkListViolationEvents,

    -- ** Request lenses
    lveNextToken,
    lveSecurityProfileName,
    lveThingName,
    lveMaxResults,
    lveStartTime,
    lveEndTime,

    -- * Destructuring the response
    ListViolationEventsResponse (..),
    mkListViolationEventsResponse,

    -- ** Response lenses
    lversViolationEvents,
    lversNextToken,
    lversResponseStatus,
  )
where

import Network.AWS.IoT.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Page
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkListViolationEvents' smart constructor.
data ListViolationEvents = ListViolationEvents'
  { nextToken ::
      Lude.Maybe Lude.Text,
    securityProfileName :: Lude.Maybe Lude.Text,
    thingName :: Lude.Maybe Lude.Text,
    maxResults :: Lude.Maybe Lude.Natural,
    startTime :: Lude.Timestamp,
    endTime :: Lude.Timestamp
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListViolationEvents' with the minimum fields required to make a request.
--
-- * 'endTime' - The end time for the alerts to be listed.
-- * 'maxResults' - The maximum number of results to return at one time.
-- * 'nextToken' - The token for the next set of results.
-- * 'securityProfileName' - A filter to limit results to those alerts generated by the specified security profile.
-- * 'startTime' - The start time for the alerts to be listed.
-- * 'thingName' - A filter to limit results to those alerts caused by the specified thing.
mkListViolationEvents ::
  -- | 'startTime'
  Lude.Timestamp ->
  -- | 'endTime'
  Lude.Timestamp ->
  ListViolationEvents
mkListViolationEvents pStartTime_ pEndTime_ =
  ListViolationEvents'
    { nextToken = Lude.Nothing,
      securityProfileName = Lude.Nothing,
      thingName = Lude.Nothing,
      maxResults = Lude.Nothing,
      startTime = pStartTime_,
      endTime = pEndTime_
    }

-- | The token for the next set of results.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveNextToken :: Lens.Lens' ListViolationEvents (Lude.Maybe Lude.Text)
lveNextToken = Lens.lens (nextToken :: ListViolationEvents -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListViolationEvents)
{-# DEPRECATED lveNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | A filter to limit results to those alerts generated by the specified security profile.
--
-- /Note:/ Consider using 'securityProfileName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveSecurityProfileName :: Lens.Lens' ListViolationEvents (Lude.Maybe Lude.Text)
lveSecurityProfileName = Lens.lens (securityProfileName :: ListViolationEvents -> Lude.Maybe Lude.Text) (\s a -> s {securityProfileName = a} :: ListViolationEvents)
{-# DEPRECATED lveSecurityProfileName "Use generic-lens or generic-optics with 'securityProfileName' instead." #-}

-- | A filter to limit results to those alerts caused by the specified thing.
--
-- /Note:/ Consider using 'thingName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveThingName :: Lens.Lens' ListViolationEvents (Lude.Maybe Lude.Text)
lveThingName = Lens.lens (thingName :: ListViolationEvents -> Lude.Maybe Lude.Text) (\s a -> s {thingName = a} :: ListViolationEvents)
{-# DEPRECATED lveThingName "Use generic-lens or generic-optics with 'thingName' instead." #-}

-- | The maximum number of results to return at one time.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveMaxResults :: Lens.Lens' ListViolationEvents (Lude.Maybe Lude.Natural)
lveMaxResults = Lens.lens (maxResults :: ListViolationEvents -> Lude.Maybe Lude.Natural) (\s a -> s {maxResults = a} :: ListViolationEvents)
{-# DEPRECATED lveMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

-- | The start time for the alerts to be listed.
--
-- /Note:/ Consider using 'startTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveStartTime :: Lens.Lens' ListViolationEvents Lude.Timestamp
lveStartTime = Lens.lens (startTime :: ListViolationEvents -> Lude.Timestamp) (\s a -> s {startTime = a} :: ListViolationEvents)
{-# DEPRECATED lveStartTime "Use generic-lens or generic-optics with 'startTime' instead." #-}

-- | The end time for the alerts to be listed.
--
-- /Note:/ Consider using 'endTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveEndTime :: Lens.Lens' ListViolationEvents Lude.Timestamp
lveEndTime = Lens.lens (endTime :: ListViolationEvents -> Lude.Timestamp) (\s a -> s {endTime = a} :: ListViolationEvents)
{-# DEPRECATED lveEndTime "Use generic-lens or generic-optics with 'endTime' instead." #-}

instance Page.AWSPager ListViolationEvents where
  page rq rs
    | Page.stop (rs Lens.^. lversNextToken) = Lude.Nothing
    | Page.stop (rs Lens.^. lversViolationEvents) = Lude.Nothing
    | Lude.otherwise =
      Lude.Just Lude.$
        rq
          Lude.& lveNextToken Lens..~ rs Lens.^. lversNextToken

instance Lude.AWSRequest ListViolationEvents where
  type Rs ListViolationEvents = ListViolationEventsResponse
  request = Req.get ioTService
  response =
    Res.receiveJSON
      ( \s h x ->
          ListViolationEventsResponse'
            Lude.<$> (x Lude..?> "violationEvents" Lude..!@ Lude.mempty)
            Lude.<*> (x Lude..?> "nextToken")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders ListViolationEvents where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath ListViolationEvents where
  toPath = Lude.const "/violation-events"

instance Lude.ToQuery ListViolationEvents where
  toQuery ListViolationEvents' {..} =
    Lude.mconcat
      [ "nextToken" Lude.=: nextToken,
        "securityProfileName" Lude.=: securityProfileName,
        "thingName" Lude.=: thingName,
        "maxResults" Lude.=: maxResults,
        "startTime" Lude.=: startTime,
        "endTime" Lude.=: endTime
      ]

-- | /See:/ 'mkListViolationEventsResponse' smart constructor.
data ListViolationEventsResponse = ListViolationEventsResponse'
  { violationEvents ::
      Lude.Maybe [ViolationEvent],
    nextToken :: Lude.Maybe Lude.Text,
    responseStatus :: Lude.Int
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListViolationEventsResponse' with the minimum fields required to make a request.
--
-- * 'nextToken' - A token that can be used to retrieve the next set of results, or @null@ if there are no additional results.
-- * 'responseStatus' - The response status code.
-- * 'violationEvents' - The security profile violation alerts issued for this account during the given time period, potentially filtered by security profile, behavior violated, or thing (device) violating.
mkListViolationEventsResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  ListViolationEventsResponse
mkListViolationEventsResponse pResponseStatus_ =
  ListViolationEventsResponse'
    { violationEvents = Lude.Nothing,
      nextToken = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | The security profile violation alerts issued for this account during the given time period, potentially filtered by security profile, behavior violated, or thing (device) violating.
--
-- /Note:/ Consider using 'violationEvents' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lversViolationEvents :: Lens.Lens' ListViolationEventsResponse (Lude.Maybe [ViolationEvent])
lversViolationEvents = Lens.lens (violationEvents :: ListViolationEventsResponse -> Lude.Maybe [ViolationEvent]) (\s a -> s {violationEvents = a} :: ListViolationEventsResponse)
{-# DEPRECATED lversViolationEvents "Use generic-lens or generic-optics with 'violationEvents' instead." #-}

-- | A token that can be used to retrieve the next set of results, or @null@ if there are no additional results.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lversNextToken :: Lens.Lens' ListViolationEventsResponse (Lude.Maybe Lude.Text)
lversNextToken = Lens.lens (nextToken :: ListViolationEventsResponse -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListViolationEventsResponse)
{-# DEPRECATED lversNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lversResponseStatus :: Lens.Lens' ListViolationEventsResponse Lude.Int
lversResponseStatus = Lens.lens (responseStatus :: ListViolationEventsResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: ListViolationEventsResponse)
{-# DEPRECATED lversResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
