{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IoT.ListViolationEvents
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
--
-- This operation returns paginated results.
module Network.AWS.IoT.ListViolationEvents
    (
    -- * Creating a request
      ListViolationEvents (..)
    , mkListViolationEvents
    -- ** Request lenses
    , lveStartTime
    , lveEndTime
    , lveMaxResults
    , lveNextToken
    , lveSecurityProfileName
    , lveThingName

    -- * Destructuring the response
    , ListViolationEventsResponse (..)
    , mkListViolationEventsResponse
    -- ** Response lenses
    , lverrsNextToken
    , lverrsViolationEvents
    , lverrsResponseStatus
    ) where

import qualified Network.AWS.IoT.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Pager
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkListViolationEvents' smart constructor.
data ListViolationEvents = ListViolationEvents'
  { startTime :: Core.NominalDiffTime
    -- ^ The start time for the alerts to be listed.
  , endTime :: Core.NominalDiffTime
    -- ^ The end time for the alerts to be listed.
  , maxResults :: Core.Maybe Core.Natural
    -- ^ The maximum number of results to return at one time.
  , nextToken :: Core.Maybe Types.NextToken
    -- ^ The token for the next set of results.
  , securityProfileName :: Core.Maybe Types.SecurityProfileName
    -- ^ A filter to limit results to those alerts generated by the specified security profile.
  , thingName :: Core.Maybe Types.DeviceDefenderThingName
    -- ^ A filter to limit results to those alerts caused by the specified thing.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'ListViolationEvents' value with any optional fields omitted.
mkListViolationEvents
    :: Core.NominalDiffTime -- ^ 'startTime'
    -> Core.NominalDiffTime -- ^ 'endTime'
    -> ListViolationEvents
mkListViolationEvents startTime endTime
  = ListViolationEvents'{startTime, endTime,
                         maxResults = Core.Nothing, nextToken = Core.Nothing,
                         securityProfileName = Core.Nothing, thingName = Core.Nothing}

-- | The start time for the alerts to be listed.
--
-- /Note:/ Consider using 'startTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveStartTime :: Lens.Lens' ListViolationEvents Core.NominalDiffTime
lveStartTime = Lens.field @"startTime"
{-# INLINEABLE lveStartTime #-}
{-# DEPRECATED startTime "Use generic-lens or generic-optics with 'startTime' instead"  #-}

-- | The end time for the alerts to be listed.
--
-- /Note:/ Consider using 'endTime' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveEndTime :: Lens.Lens' ListViolationEvents Core.NominalDiffTime
lveEndTime = Lens.field @"endTime"
{-# INLINEABLE lveEndTime #-}
{-# DEPRECATED endTime "Use generic-lens or generic-optics with 'endTime' instead"  #-}

-- | The maximum number of results to return at one time.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveMaxResults :: Lens.Lens' ListViolationEvents (Core.Maybe Core.Natural)
lveMaxResults = Lens.field @"maxResults"
{-# INLINEABLE lveMaxResults #-}
{-# DEPRECATED maxResults "Use generic-lens or generic-optics with 'maxResults' instead"  #-}

-- | The token for the next set of results.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveNextToken :: Lens.Lens' ListViolationEvents (Core.Maybe Types.NextToken)
lveNextToken = Lens.field @"nextToken"
{-# INLINEABLE lveNextToken #-}
{-# DEPRECATED nextToken "Use generic-lens or generic-optics with 'nextToken' instead"  #-}

-- | A filter to limit results to those alerts generated by the specified security profile.
--
-- /Note:/ Consider using 'securityProfileName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveSecurityProfileName :: Lens.Lens' ListViolationEvents (Core.Maybe Types.SecurityProfileName)
lveSecurityProfileName = Lens.field @"securityProfileName"
{-# INLINEABLE lveSecurityProfileName #-}
{-# DEPRECATED securityProfileName "Use generic-lens or generic-optics with 'securityProfileName' instead"  #-}

-- | A filter to limit results to those alerts caused by the specified thing.
--
-- /Note:/ Consider using 'thingName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lveThingName :: Lens.Lens' ListViolationEvents (Core.Maybe Types.DeviceDefenderThingName)
lveThingName = Lens.field @"thingName"
{-# INLINEABLE lveThingName #-}
{-# DEPRECATED thingName "Use generic-lens or generic-optics with 'thingName' instead"  #-}

instance Core.ToQuery ListViolationEvents where
        toQuery ListViolationEvents{..}
          = Core.toQueryPair "startTime" startTime Core.<>
              Core.toQueryPair "endTime" endTime
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "maxResults") maxResults
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "nextToken") nextToken
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "securityProfileName")
                securityProfileName
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "thingName") thingName

instance Core.ToHeaders ListViolationEvents where
        toHeaders _ = Core.pure Core.mempty

instance Core.AWSRequest ListViolationEvents where
        type Rs ListViolationEvents = ListViolationEventsResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.GET, Core._rqPath = "/violation-events",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = ""}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 ListViolationEventsResponse' Core.<$>
                   (x Core..:? "nextToken") Core.<*> x Core..:? "violationEvents"
                     Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

instance Pager.AWSPager ListViolationEvents where
        page rq rs
          | Pager.stop (rs Lens.^. Lens.field @"nextToken") = Core.Nothing
          | Pager.stop
              (rs Lens.^? Lens.field @"violationEvents" Core.. Lens._Just)
            = Core.Nothing
          | Core.otherwise =
            Core.Just
              (rq Core.&
                 Lens.field @"nextToken" Lens..~ rs Lens.^. Lens.field @"nextToken")

-- | /See:/ 'mkListViolationEventsResponse' smart constructor.
data ListViolationEventsResponse = ListViolationEventsResponse'
  { nextToken :: Core.Maybe Types.NextToken
    -- ^ A token that can be used to retrieve the next set of results, or @null@ if there are no additional results.
  , violationEvents :: Core.Maybe [Types.ViolationEvent]
    -- ^ The security profile violation alerts issued for this account during the given time period, potentially filtered by security profile, behavior violated, or thing (device) violating.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'ListViolationEventsResponse' value with any optional fields omitted.
mkListViolationEventsResponse
    :: Core.Int -- ^ 'responseStatus'
    -> ListViolationEventsResponse
mkListViolationEventsResponse responseStatus
  = ListViolationEventsResponse'{nextToken = Core.Nothing,
                                 violationEvents = Core.Nothing, responseStatus}

-- | A token that can be used to retrieve the next set of results, or @null@ if there are no additional results.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lverrsNextToken :: Lens.Lens' ListViolationEventsResponse (Core.Maybe Types.NextToken)
lverrsNextToken = Lens.field @"nextToken"
{-# INLINEABLE lverrsNextToken #-}
{-# DEPRECATED nextToken "Use generic-lens or generic-optics with 'nextToken' instead"  #-}

-- | The security profile violation alerts issued for this account during the given time period, potentially filtered by security profile, behavior violated, or thing (device) violating.
--
-- /Note:/ Consider using 'violationEvents' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lverrsViolationEvents :: Lens.Lens' ListViolationEventsResponse (Core.Maybe [Types.ViolationEvent])
lverrsViolationEvents = Lens.field @"violationEvents"
{-# INLINEABLE lverrsViolationEvents #-}
{-# DEPRECATED violationEvents "Use generic-lens or generic-optics with 'violationEvents' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lverrsResponseStatus :: Lens.Lens' ListViolationEventsResponse Core.Int
lverrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE lverrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
