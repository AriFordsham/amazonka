{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DeviceFarm.Types.Artifact
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.DeviceFarm.Types.Artifact
  ( Artifact (..),

    -- * Smart constructor
    mkArtifact,

    -- * Lenses
    aArn,
    aUrl,
    aExtension,
    aName,
    aType,
  )
where

import Network.AWS.DeviceFarm.Types.ArtifactType
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | Represents the output of a test. Examples of artifacts include logs and screenshots.
--
-- /See:/ 'mkArtifact' smart constructor.
data Artifact = Artifact'
  { arn :: Lude.Maybe Lude.Text,
    url :: Lude.Maybe Lude.Text,
    extension :: Lude.Maybe Lude.Text,
    name :: Lude.Maybe Lude.Text,
    type' :: Lude.Maybe ArtifactType
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'Artifact' with the minimum fields required to make a request.
--
-- * 'arn' - The artifact's ARN.
-- * 'extension' - The artifact's file extension.
-- * 'name' - The artifact's name.
-- * 'type'' - The artifact's type.
--
-- Allowed values include the following:
--
--     * UNKNOWN
--
--
--     * SCREENSHOT
--
--
--     * DEVICE_LOG
--
--
--     * MESSAGE_LOG
--
--
--     * VIDEO_LOG
--
--
--     * RESULT_LOG
--
--
--     * SERVICE_LOG
--
--
--     * WEBKIT_LOG
--
--
--     * INSTRUMENTATION_OUTPUT
--
--
--     * EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.
--
--
--     * CALABASH_JSON_OUTPUT
--
--
--     * CALABASH_PRETTY_OUTPUT
--
--
--     * CALABASH_STANDARD_OUTPUT
--
--
--     * CALABASH_JAVA_XML_OUTPUT
--
--
--     * AUTOMATION_OUTPUT
--
--
--     * APPIUM_SERVER_OUTPUT
--
--
--     * APPIUM_JAVA_OUTPUT
--
--
--     * APPIUM_JAVA_XML_OUTPUT
--
--
--     * APPIUM_PYTHON_OUTPUT
--
--
--     * APPIUM_PYTHON_XML_OUTPUT
--
--
--     * EXPLORER_EVENT_LOG
--
--
--     * EXPLORER_SUMMARY_LOG
--
--
--     * APPLICATION_CRASH_REPORT
--
--
--     * XCTEST_LOG
--
--
--     * VIDEO
--
--
--     * CUSTOMER_ARTIFACT
--
--
--     * CUSTOMER_ARTIFACT_LOG
--
--
--     * TESTSPEC_OUTPUT
--
--
-- * 'url' - The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.
mkArtifact ::
  Artifact
mkArtifact =
  Artifact'
    { arn = Lude.Nothing,
      url = Lude.Nothing,
      extension = Lude.Nothing,
      name = Lude.Nothing,
      type' = Lude.Nothing
    }

-- | The artifact's ARN.
--
-- /Note:/ Consider using 'arn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aArn :: Lens.Lens' Artifact (Lude.Maybe Lude.Text)
aArn = Lens.lens (arn :: Artifact -> Lude.Maybe Lude.Text) (\s a -> s {arn = a} :: Artifact)
{-# DEPRECATED aArn "Use generic-lens or generic-optics with 'arn' instead." #-}

-- | The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.
--
-- /Note:/ Consider using 'url' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aUrl :: Lens.Lens' Artifact (Lude.Maybe Lude.Text)
aUrl = Lens.lens (url :: Artifact -> Lude.Maybe Lude.Text) (\s a -> s {url = a} :: Artifact)
{-# DEPRECATED aUrl "Use generic-lens or generic-optics with 'url' instead." #-}

-- | The artifact's file extension.
--
-- /Note:/ Consider using 'extension' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aExtension :: Lens.Lens' Artifact (Lude.Maybe Lude.Text)
aExtension = Lens.lens (extension :: Artifact -> Lude.Maybe Lude.Text) (\s a -> s {extension = a} :: Artifact)
{-# DEPRECATED aExtension "Use generic-lens or generic-optics with 'extension' instead." #-}

-- | The artifact's name.
--
-- /Note:/ Consider using 'name' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aName :: Lens.Lens' Artifact (Lude.Maybe Lude.Text)
aName = Lens.lens (name :: Artifact -> Lude.Maybe Lude.Text) (\s a -> s {name = a} :: Artifact)
{-# DEPRECATED aName "Use generic-lens or generic-optics with 'name' instead." #-}

-- | The artifact's type.
--
-- Allowed values include the following:
--
--     * UNKNOWN
--
--
--     * SCREENSHOT
--
--
--     * DEVICE_LOG
--
--
--     * MESSAGE_LOG
--
--
--     * VIDEO_LOG
--
--
--     * RESULT_LOG
--
--
--     * SERVICE_LOG
--
--
--     * WEBKIT_LOG
--
--
--     * INSTRUMENTATION_OUTPUT
--
--
--     * EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.
--
--
--     * CALABASH_JSON_OUTPUT
--
--
--     * CALABASH_PRETTY_OUTPUT
--
--
--     * CALABASH_STANDARD_OUTPUT
--
--
--     * CALABASH_JAVA_XML_OUTPUT
--
--
--     * AUTOMATION_OUTPUT
--
--
--     * APPIUM_SERVER_OUTPUT
--
--
--     * APPIUM_JAVA_OUTPUT
--
--
--     * APPIUM_JAVA_XML_OUTPUT
--
--
--     * APPIUM_PYTHON_OUTPUT
--
--
--     * APPIUM_PYTHON_XML_OUTPUT
--
--
--     * EXPLORER_EVENT_LOG
--
--
--     * EXPLORER_SUMMARY_LOG
--
--
--     * APPLICATION_CRASH_REPORT
--
--
--     * XCTEST_LOG
--
--
--     * VIDEO
--
--
--     * CUSTOMER_ARTIFACT
--
--
--     * CUSTOMER_ARTIFACT_LOG
--
--
--     * TESTSPEC_OUTPUT
--
--
--
-- /Note:/ Consider using 'type'' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aType :: Lens.Lens' Artifact (Lude.Maybe ArtifactType)
aType = Lens.lens (type' :: Artifact -> Lude.Maybe ArtifactType) (\s a -> s {type' = a} :: Artifact)
{-# DEPRECATED aType "Use generic-lens or generic-optics with 'type'' instead." #-}

instance Lude.FromJSON Artifact where
  parseJSON =
    Lude.withObject
      "Artifact"
      ( \x ->
          Artifact'
            Lude.<$> (x Lude..:? "arn")
            Lude.<*> (x Lude..:? "url")
            Lude.<*> (x Lude..:? "extension")
            Lude.<*> (x Lude..:? "name")
            Lude.<*> (x Lude..:? "type")
      )
