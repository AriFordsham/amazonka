{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DeviceFarm.Types.Artifact
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.DeviceFarm.Types.Artifact
  ( Artifact (..),

    -- * Smart constructor
    mkArtifact,

    -- * Lenses
    aArn,
    aExtension,
    aName,
    aType,
    aUrl,
  )
where

import qualified Network.AWS.DeviceFarm.Types.Arn as Types
import qualified Network.AWS.DeviceFarm.Types.ArtifactType as Types
import qualified Network.AWS.DeviceFarm.Types.Name as Types
import qualified Network.AWS.DeviceFarm.Types.String as Types
import qualified Network.AWS.DeviceFarm.Types.URL as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | Represents the output of a test. Examples of artifacts include logs and screenshots.
--
-- /See:/ 'mkArtifact' smart constructor.
data Artifact = Artifact'
  { -- | The artifact's ARN.
    arn :: Core.Maybe Types.Arn,
    -- | The artifact's file extension.
    extension :: Core.Maybe Types.String,
    -- | The artifact's name.
    name :: Core.Maybe Types.Name,
    -- | The artifact's type.
    --
    -- Allowed values include the following:
    --
    --     * UNKNOWN
    --
    --
    --     * SCREENSHOT
    --
    --
    --     * DEVICE_LOG
    --
    --
    --     * MESSAGE_LOG
    --
    --
    --     * VIDEO_LOG
    --
    --
    --     * RESULT_LOG
    --
    --
    --     * SERVICE_LOG
    --
    --
    --     * WEBKIT_LOG
    --
    --
    --     * INSTRUMENTATION_OUTPUT
    --
    --
    --     * EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.
    --
    --
    --     * CALABASH_JSON_OUTPUT
    --
    --
    --     * CALABASH_PRETTY_OUTPUT
    --
    --
    --     * CALABASH_STANDARD_OUTPUT
    --
    --
    --     * CALABASH_JAVA_XML_OUTPUT
    --
    --
    --     * AUTOMATION_OUTPUT
    --
    --
    --     * APPIUM_SERVER_OUTPUT
    --
    --
    --     * APPIUM_JAVA_OUTPUT
    --
    --
    --     * APPIUM_JAVA_XML_OUTPUT
    --
    --
    --     * APPIUM_PYTHON_OUTPUT
    --
    --
    --     * APPIUM_PYTHON_XML_OUTPUT
    --
    --
    --     * EXPLORER_EVENT_LOG
    --
    --
    --     * EXPLORER_SUMMARY_LOG
    --
    --
    --     * APPLICATION_CRASH_REPORT
    --
    --
    --     * XCTEST_LOG
    --
    --
    --     * VIDEO
    --
    --
    --     * CUSTOMER_ARTIFACT
    --
    --
    --     * CUSTOMER_ARTIFACT_LOG
    --
    --
    --     * TESTSPEC_OUTPUT
    type' :: Core.Maybe Types.ArtifactType,
    -- | The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.
    url :: Core.Maybe Types.URL
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'Artifact' value with any optional fields omitted.
mkArtifact ::
  Artifact
mkArtifact =
  Artifact'
    { arn = Core.Nothing,
      extension = Core.Nothing,
      name = Core.Nothing,
      type' = Core.Nothing,
      url = Core.Nothing
    }

-- | The artifact's ARN.
--
-- /Note:/ Consider using 'arn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aArn :: Lens.Lens' Artifact (Core.Maybe Types.Arn)
aArn = Lens.field @"arn"
{-# DEPRECATED aArn "Use generic-lens or generic-optics with 'arn' instead." #-}

-- | The artifact's file extension.
--
-- /Note:/ Consider using 'extension' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aExtension :: Lens.Lens' Artifact (Core.Maybe Types.String)
aExtension = Lens.field @"extension"
{-# DEPRECATED aExtension "Use generic-lens or generic-optics with 'extension' instead." #-}

-- | The artifact's name.
--
-- /Note:/ Consider using 'name' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aName :: Lens.Lens' Artifact (Core.Maybe Types.Name)
aName = Lens.field @"name"
{-# DEPRECATED aName "Use generic-lens or generic-optics with 'name' instead." #-}

-- | The artifact's type.
--
-- Allowed values include the following:
--
--     * UNKNOWN
--
--
--     * SCREENSHOT
--
--
--     * DEVICE_LOG
--
--
--     * MESSAGE_LOG
--
--
--     * VIDEO_LOG
--
--
--     * RESULT_LOG
--
--
--     * SERVICE_LOG
--
--
--     * WEBKIT_LOG
--
--
--     * INSTRUMENTATION_OUTPUT
--
--
--     * EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.
--
--
--     * CALABASH_JSON_OUTPUT
--
--
--     * CALABASH_PRETTY_OUTPUT
--
--
--     * CALABASH_STANDARD_OUTPUT
--
--
--     * CALABASH_JAVA_XML_OUTPUT
--
--
--     * AUTOMATION_OUTPUT
--
--
--     * APPIUM_SERVER_OUTPUT
--
--
--     * APPIUM_JAVA_OUTPUT
--
--
--     * APPIUM_JAVA_XML_OUTPUT
--
--
--     * APPIUM_PYTHON_OUTPUT
--
--
--     * APPIUM_PYTHON_XML_OUTPUT
--
--
--     * EXPLORER_EVENT_LOG
--
--
--     * EXPLORER_SUMMARY_LOG
--
--
--     * APPLICATION_CRASH_REPORT
--
--
--     * XCTEST_LOG
--
--
--     * VIDEO
--
--
--     * CUSTOMER_ARTIFACT
--
--
--     * CUSTOMER_ARTIFACT_LOG
--
--
--     * TESTSPEC_OUTPUT
--
--
--
-- /Note:/ Consider using 'type'' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aType :: Lens.Lens' Artifact (Core.Maybe Types.ArtifactType)
aType = Lens.field @"type'"
{-# DEPRECATED aType "Use generic-lens or generic-optics with 'type'' instead." #-}

-- | The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.
--
-- /Note:/ Consider using 'url' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
aUrl :: Lens.Lens' Artifact (Core.Maybe Types.URL)
aUrl = Lens.field @"url"
{-# DEPRECATED aUrl "Use generic-lens or generic-optics with 'url' instead." #-}

instance Core.FromJSON Artifact where
  parseJSON =
    Core.withObject "Artifact" Core.$
      \x ->
        Artifact'
          Core.<$> (x Core..:? "arn")
          Core.<*> (x Core..:? "extension")
          Core.<*> (x Core..:? "name")
          Core.<*> (x Core..:? "type")
          Core.<*> (x Core..:? "url")
