{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DeviceFarm.Types.CustomerArtifactPaths
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.DeviceFarm.Types.CustomerArtifactPaths
  ( CustomerArtifactPaths (..)
  -- * Smart constructor
  , mkCustomerArtifactPaths
  -- * Lenses
  , capAndroidPaths
  , capDeviceHostPaths
  , capIosPaths
  ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the device or in the test environment, are pulled from.
--
-- Specify @deviceHostPaths@ and optionally specify either @iosPaths@ or @androidPaths@ .
-- For web app tests, you can specify both @iosPaths@ and @androidPaths@ .
--
-- /See:/ 'mkCustomerArtifactPaths' smart constructor.
data CustomerArtifactPaths = CustomerArtifactPaths'
  { androidPaths :: Core.Maybe [Core.Text]
    -- ^ Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.
  , deviceHostPaths :: Core.Maybe [Core.Text]
    -- ^ Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.
  , iosPaths :: Core.Maybe [Core.Text]
    -- ^ Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CustomerArtifactPaths' value with any optional fields omitted.
mkCustomerArtifactPaths
    :: CustomerArtifactPaths
mkCustomerArtifactPaths
  = CustomerArtifactPaths'{androidPaths = Core.Nothing,
                           deviceHostPaths = Core.Nothing, iosPaths = Core.Nothing}

-- | Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.
--
-- /Note:/ Consider using 'androidPaths' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
capAndroidPaths :: Lens.Lens' CustomerArtifactPaths (Core.Maybe [Core.Text])
capAndroidPaths = Lens.field @"androidPaths"
{-# INLINEABLE capAndroidPaths #-}
{-# DEPRECATED androidPaths "Use generic-lens or generic-optics with 'androidPaths' instead"  #-}

-- | Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.
--
-- /Note:/ Consider using 'deviceHostPaths' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
capDeviceHostPaths :: Lens.Lens' CustomerArtifactPaths (Core.Maybe [Core.Text])
capDeviceHostPaths = Lens.field @"deviceHostPaths"
{-# INLINEABLE capDeviceHostPaths #-}
{-# DEPRECATED deviceHostPaths "Use generic-lens or generic-optics with 'deviceHostPaths' instead"  #-}

-- | Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.
--
-- /Note:/ Consider using 'iosPaths' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
capIosPaths :: Lens.Lens' CustomerArtifactPaths (Core.Maybe [Core.Text])
capIosPaths = Lens.field @"iosPaths"
{-# INLINEABLE capIosPaths #-}
{-# DEPRECATED iosPaths "Use generic-lens or generic-optics with 'iosPaths' instead"  #-}

instance Core.FromJSON CustomerArtifactPaths where
        toJSON CustomerArtifactPaths{..}
          = Core.object
              (Core.catMaybes
                 [("androidPaths" Core..=) Core.<$> androidPaths,
                  ("deviceHostPaths" Core..=) Core.<$> deviceHostPaths,
                  ("iosPaths" Core..=) Core.<$> iosPaths])

instance Core.FromJSON CustomerArtifactPaths where
        parseJSON
          = Core.withObject "CustomerArtifactPaths" Core.$
              \ x ->
                CustomerArtifactPaths' Core.<$>
                  (x Core..:? "androidPaths") Core.<*> x Core..:? "deviceHostPaths"
                    Core.<*> x Core..:? "iosPaths"
