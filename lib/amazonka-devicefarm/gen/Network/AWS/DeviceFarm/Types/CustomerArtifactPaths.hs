{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.DeviceFarm.Types.CustomerArtifactPaths
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.DeviceFarm.Types.CustomerArtifactPaths
  ( CustomerArtifactPaths (..),

    -- * Smart constructor
    mkCustomerArtifactPaths,

    -- * Lenses
    capAndroidPaths,
    capDeviceHostPaths,
    capIosPaths,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the device or in the test environment, are pulled from.
--
-- Specify @deviceHostPaths@ and optionally specify either @iosPaths@ or @androidPaths@ .
-- For web app tests, you can specify both @iosPaths@ and @androidPaths@ .
--
-- /See:/ 'mkCustomerArtifactPaths' smart constructor.
data CustomerArtifactPaths = CustomerArtifactPaths'
  { -- | Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.
    androidPaths :: Lude.Maybe [Lude.Text],
    -- | Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.
    deviceHostPaths :: Lude.Maybe [Lude.Text],
    -- | Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.
    iosPaths :: Lude.Maybe [Lude.Text]
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CustomerArtifactPaths' with the minimum fields required to make a request.
--
-- * 'androidPaths' - Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.
-- * 'deviceHostPaths' - Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.
-- * 'iosPaths' - Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.
mkCustomerArtifactPaths ::
  CustomerArtifactPaths
mkCustomerArtifactPaths =
  CustomerArtifactPaths'
    { androidPaths = Lude.Nothing,
      deviceHostPaths = Lude.Nothing,
      iosPaths = Lude.Nothing
    }

-- | Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from.
--
-- /Note:/ Consider using 'androidPaths' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
capAndroidPaths :: Lens.Lens' CustomerArtifactPaths (Lude.Maybe [Lude.Text])
capAndroidPaths = Lens.lens (androidPaths :: CustomerArtifactPaths -> Lude.Maybe [Lude.Text]) (\s a -> s {androidPaths = a} :: CustomerArtifactPaths)
{-# DEPRECATED capAndroidPaths "Use generic-lens or generic-optics with 'androidPaths' instead." #-}

-- | Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from.
--
-- /Note:/ Consider using 'deviceHostPaths' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
capDeviceHostPaths :: Lens.Lens' CustomerArtifactPaths (Lude.Maybe [Lude.Text])
capDeviceHostPaths = Lens.lens (deviceHostPaths :: CustomerArtifactPaths -> Lude.Maybe [Lude.Text]) (\s a -> s {deviceHostPaths = a} :: CustomerArtifactPaths)
{-# DEPRECATED capDeviceHostPaths "Use generic-lens or generic-optics with 'deviceHostPaths' instead." #-}

-- | Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from.
--
-- /Note:/ Consider using 'iosPaths' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
capIosPaths :: Lens.Lens' CustomerArtifactPaths (Lude.Maybe [Lude.Text])
capIosPaths = Lens.lens (iosPaths :: CustomerArtifactPaths -> Lude.Maybe [Lude.Text]) (\s a -> s {iosPaths = a} :: CustomerArtifactPaths)
{-# DEPRECATED capIosPaths "Use generic-lens or generic-optics with 'iosPaths' instead." #-}

instance Lude.FromJSON CustomerArtifactPaths where
  parseJSON =
    Lude.withObject
      "CustomerArtifactPaths"
      ( \x ->
          CustomerArtifactPaths'
            Lude.<$> (x Lude..:? "androidPaths" Lude..!= Lude.mempty)
            Lude.<*> (x Lude..:? "deviceHostPaths" Lude..!= Lude.mempty)
            Lude.<*> (x Lude..:? "iosPaths" Lude..!= Lude.mempty)
      )

instance Lude.ToJSON CustomerArtifactPaths where
  toJSON CustomerArtifactPaths' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("androidPaths" Lude..=) Lude.<$> androidPaths,
            ("deviceHostPaths" Lude..=) Lude.<$> deviceHostPaths,
            ("iosPaths" Lude..=) Lude.<$> iosPaths
          ]
      )
