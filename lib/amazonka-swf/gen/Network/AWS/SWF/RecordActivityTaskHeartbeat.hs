{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.RecordActivityTaskHeartbeat
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by activity workers to report to the service that the 'ActivityTask' represented by the specified @taskToken@ is still making progress. The worker can also specify details of the progress, for example percent complete, using the @details@ parameter. This action can also be used by the worker as a mechanism to check if cancellation is being requested for the activity task. If a cancellation is being attempted for the specified task, then the boolean @cancelRequested@ flag returned by the service is set to @true@ .
--
-- This action resets the @taskHeartbeatTimeout@ clock. The @taskHeartbeatTimeout@ is specified in 'RegisterActivityType' .
-- This action doesn't in itself create an event in the workflow execution history. However, if the task times out, the workflow execution history contains a @ActivityTaskTimedOut@ event that contains the information from the last heartbeat generated by the activity worker.
-- /Important:/ If the @cancelRequested@ flag returns @true@ , a cancellation is being attempted. If the worker can cancel the activity, it should respond with 'RespondActivityTaskCanceled' . Otherwise, it should ignore the cancellation request.
-- __Access Control__
-- You can use IAM policies to control this action's access to Amazon SWF resources as follows:
--
--     * Use a @Resource@ element with the domain name to limit the action to only specified domains.
--
--
--     * Use an @Action@ element to allow or deny permission to call this action.
--
--
--     * You cannot use an IAM policy to constrain this action's parameters.
--
--
-- If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's @cause@ parameter is set to @OPERATION_NOT_PERMITTED@ . For details and example IAM policies, see <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html Using IAM to Manage Access to Amazon SWF Workflows> in the /Amazon SWF Developer Guide/ .
module Network.AWS.SWF.RecordActivityTaskHeartbeat
  ( -- * Creating a request
    RecordActivityTaskHeartbeat (..),
    mkRecordActivityTaskHeartbeat,

    -- ** Request lenses
    rathDetails,
    rathTaskToken,

    -- * Destructuring the response
    RecordActivityTaskHeartbeatResponse (..),
    mkRecordActivityTaskHeartbeatResponse,

    -- ** Response lenses
    rathrsResponseStatus,
    rathrsCancelRequested,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.SWF.Types

-- | /See:/ 'mkRecordActivityTaskHeartbeat' smart constructor.
data RecordActivityTaskHeartbeat = RecordActivityTaskHeartbeat'
  { details ::
      Lude.Maybe Lude.Text,
    taskToken :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RecordActivityTaskHeartbeat' with the minimum fields required to make a request.
--
-- * 'details' - If specified, contains details about the progress of the task.
-- * 'taskToken' - The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
mkRecordActivityTaskHeartbeat ::
  -- | 'taskToken'
  Lude.Text ->
  RecordActivityTaskHeartbeat
mkRecordActivityTaskHeartbeat pTaskToken_ =
  RecordActivityTaskHeartbeat'
    { details = Lude.Nothing,
      taskToken = pTaskToken_
    }

-- | If specified, contains details about the progress of the task.
--
-- /Note:/ Consider using 'details' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rathDetails :: Lens.Lens' RecordActivityTaskHeartbeat (Lude.Maybe Lude.Text)
rathDetails = Lens.lens (details :: RecordActivityTaskHeartbeat -> Lude.Maybe Lude.Text) (\s a -> s {details = a} :: RecordActivityTaskHeartbeat)
{-# DEPRECATED rathDetails "Use generic-lens or generic-optics with 'details' instead." #-}

-- | The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rathTaskToken :: Lens.Lens' RecordActivityTaskHeartbeat Lude.Text
rathTaskToken = Lens.lens (taskToken :: RecordActivityTaskHeartbeat -> Lude.Text) (\s a -> s {taskToken = a} :: RecordActivityTaskHeartbeat)
{-# DEPRECATED rathTaskToken "Use generic-lens or generic-optics with 'taskToken' instead." #-}

instance Lude.AWSRequest RecordActivityTaskHeartbeat where
  type
    Rs RecordActivityTaskHeartbeat =
      RecordActivityTaskHeartbeatResponse
  request = Req.postJSON swfService
  response =
    Res.receiveJSON
      ( \s h x ->
          RecordActivityTaskHeartbeatResponse'
            Lude.<$> (Lude.pure (Lude.fromEnum s))
            Lude.<*> (x Lude..:> "cancelRequested")
      )

instance Lude.ToHeaders RecordActivityTaskHeartbeat where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ( "SimpleWorkflowService.RecordActivityTaskHeartbeat" ::
                          Lude.ByteString
                      ),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.0" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON RecordActivityTaskHeartbeat where
  toJSON RecordActivityTaskHeartbeat' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("details" Lude..=) Lude.<$> details,
            Lude.Just ("taskToken" Lude..= taskToken)
          ]
      )

instance Lude.ToPath RecordActivityTaskHeartbeat where
  toPath = Lude.const "/"

instance Lude.ToQuery RecordActivityTaskHeartbeat where
  toQuery = Lude.const Lude.mempty

-- | Status information about an activity task.
--
-- /See:/ 'mkRecordActivityTaskHeartbeatResponse' smart constructor.
data RecordActivityTaskHeartbeatResponse = RecordActivityTaskHeartbeatResponse'
  { responseStatus ::
      Lude.Int,
    cancelRequested ::
      Lude.Bool
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RecordActivityTaskHeartbeatResponse' with the minimum fields required to make a request.
--
-- * 'cancelRequested' - Set to @true@ if cancellation of the task is requested.
-- * 'responseStatus' - The response status code.
mkRecordActivityTaskHeartbeatResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  -- | 'cancelRequested'
  Lude.Bool ->
  RecordActivityTaskHeartbeatResponse
mkRecordActivityTaskHeartbeatResponse
  pResponseStatus_
  pCancelRequested_ =
    RecordActivityTaskHeartbeatResponse'
      { responseStatus =
          pResponseStatus_,
        cancelRequested = pCancelRequested_
      }

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rathrsResponseStatus :: Lens.Lens' RecordActivityTaskHeartbeatResponse Lude.Int
rathrsResponseStatus = Lens.lens (responseStatus :: RecordActivityTaskHeartbeatResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: RecordActivityTaskHeartbeatResponse)
{-# DEPRECATED rathrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}

-- | Set to @true@ if cancellation of the task is requested.
--
-- /Note:/ Consider using 'cancelRequested' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rathrsCancelRequested :: Lens.Lens' RecordActivityTaskHeartbeatResponse Lude.Bool
rathrsCancelRequested = Lens.lens (cancelRequested :: RecordActivityTaskHeartbeatResponse -> Lude.Bool) (\s a -> s {cancelRequested = a} :: RecordActivityTaskHeartbeatResponse)
{-# DEPRECATED rathrsCancelRequested "Use generic-lens or generic-optics with 'cancelRequested' instead." #-}
