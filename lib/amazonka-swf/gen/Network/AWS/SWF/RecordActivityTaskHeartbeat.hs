{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.RecordActivityTaskHeartbeat
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by activity workers to report to the service that the 'ActivityTask' represented by the specified @taskToken@ is still making progress. The worker can also specify details of the progress, for example percent complete, using the @details@ parameter. This action can also be used by the worker as a mechanism to check if cancellation is being requested for the activity task. If a cancellation is being attempted for the specified task, then the boolean @cancelRequested@ flag returned by the service is set to @true@ .
--
-- This action resets the @taskHeartbeatTimeout@ clock. The @taskHeartbeatTimeout@ is specified in 'RegisterActivityType' .
-- This action doesn't in itself create an event in the workflow execution history. However, if the task times out, the workflow execution history contains a @ActivityTaskTimedOut@ event that contains the information from the last heartbeat generated by the activity worker.
-- /Important:/ If the @cancelRequested@ flag returns @true@ , a cancellation is being attempted. If the worker can cancel the activity, it should respond with 'RespondActivityTaskCanceled' . Otherwise, it should ignore the cancellation request.
-- __Access Control__ 
-- You can use IAM policies to control this action's access to Amazon SWF resources as follows:
--
--     * Use a @Resource@ element with the domain name to limit the action to only specified domains.
--
--
--     * Use an @Action@ element to allow or deny permission to call this action.
--
--
--     * You cannot use an IAM policy to constrain this action's parameters.
--
--
-- If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's @cause@ parameter is set to @OPERATION_NOT_PERMITTED@ . For details and example IAM policies, see <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html Using IAM to Manage Access to Amazon SWF Workflows> in the /Amazon SWF Developer Guide/ .
module Network.AWS.SWF.RecordActivityTaskHeartbeat
    (
    -- * Creating a request
      RecordActivityTaskHeartbeat (..)
    , mkRecordActivityTaskHeartbeat
    -- ** Request lenses
    , rathTaskToken
    , rathDetails

    -- * Destructuring the response
    , RecordActivityTaskHeartbeatResponse (..)
    , mkRecordActivityTaskHeartbeatResponse
    -- ** Response lenses
    , rathrrsCancelRequested
    , rathrrsResponseStatus
    ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response
import qualified Network.AWS.SWF.Types as Types

-- | /See:/ 'mkRecordActivityTaskHeartbeat' smart constructor.
data RecordActivityTaskHeartbeat = RecordActivityTaskHeartbeat'
  { taskToken :: Types.TaskToken
    -- ^ The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results. 
  , details :: Core.Maybe Types.LimitedData
    -- ^ If specified, contains details about the progress of the task.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'RecordActivityTaskHeartbeat' value with any optional fields omitted.
mkRecordActivityTaskHeartbeat
    :: Types.TaskToken -- ^ 'taskToken'
    -> RecordActivityTaskHeartbeat
mkRecordActivityTaskHeartbeat taskToken
  = RecordActivityTaskHeartbeat'{taskToken, details = Core.Nothing}

-- | The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results. 
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rathTaskToken :: Lens.Lens' RecordActivityTaskHeartbeat Types.TaskToken
rathTaskToken = Lens.field @"taskToken"
{-# INLINEABLE rathTaskToken #-}
{-# DEPRECATED taskToken "Use generic-lens or generic-optics with 'taskToken' instead"  #-}

-- | If specified, contains details about the progress of the task.
--
-- /Note:/ Consider using 'details' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rathDetails :: Lens.Lens' RecordActivityTaskHeartbeat (Core.Maybe Types.LimitedData)
rathDetails = Lens.field @"details"
{-# INLINEABLE rathDetails #-}
{-# DEPRECATED details "Use generic-lens or generic-optics with 'details' instead"  #-}

instance Core.ToQuery RecordActivityTaskHeartbeat where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders RecordActivityTaskHeartbeat where
        toHeaders RecordActivityTaskHeartbeat{..}
          = Core.pure
              ("X-Amz-Target",
               "SimpleWorkflowService.RecordActivityTaskHeartbeat")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.0")

instance Core.FromJSON RecordActivityTaskHeartbeat where
        toJSON RecordActivityTaskHeartbeat{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just ("taskToken" Core..= taskToken),
                  ("details" Core..=) Core.<$> details])

instance Core.AWSRequest RecordActivityTaskHeartbeat where
        type Rs RecordActivityTaskHeartbeat =
             RecordActivityTaskHeartbeatResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 RecordActivityTaskHeartbeatResponse' Core.<$>
                   (x Core..: "cancelRequested") Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | Status information about an activity task.
--
-- /See:/ 'mkRecordActivityTaskHeartbeatResponse' smart constructor.
data RecordActivityTaskHeartbeatResponse = RecordActivityTaskHeartbeatResponse'
  { cancelRequested :: Core.Bool
    -- ^ Set to @true@ if cancellation of the task is requested.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'RecordActivityTaskHeartbeatResponse' value with any optional fields omitted.
mkRecordActivityTaskHeartbeatResponse
    :: Core.Bool -- ^ 'cancelRequested'
    -> Core.Int -- ^ 'responseStatus'
    -> RecordActivityTaskHeartbeatResponse
mkRecordActivityTaskHeartbeatResponse cancelRequested
  responseStatus
  = RecordActivityTaskHeartbeatResponse'{cancelRequested,
                                         responseStatus}

-- | Set to @true@ if cancellation of the task is requested.
--
-- /Note:/ Consider using 'cancelRequested' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rathrrsCancelRequested :: Lens.Lens' RecordActivityTaskHeartbeatResponse Core.Bool
rathrrsCancelRequested = Lens.field @"cancelRequested"
{-# INLINEABLE rathrrsCancelRequested #-}
{-# DEPRECATED cancelRequested "Use generic-lens or generic-optics with 'cancelRequested' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rathrrsResponseStatus :: Lens.Lens' RecordActivityTaskHeartbeatResponse Core.Int
rathrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE rathrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
