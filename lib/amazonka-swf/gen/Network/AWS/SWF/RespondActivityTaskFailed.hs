{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.RespondActivityTaskFailed
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by workers to tell the service that the 'ActivityTask' identified by the @taskToken@ has failed with @reason@ (if specified). The @reason@ and @details@ appear in the @ActivityTaskFailed@ event added to the workflow history.
--
-- A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to 'RespondActivityTaskCompleted' , 'RespondActivityTaskCanceled' , RespondActivityTaskFailed, or the task has <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types timed out> .
-- __Access Control__
-- You can use IAM policies to control this action's access to Amazon SWF resources as follows:
--
--     * Use a @Resource@ element with the domain name to limit the action to only specified domains.
--
--
--     * Use an @Action@ element to allow or deny permission to call this action.
--
--
--     * You cannot use an IAM policy to constrain this action's parameters.
--
--
-- If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's @cause@ parameter is set to @OPERATION_NOT_PERMITTED@ . For details and example IAM policies, see <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html Using IAM to Manage Access to Amazon SWF Workflows> in the /Amazon SWF Developer Guide/ .
module Network.AWS.SWF.RespondActivityTaskFailed
  ( -- * Creating a request
    RespondActivityTaskFailed (..),
    mkRespondActivityTaskFailed,

    -- ** Request lenses
    ratfReason,
    ratfDetails,
    ratfTaskToken,

    -- * Destructuring the response
    RespondActivityTaskFailedResponse (..),
    mkRespondActivityTaskFailedResponse,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.SWF.Types

-- | /See:/ 'mkRespondActivityTaskFailed' smart constructor.
data RespondActivityTaskFailed = RespondActivityTaskFailed'
  { -- | Description of the error that may assist in diagnostics.
    reason :: Lude.Maybe Lude.Text,
    -- | Detailed information about the failure.
    details :: Lude.Maybe Lude.Text,
    -- | The @taskToken@ of the 'ActivityTask' .
    --
    -- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
    taskToken :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RespondActivityTaskFailed' with the minimum fields required to make a request.
--
-- * 'reason' - Description of the error that may assist in diagnostics.
-- * 'details' - Detailed information about the failure.
-- * 'taskToken' - The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
mkRespondActivityTaskFailed ::
  -- | 'taskToken'
  Lude.Text ->
  RespondActivityTaskFailed
mkRespondActivityTaskFailed pTaskToken_ =
  RespondActivityTaskFailed'
    { reason = Lude.Nothing,
      details = Lude.Nothing,
      taskToken = pTaskToken_
    }

-- | Description of the error that may assist in diagnostics.
--
-- /Note:/ Consider using 'reason' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ratfReason :: Lens.Lens' RespondActivityTaskFailed (Lude.Maybe Lude.Text)
ratfReason = Lens.lens (reason :: RespondActivityTaskFailed -> Lude.Maybe Lude.Text) (\s a -> s {reason = a} :: RespondActivityTaskFailed)
{-# DEPRECATED ratfReason "Use generic-lens or generic-optics with 'reason' instead." #-}

-- | Detailed information about the failure.
--
-- /Note:/ Consider using 'details' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ratfDetails :: Lens.Lens' RespondActivityTaskFailed (Lude.Maybe Lude.Text)
ratfDetails = Lens.lens (details :: RespondActivityTaskFailed -> Lude.Maybe Lude.Text) (\s a -> s {details = a} :: RespondActivityTaskFailed)
{-# DEPRECATED ratfDetails "Use generic-lens or generic-optics with 'details' instead." #-}

-- | The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ratfTaskToken :: Lens.Lens' RespondActivityTaskFailed Lude.Text
ratfTaskToken = Lens.lens (taskToken :: RespondActivityTaskFailed -> Lude.Text) (\s a -> s {taskToken = a} :: RespondActivityTaskFailed)
{-# DEPRECATED ratfTaskToken "Use generic-lens or generic-optics with 'taskToken' instead." #-}

instance Lude.AWSRequest RespondActivityTaskFailed where
  type
    Rs RespondActivityTaskFailed =
      RespondActivityTaskFailedResponse
  request = Req.postJSON swfService
  response = Res.receiveNull RespondActivityTaskFailedResponse'

instance Lude.ToHeaders RespondActivityTaskFailed where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ( "SimpleWorkflowService.RespondActivityTaskFailed" ::
                          Lude.ByteString
                      ),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.0" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON RespondActivityTaskFailed where
  toJSON RespondActivityTaskFailed' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("reason" Lude..=) Lude.<$> reason,
            ("details" Lude..=) Lude.<$> details,
            Lude.Just ("taskToken" Lude..= taskToken)
          ]
      )

instance Lude.ToPath RespondActivityTaskFailed where
  toPath = Lude.const "/"

instance Lude.ToQuery RespondActivityTaskFailed where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkRespondActivityTaskFailedResponse' smart constructor.
data RespondActivityTaskFailedResponse = RespondActivityTaskFailedResponse'
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RespondActivityTaskFailedResponse' with the minimum fields required to make a request.
mkRespondActivityTaskFailedResponse ::
  RespondActivityTaskFailedResponse
mkRespondActivityTaskFailedResponse =
  RespondActivityTaskFailedResponse'
