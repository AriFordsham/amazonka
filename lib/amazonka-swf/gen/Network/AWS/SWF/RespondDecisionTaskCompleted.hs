{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.RespondDecisionTaskCompleted
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by deciders to tell the service that the 'DecisionTask' identified by the @taskToken@ has successfully completed. The @decisions@ argument specifies the list of decisions made while processing the task.
--
-- A @DecisionTaskCompleted@ event is added to the workflow history. The @executionContext@ specified is attached to the event in the workflow execution history.
-- __Access Control__
-- If an IAM policy grants permission to use @RespondDecisionTaskCompleted@ , it can express permissions for the list of decisions in the @decisions@ parameter. Each of the decisions has one or more parameters, much like a regular API call. To allow for policies to be as readable as possible, you can express permissions on decisions as if they were actual API calls, including applying conditions to some parameters. For more information, see <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html Using IAM to Manage Access to Amazon SWF Workflows> in the /Amazon SWF Developer Guide/ .
module Network.AWS.SWF.RespondDecisionTaskCompleted
  ( -- * Creating a request
    RespondDecisionTaskCompleted (..),
    mkRespondDecisionTaskCompleted,

    -- ** Request lenses
    rdtcDecisions,
    rdtcExecutionContext,
    rdtcTaskToken,

    -- * Destructuring the response
    RespondDecisionTaskCompletedResponse (..),
    mkRespondDecisionTaskCompletedResponse,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.SWF.Types

-- | Input data for a TaskCompleted response to a decision task.
--
-- /See:/ 'mkRespondDecisionTaskCompleted' smart constructor.
data RespondDecisionTaskCompleted = RespondDecisionTaskCompleted'
  { -- | The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the 'Decision' structure for details.
    decisions :: Lude.Maybe [Decision],
    -- | User defined context to add to workflow execution.
    executionContext :: Lude.Maybe Lude.Text,
    -- | The @taskToken@ from the 'DecisionTask' .
    --
    -- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
    taskToken :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RespondDecisionTaskCompleted' with the minimum fields required to make a request.
--
-- * 'decisions' - The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the 'Decision' structure for details.
-- * 'executionContext' - User defined context to add to workflow execution.
-- * 'taskToken' - The @taskToken@ from the 'DecisionTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
mkRespondDecisionTaskCompleted ::
  -- | 'taskToken'
  Lude.Text ->
  RespondDecisionTaskCompleted
mkRespondDecisionTaskCompleted pTaskToken_ =
  RespondDecisionTaskCompleted'
    { decisions = Lude.Nothing,
      executionContext = Lude.Nothing,
      taskToken = pTaskToken_
    }

-- | The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the 'Decision' structure for details.
--
-- /Note:/ Consider using 'decisions' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rdtcDecisions :: Lens.Lens' RespondDecisionTaskCompleted (Lude.Maybe [Decision])
rdtcDecisions = Lens.lens (decisions :: RespondDecisionTaskCompleted -> Lude.Maybe [Decision]) (\s a -> s {decisions = a} :: RespondDecisionTaskCompleted)
{-# DEPRECATED rdtcDecisions "Use generic-lens or generic-optics with 'decisions' instead." #-}

-- | User defined context to add to workflow execution.
--
-- /Note:/ Consider using 'executionContext' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rdtcExecutionContext :: Lens.Lens' RespondDecisionTaskCompleted (Lude.Maybe Lude.Text)
rdtcExecutionContext = Lens.lens (executionContext :: RespondDecisionTaskCompleted -> Lude.Maybe Lude.Text) (\s a -> s {executionContext = a} :: RespondDecisionTaskCompleted)
{-# DEPRECATED rdtcExecutionContext "Use generic-lens or generic-optics with 'executionContext' instead." #-}

-- | The @taskToken@ from the 'DecisionTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rdtcTaskToken :: Lens.Lens' RespondDecisionTaskCompleted Lude.Text
rdtcTaskToken = Lens.lens (taskToken :: RespondDecisionTaskCompleted -> Lude.Text) (\s a -> s {taskToken = a} :: RespondDecisionTaskCompleted)
{-# DEPRECATED rdtcTaskToken "Use generic-lens or generic-optics with 'taskToken' instead." #-}

instance Lude.AWSRequest RespondDecisionTaskCompleted where
  type
    Rs RespondDecisionTaskCompleted =
      RespondDecisionTaskCompletedResponse
  request = Req.postJSON swfService
  response = Res.receiveNull RespondDecisionTaskCompletedResponse'

instance Lude.ToHeaders RespondDecisionTaskCompleted where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ( "SimpleWorkflowService.RespondDecisionTaskCompleted" ::
                          Lude.ByteString
                      ),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.0" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON RespondDecisionTaskCompleted where
  toJSON RespondDecisionTaskCompleted' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("decisions" Lude..=) Lude.<$> decisions,
            ("executionContext" Lude..=) Lude.<$> executionContext,
            Lude.Just ("taskToken" Lude..= taskToken)
          ]
      )

instance Lude.ToPath RespondDecisionTaskCompleted where
  toPath = Lude.const "/"

instance Lude.ToQuery RespondDecisionTaskCompleted where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkRespondDecisionTaskCompletedResponse' smart constructor.
data RespondDecisionTaskCompletedResponse = RespondDecisionTaskCompletedResponse'
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RespondDecisionTaskCompletedResponse' with the minimum fields required to make a request.
mkRespondDecisionTaskCompletedResponse ::
  RespondDecisionTaskCompletedResponse
mkRespondDecisionTaskCompletedResponse =
  RespondDecisionTaskCompletedResponse'
