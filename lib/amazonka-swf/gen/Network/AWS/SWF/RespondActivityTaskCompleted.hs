{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.RespondActivityTaskCompleted
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by workers to tell the service that the 'ActivityTask' identified by the @taskToken@ completed successfully with a @result@ (if provided). The @result@ appears in the @ActivityTaskCompleted@ event in the workflow history.
--
-- /Important:/ If the requested task doesn't complete successfully, use 'RespondActivityTaskFailed' instead. If the worker finds that the task is canceled through the @canceled@ flag returned by 'RecordActivityTaskHeartbeat' , it should cancel the task, clean up and then call 'RespondActivityTaskCanceled' .
-- A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to RespondActivityTaskCompleted, 'RespondActivityTaskCanceled' , 'RespondActivityTaskFailed' , or the task has <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types timed out> .
-- __Access Control__ 
-- You can use IAM policies to control this action's access to Amazon SWF resources as follows:
--
--     * Use a @Resource@ element with the domain name to limit the action to only specified domains.
--
--
--     * Use an @Action@ element to allow or deny permission to call this action.
--
--
--     * You cannot use an IAM policy to constrain this action's parameters.
--
--
-- If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's @cause@ parameter is set to @OPERATION_NOT_PERMITTED@ . For details and example IAM policies, see <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html Using IAM to Manage Access to Amazon SWF Workflows> in the /Amazon SWF Developer Guide/ .
module Network.AWS.SWF.RespondActivityTaskCompleted
    (
    -- * Creating a request
      RespondActivityTaskCompleted (..)
    , mkRespondActivityTaskCompleted
    -- ** Request lenses
    , ratcTaskToken
    , ratcResult

    -- * Destructuring the response
    , RespondActivityTaskCompletedResponse (..)
    , mkRespondActivityTaskCompletedResponse
    ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response
import qualified Network.AWS.SWF.Types as Types

-- | /See:/ 'mkRespondActivityTaskCompleted' smart constructor.
data RespondActivityTaskCompleted = RespondActivityTaskCompleted'
  { taskToken :: Types.TaskToken
    -- ^ The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
  , result :: Core.Maybe Types.Result
    -- ^ The result of the activity task. It is a free form string that is implementation specific.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'RespondActivityTaskCompleted' value with any optional fields omitted.
mkRespondActivityTaskCompleted
    :: Types.TaskToken -- ^ 'taskToken'
    -> RespondActivityTaskCompleted
mkRespondActivityTaskCompleted taskToken
  = RespondActivityTaskCompleted'{taskToken, result = Core.Nothing}

-- | The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ratcTaskToken :: Lens.Lens' RespondActivityTaskCompleted Types.TaskToken
ratcTaskToken = Lens.field @"taskToken"
{-# INLINEABLE ratcTaskToken #-}
{-# DEPRECATED taskToken "Use generic-lens or generic-optics with 'taskToken' instead"  #-}

-- | The result of the activity task. It is a free form string that is implementation specific.
--
-- /Note:/ Consider using 'result' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ratcResult :: Lens.Lens' RespondActivityTaskCompleted (Core.Maybe Types.Result)
ratcResult = Lens.field @"result"
{-# INLINEABLE ratcResult #-}
{-# DEPRECATED result "Use generic-lens or generic-optics with 'result' instead"  #-}

instance Core.ToQuery RespondActivityTaskCompleted where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders RespondActivityTaskCompleted where
        toHeaders RespondActivityTaskCompleted{..}
          = Core.pure
              ("X-Amz-Target",
               "SimpleWorkflowService.RespondActivityTaskCompleted")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.0")

instance Core.FromJSON RespondActivityTaskCompleted where
        toJSON RespondActivityTaskCompleted{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just ("taskToken" Core..= taskToken),
                  ("result" Core..=) Core.<$> result])

instance Core.AWSRequest RespondActivityTaskCompleted where
        type Rs RespondActivityTaskCompleted =
             RespondActivityTaskCompletedResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveNull RespondActivityTaskCompletedResponse'
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkRespondActivityTaskCompletedResponse' smart constructor.
data RespondActivityTaskCompletedResponse = RespondActivityTaskCompletedResponse'
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'RespondActivityTaskCompletedResponse' value with any optional fields omitted.
mkRespondActivityTaskCompletedResponse
    :: RespondActivityTaskCompletedResponse
mkRespondActivityTaskCompletedResponse
  = RespondActivityTaskCompletedResponse'
