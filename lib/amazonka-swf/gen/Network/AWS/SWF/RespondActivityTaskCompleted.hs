{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.RespondActivityTaskCompleted
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by workers to tell the service that the 'ActivityTask' identified by the @taskToken@ completed successfully with a @result@ (if provided). The @result@ appears in the @ActivityTaskCompleted@ event in the workflow history.
--
-- /Important:/ If the requested task doesn't complete successfully, use 'RespondActivityTaskFailed' instead. If the worker finds that the task is canceled through the @canceled@ flag returned by 'RecordActivityTaskHeartbeat' , it should cancel the task, clean up and then call 'RespondActivityTaskCanceled' .
-- A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to RespondActivityTaskCompleted, 'RespondActivityTaskCanceled' , 'RespondActivityTaskFailed' , or the task has <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types timed out> .
-- __Access Control__
-- You can use IAM policies to control this action's access to Amazon SWF resources as follows:
--
--     * Use a @Resource@ element with the domain name to limit the action to only specified domains.
--
--
--     * Use an @Action@ element to allow or deny permission to call this action.
--
--
--     * You cannot use an IAM policy to constrain this action's parameters.
--
--
-- If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's @cause@ parameter is set to @OPERATION_NOT_PERMITTED@ . For details and example IAM policies, see <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html Using IAM to Manage Access to Amazon SWF Workflows> in the /Amazon SWF Developer Guide/ .
module Network.AWS.SWF.RespondActivityTaskCompleted
  ( -- * Creating a request
    RespondActivityTaskCompleted (..),
    mkRespondActivityTaskCompleted,

    -- ** Request lenses
    ratcResult,
    ratcTaskToken,

    -- * Destructuring the response
    RespondActivityTaskCompletedResponse (..),
    mkRespondActivityTaskCompletedResponse,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.SWF.Types

-- | /See:/ 'mkRespondActivityTaskCompleted' smart constructor.
data RespondActivityTaskCompleted = RespondActivityTaskCompleted'
  { result ::
      Lude.Maybe Lude.Text,
    taskToken :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RespondActivityTaskCompleted' with the minimum fields required to make a request.
--
-- * 'result' - The result of the activity task. It is a free form string that is implementation specific.
-- * 'taskToken' - The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
mkRespondActivityTaskCompleted ::
  -- | 'taskToken'
  Lude.Text ->
  RespondActivityTaskCompleted
mkRespondActivityTaskCompleted pTaskToken_ =
  RespondActivityTaskCompleted'
    { result = Lude.Nothing,
      taskToken = pTaskToken_
    }

-- | The result of the activity task. It is a free form string that is implementation specific.
--
-- /Note:/ Consider using 'result' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ratcResult :: Lens.Lens' RespondActivityTaskCompleted (Lude.Maybe Lude.Text)
ratcResult = Lens.lens (result :: RespondActivityTaskCompleted -> Lude.Maybe Lude.Text) (\s a -> s {result = a} :: RespondActivityTaskCompleted)
{-# DEPRECATED ratcResult "Use generic-lens or generic-optics with 'result' instead." #-}

-- | The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ratcTaskToken :: Lens.Lens' RespondActivityTaskCompleted Lude.Text
ratcTaskToken = Lens.lens (taskToken :: RespondActivityTaskCompleted -> Lude.Text) (\s a -> s {taskToken = a} :: RespondActivityTaskCompleted)
{-# DEPRECATED ratcTaskToken "Use generic-lens or generic-optics with 'taskToken' instead." #-}

instance Lude.AWSRequest RespondActivityTaskCompleted where
  type
    Rs RespondActivityTaskCompleted =
      RespondActivityTaskCompletedResponse
  request = Req.postJSON swfService
  response = Res.receiveNull RespondActivityTaskCompletedResponse'

instance Lude.ToHeaders RespondActivityTaskCompleted where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ( "SimpleWorkflowService.RespondActivityTaskCompleted" ::
                          Lude.ByteString
                      ),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.0" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON RespondActivityTaskCompleted where
  toJSON RespondActivityTaskCompleted' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("result" Lude..=) Lude.<$> result,
            Lude.Just ("taskToken" Lude..= taskToken)
          ]
      )

instance Lude.ToPath RespondActivityTaskCompleted where
  toPath = Lude.const "/"

instance Lude.ToQuery RespondActivityTaskCompleted where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkRespondActivityTaskCompletedResponse' smart constructor.
data RespondActivityTaskCompletedResponse = RespondActivityTaskCompletedResponse'
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RespondActivityTaskCompletedResponse' with the minimum fields required to make a request.
mkRespondActivityTaskCompletedResponse ::
  RespondActivityTaskCompletedResponse
mkRespondActivityTaskCompletedResponse =
  RespondActivityTaskCompletedResponse'
