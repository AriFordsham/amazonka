{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.StartTimerFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SWF.Types.StartTimerFailedEventAttributes
  ( StartTimerFailedEventAttributes (..),

    -- * Smart constructor
    mkStartTimerFailedEventAttributes,

    -- * Lenses
    stfeaTimerId,
    stfeaCause,
    stfeaDecisionTaskCompletedEventId,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.SWF.Types.StartTimerFailedCause as Types
import qualified Network.AWS.SWF.Types.TimerId as Types

-- | Provides the details of the @StartTimerFailed@ event.
--
-- /See:/ 'mkStartTimerFailedEventAttributes' smart constructor.
data StartTimerFailedEventAttributes = StartTimerFailedEventAttributes'
  { -- | The timerId provided in the @StartTimer@ decision that failed.
    timerId :: Types.TimerId,
    -- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
    cause :: Types.StartTimerFailedCause,
    -- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @StartTimer@ decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    decisionTaskCompletedEventId :: Core.Integer
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'StartTimerFailedEventAttributes' value with any optional fields omitted.
mkStartTimerFailedEventAttributes ::
  -- | 'timerId'
  Types.TimerId ->
  -- | 'cause'
  Types.StartTimerFailedCause ->
  -- | 'decisionTaskCompletedEventId'
  Core.Integer ->
  StartTimerFailedEventAttributes
mkStartTimerFailedEventAttributes
  timerId
  cause
  decisionTaskCompletedEventId =
    StartTimerFailedEventAttributes'
      { timerId,
        cause,
        decisionTaskCompletedEventId
      }

-- | The timerId provided in the @StartTimer@ decision that failed.
--
-- /Note:/ Consider using 'timerId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stfeaTimerId :: Lens.Lens' StartTimerFailedEventAttributes Types.TimerId
stfeaTimerId = Lens.field @"timerId"
{-# DEPRECATED stfeaTimerId "Use generic-lens or generic-optics with 'timerId' instead." #-}

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stfeaCause :: Lens.Lens' StartTimerFailedEventAttributes Types.StartTimerFailedCause
stfeaCause = Lens.field @"cause"
{-# DEPRECATED stfeaCause "Use generic-lens or generic-optics with 'cause' instead." #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @StartTimer@ decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
stfeaDecisionTaskCompletedEventId :: Lens.Lens' StartTimerFailedEventAttributes Core.Integer
stfeaDecisionTaskCompletedEventId = Lens.field @"decisionTaskCompletedEventId"
{-# DEPRECATED stfeaDecisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead." #-}

instance Core.FromJSON StartTimerFailedEventAttributes where
  parseJSON =
    Core.withObject "StartTimerFailedEventAttributes" Core.$
      \x ->
        StartTimerFailedEventAttributes'
          Core.<$> (x Core..: "timerId")
          Core.<*> (x Core..: "cause")
          Core.<*> (x Core..: "decisionTaskCompletedEventId")
