{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.StartChildWorkflowExecutionFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SWF.Types.StartChildWorkflowExecutionFailedEventAttributes
  ( StartChildWorkflowExecutionFailedEventAttributes (..),

    -- * Smart constructor
    mkStartChildWorkflowExecutionFailedEventAttributes,

    -- * Lenses
    scwefeaControl,
    scwefeaWorkflowType,
    scwefeaCause,
    scwefeaInitiatedEventId,
    scwefeaWorkflowId,
    scwefeaDecisionTaskCompletedEventId,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import Network.AWS.SWF.Types.StartChildWorkflowExecutionFailedCause
import Network.AWS.SWF.Types.WorkflowType

-- | Provides the details of the @StartChildWorkflowExecutionFailed@ event.
--
-- /See:/ 'mkStartChildWorkflowExecutionFailedEventAttributes' smart constructor.
data StartChildWorkflowExecutionFailedEventAttributes = StartChildWorkflowExecutionFailedEventAttributes'
  { -- | The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
    control :: Lude.Maybe Lude.Text,
    -- | The workflow type provided in the @StartChildWorkflowExecution@ 'Decision' that failed.
    workflowType :: WorkflowType,
    -- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
    cause :: StartChildWorkflowExecutionFailedCause,
    -- | When the @cause@ is @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is the ID of the @StartChildWorkflowExecutionInitiated@ event that corresponds to the @StartChildWorkflowExecution@ 'Decision' to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event.
    --
    -- When the @cause@ isn't @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is set to @0@ because the @StartChildWorkflowExecutionInitiated@ event doesn't exist.
    initiatedEventId :: Lude.Integer,
    -- | The @workflowId@ of the child workflow execution.
    workflowId :: Lude.Text,
    -- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @StartChildWorkflowExecution@ 'Decision' to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
    decisionTaskCompletedEventId :: Lude.Integer
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'StartChildWorkflowExecutionFailedEventAttributes' with the minimum fields required to make a request.
--
-- * 'control' - The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
-- * 'workflowType' - The workflow type provided in the @StartChildWorkflowExecution@ 'Decision' that failed.
-- * 'cause' - The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
-- * 'initiatedEventId' - When the @cause@ is @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is the ID of the @StartChildWorkflowExecutionInitiated@ event that corresponds to the @StartChildWorkflowExecution@ 'Decision' to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event.
--
-- When the @cause@ isn't @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is set to @0@ because the @StartChildWorkflowExecutionInitiated@ event doesn't exist.
-- * 'workflowId' - The @workflowId@ of the child workflow execution.
-- * 'decisionTaskCompletedEventId' - The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @StartChildWorkflowExecution@ 'Decision' to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
mkStartChildWorkflowExecutionFailedEventAttributes ::
  -- | 'workflowType'
  WorkflowType ->
  -- | 'cause'
  StartChildWorkflowExecutionFailedCause ->
  -- | 'initiatedEventId'
  Lude.Integer ->
  -- | 'workflowId'
  Lude.Text ->
  -- | 'decisionTaskCompletedEventId'
  Lude.Integer ->
  StartChildWorkflowExecutionFailedEventAttributes
mkStartChildWorkflowExecutionFailedEventAttributes
  pWorkflowType_
  pCause_
  pInitiatedEventId_
  pWorkflowId_
  pDecisionTaskCompletedEventId_ =
    StartChildWorkflowExecutionFailedEventAttributes'
      { control =
          Lude.Nothing,
        workflowType = pWorkflowType_,
        cause = pCause_,
        initiatedEventId = pInitiatedEventId_,
        workflowId = pWorkflowId_,
        decisionTaskCompletedEventId =
          pDecisionTaskCompletedEventId_
      }

-- | The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
--
-- /Note:/ Consider using 'control' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaControl :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes (Lude.Maybe Lude.Text)
scwefeaControl = Lens.lens (control :: StartChildWorkflowExecutionFailedEventAttributes -> Lude.Maybe Lude.Text) (\s a -> s {control = a} :: StartChildWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED scwefeaControl "Use generic-lens or generic-optics with 'control' instead." #-}

-- | The workflow type provided in the @StartChildWorkflowExecution@ 'Decision' that failed.
--
-- /Note:/ Consider using 'workflowType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaWorkflowType :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes WorkflowType
scwefeaWorkflowType = Lens.lens (workflowType :: StartChildWorkflowExecutionFailedEventAttributes -> WorkflowType) (\s a -> s {workflowType = a} :: StartChildWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED scwefeaWorkflowType "Use generic-lens or generic-optics with 'workflowType' instead." #-}

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaCause :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes StartChildWorkflowExecutionFailedCause
scwefeaCause = Lens.lens (cause :: StartChildWorkflowExecutionFailedEventAttributes -> StartChildWorkflowExecutionFailedCause) (\s a -> s {cause = a} :: StartChildWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED scwefeaCause "Use generic-lens or generic-optics with 'cause' instead." #-}

-- | When the @cause@ is @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is the ID of the @StartChildWorkflowExecutionInitiated@ event that corresponds to the @StartChildWorkflowExecution@ 'Decision' to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event.
--
-- When the @cause@ isn't @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is set to @0@ because the @StartChildWorkflowExecutionInitiated@ event doesn't exist.
--
-- /Note:/ Consider using 'initiatedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaInitiatedEventId :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes Lude.Integer
scwefeaInitiatedEventId = Lens.lens (initiatedEventId :: StartChildWorkflowExecutionFailedEventAttributes -> Lude.Integer) (\s a -> s {initiatedEventId = a} :: StartChildWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED scwefeaInitiatedEventId "Use generic-lens or generic-optics with 'initiatedEventId' instead." #-}

-- | The @workflowId@ of the child workflow execution.
--
-- /Note:/ Consider using 'workflowId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaWorkflowId :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes Lude.Text
scwefeaWorkflowId = Lens.lens (workflowId :: StartChildWorkflowExecutionFailedEventAttributes -> Lude.Text) (\s a -> s {workflowId = a} :: StartChildWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED scwefeaWorkflowId "Use generic-lens or generic-optics with 'workflowId' instead." #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @StartChildWorkflowExecution@ 'Decision' to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaDecisionTaskCompletedEventId :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes Lude.Integer
scwefeaDecisionTaskCompletedEventId = Lens.lens (decisionTaskCompletedEventId :: StartChildWorkflowExecutionFailedEventAttributes -> Lude.Integer) (\s a -> s {decisionTaskCompletedEventId = a} :: StartChildWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED scwefeaDecisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead." #-}

instance
  Lude.FromJSON
    StartChildWorkflowExecutionFailedEventAttributes
  where
  parseJSON =
    Lude.withObject
      "StartChildWorkflowExecutionFailedEventAttributes"
      ( \x ->
          StartChildWorkflowExecutionFailedEventAttributes'
            Lude.<$> (x Lude..:? "control")
            Lude.<*> (x Lude..: "workflowType")
            Lude.<*> (x Lude..: "cause")
            Lude.<*> (x Lude..: "initiatedEventId")
            Lude.<*> (x Lude..: "workflowId")
            Lude.<*> (x Lude..: "decisionTaskCompletedEventId")
      )
