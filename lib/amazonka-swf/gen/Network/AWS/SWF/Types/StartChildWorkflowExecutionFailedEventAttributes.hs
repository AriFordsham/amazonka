{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.StartChildWorkflowExecutionFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SWF.Types.StartChildWorkflowExecutionFailedEventAttributes
  ( StartChildWorkflowExecutionFailedEventAttributes (..),

    -- * Smart constructor
    mkStartChildWorkflowExecutionFailedEventAttributes,

    -- * Lenses
    scwefeaWorkflowType,
    scwefeaCause,
    scwefeaWorkflowId,
    scwefeaInitiatedEventId,
    scwefeaDecisionTaskCompletedEventId,
    scwefeaControl,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.SWF.Types.Data as Types
import qualified Network.AWS.SWF.Types.StartChildWorkflowExecutionFailedCause as Types
import qualified Network.AWS.SWF.Types.WorkflowId as Types
import qualified Network.AWS.SWF.Types.WorkflowType as Types

-- | Provides the details of the @StartChildWorkflowExecutionFailed@ event.
--
-- /See:/ 'mkStartChildWorkflowExecutionFailedEventAttributes' smart constructor.
data StartChildWorkflowExecutionFailedEventAttributes = StartChildWorkflowExecutionFailedEventAttributes'
  { -- | The workflow type provided in the @StartChildWorkflowExecution@ 'Decision' that failed.
    workflowType :: Types.WorkflowType,
    -- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
    cause :: Types.StartChildWorkflowExecutionFailedCause,
    -- | The @workflowId@ of the child workflow execution.
    workflowId :: Types.WorkflowId,
    -- | When the @cause@ is @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is the ID of the @StartChildWorkflowExecutionInitiated@ event that corresponds to the @StartChildWorkflowExecution@ 'Decision' to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event.
    --
    -- When the @cause@ isn't @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is set to @0@ because the @StartChildWorkflowExecutionInitiated@ event doesn't exist.
    initiatedEventId :: Core.Integer,
    -- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @StartChildWorkflowExecution@ 'Decision' to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
    decisionTaskCompletedEventId :: Core.Integer,
    -- | The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
    control :: Core.Maybe Types.Data
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'StartChildWorkflowExecutionFailedEventAttributes' value with any optional fields omitted.
mkStartChildWorkflowExecutionFailedEventAttributes ::
  -- | 'workflowType'
  Types.WorkflowType ->
  -- | 'cause'
  Types.StartChildWorkflowExecutionFailedCause ->
  -- | 'workflowId'
  Types.WorkflowId ->
  -- | 'initiatedEventId'
  Core.Integer ->
  -- | 'decisionTaskCompletedEventId'
  Core.Integer ->
  StartChildWorkflowExecutionFailedEventAttributes
mkStartChildWorkflowExecutionFailedEventAttributes
  workflowType
  cause
  workflowId
  initiatedEventId
  decisionTaskCompletedEventId =
    StartChildWorkflowExecutionFailedEventAttributes'
      { workflowType,
        cause,
        workflowId,
        initiatedEventId,
        decisionTaskCompletedEventId,
        control = Core.Nothing
      }

-- | The workflow type provided in the @StartChildWorkflowExecution@ 'Decision' that failed.
--
-- /Note:/ Consider using 'workflowType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaWorkflowType :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes Types.WorkflowType
scwefeaWorkflowType = Lens.field @"workflowType"
{-# DEPRECATED scwefeaWorkflowType "Use generic-lens or generic-optics with 'workflowType' instead." #-}

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaCause :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes Types.StartChildWorkflowExecutionFailedCause
scwefeaCause = Lens.field @"cause"
{-# DEPRECATED scwefeaCause "Use generic-lens or generic-optics with 'cause' instead." #-}

-- | The @workflowId@ of the child workflow execution.
--
-- /Note:/ Consider using 'workflowId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaWorkflowId :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes Types.WorkflowId
scwefeaWorkflowId = Lens.field @"workflowId"
{-# DEPRECATED scwefeaWorkflowId "Use generic-lens or generic-optics with 'workflowId' instead." #-}

-- | When the @cause@ is @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is the ID of the @StartChildWorkflowExecutionInitiated@ event that corresponds to the @StartChildWorkflowExecution@ 'Decision' to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event.
--
-- When the @cause@ isn't @WORKFLOW_ALREADY_RUNNING@ , @initiatedEventId@ is set to @0@ because the @StartChildWorkflowExecutionInitiated@ event doesn't exist.
--
-- /Note:/ Consider using 'initiatedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaInitiatedEventId :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes Core.Integer
scwefeaInitiatedEventId = Lens.field @"initiatedEventId"
{-# DEPRECATED scwefeaInitiatedEventId "Use generic-lens or generic-optics with 'initiatedEventId' instead." #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @StartChildWorkflowExecution@ 'Decision' to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaDecisionTaskCompletedEventId :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes Core.Integer
scwefeaDecisionTaskCompletedEventId = Lens.field @"decisionTaskCompletedEventId"
{-# DEPRECATED scwefeaDecisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead." #-}

-- | The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
--
-- /Note:/ Consider using 'control' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
scwefeaControl :: Lens.Lens' StartChildWorkflowExecutionFailedEventAttributes (Core.Maybe Types.Data)
scwefeaControl = Lens.field @"control"
{-# DEPRECATED scwefeaControl "Use generic-lens or generic-optics with 'control' instead." #-}

instance
  Core.FromJSON
    StartChildWorkflowExecutionFailedEventAttributes
  where
  parseJSON =
    Core.withObject
      "StartChildWorkflowExecutionFailedEventAttributes"
      Core.$ \x ->
        StartChildWorkflowExecutionFailedEventAttributes'
          Core.<$> (x Core..: "workflowType")
          Core.<*> (x Core..: "cause")
          Core.<*> (x Core..: "workflowId")
          Core.<*> (x Core..: "initiatedEventId")
          Core.<*> (x Core..: "decisionTaskCompletedEventId")
          Core.<*> (x Core..:? "control")
