-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.SignalExternalWorkflowExecutionFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SWF.Types.SignalExternalWorkflowExecutionFailedEventAttributes
  ( SignalExternalWorkflowExecutionFailedEventAttributes (..),

    -- * Smart constructor
    mkSignalExternalWorkflowExecutionFailedEventAttributes,

    -- * Lenses
    sewefeaControl,
    sewefeaRunId,
    sewefeaWorkflowId,
    sewefeaCause,
    sewefeaInitiatedEventId,
    sewefeaDecisionTaskCompletedEventId,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import Network.AWS.SWF.Types.SignalExternalWorkflowExecutionFailedCause

-- | Provides the details of the @SignalExternalWorkflowExecutionFailed@ event.
--
-- /See:/ 'mkSignalExternalWorkflowExecutionFailedEventAttributes' smart constructor.
data SignalExternalWorkflowExecutionFailedEventAttributes = SignalExternalWorkflowExecutionFailedEventAttributes'
  { control ::
      Lude.Maybe
        Lude.Text,
    runId ::
      Lude.Maybe
        Lude.Text,
    workflowId ::
      Lude.Text,
    cause ::
      SignalExternalWorkflowExecutionFailedCause,
    initiatedEventId ::
      Lude.Integer,
    decisionTaskCompletedEventId ::
      Lude.Integer
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass
    ( Lude.Hashable,
      Lude.NFData
    )

-- | Creates a value of 'SignalExternalWorkflowExecutionFailedEventAttributes' with the minimum fields required to make a request.
--
-- * 'cause' - The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
-- * 'control' - The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
-- * 'decisionTaskCompletedEventId' - The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @SignalExternalWorkflowExecution@ decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
-- * 'initiatedEventId' - The ID of the @SignalExternalWorkflowExecutionInitiated@ event corresponding to the @SignalExternalWorkflowExecution@ decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
-- * 'runId' - The @runId@ of the external workflow execution that the signal was being delivered to.
-- * 'workflowId' - The @workflowId@ of the external workflow execution that the signal was being delivered to.
mkSignalExternalWorkflowExecutionFailedEventAttributes ::
  -- | 'workflowId'
  Lude.Text ->
  -- | 'cause'
  SignalExternalWorkflowExecutionFailedCause ->
  -- | 'initiatedEventId'
  Lude.Integer ->
  -- | 'decisionTaskCompletedEventId'
  Lude.Integer ->
  SignalExternalWorkflowExecutionFailedEventAttributes
mkSignalExternalWorkflowExecutionFailedEventAttributes
  pWorkflowId_
  pCause_
  pInitiatedEventId_
  pDecisionTaskCompletedEventId_ =
    SignalExternalWorkflowExecutionFailedEventAttributes'
      { control =
          Lude.Nothing,
        runId = Lude.Nothing,
        workflowId = pWorkflowId_,
        cause = pCause_,
        initiatedEventId = pInitiatedEventId_,
        decisionTaskCompletedEventId =
          pDecisionTaskCompletedEventId_
      }

-- | The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
--
-- /Note:/ Consider using 'control' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaControl :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes (Lude.Maybe Lude.Text)
sewefeaControl = Lens.lens (control :: SignalExternalWorkflowExecutionFailedEventAttributes -> Lude.Maybe Lude.Text) (\s a -> s {control = a} :: SignalExternalWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED sewefeaControl "Use generic-lens or generic-optics with 'control' instead." #-}

-- | The @runId@ of the external workflow execution that the signal was being delivered to.
--
-- /Note:/ Consider using 'runId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaRunId :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes (Lude.Maybe Lude.Text)
sewefeaRunId = Lens.lens (runId :: SignalExternalWorkflowExecutionFailedEventAttributes -> Lude.Maybe Lude.Text) (\s a -> s {runId = a} :: SignalExternalWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED sewefeaRunId "Use generic-lens or generic-optics with 'runId' instead." #-}

-- | The @workflowId@ of the external workflow execution that the signal was being delivered to.
--
-- /Note:/ Consider using 'workflowId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaWorkflowId :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes Lude.Text
sewefeaWorkflowId = Lens.lens (workflowId :: SignalExternalWorkflowExecutionFailedEventAttributes -> Lude.Text) (\s a -> s {workflowId = a} :: SignalExternalWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED sewefeaWorkflowId "Use generic-lens or generic-optics with 'workflowId' instead." #-}

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaCause :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes SignalExternalWorkflowExecutionFailedCause
sewefeaCause = Lens.lens (cause :: SignalExternalWorkflowExecutionFailedEventAttributes -> SignalExternalWorkflowExecutionFailedCause) (\s a -> s {cause = a} :: SignalExternalWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED sewefeaCause "Use generic-lens or generic-optics with 'cause' instead." #-}

-- | The ID of the @SignalExternalWorkflowExecutionInitiated@ event corresponding to the @SignalExternalWorkflowExecution@ decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'initiatedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaInitiatedEventId :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes Lude.Integer
sewefeaInitiatedEventId = Lens.lens (initiatedEventId :: SignalExternalWorkflowExecutionFailedEventAttributes -> Lude.Integer) (\s a -> s {initiatedEventId = a} :: SignalExternalWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED sewefeaInitiatedEventId "Use generic-lens or generic-optics with 'initiatedEventId' instead." #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @SignalExternalWorkflowExecution@ decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaDecisionTaskCompletedEventId :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes Lude.Integer
sewefeaDecisionTaskCompletedEventId = Lens.lens (decisionTaskCompletedEventId :: SignalExternalWorkflowExecutionFailedEventAttributes -> Lude.Integer) (\s a -> s {decisionTaskCompletedEventId = a} :: SignalExternalWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED sewefeaDecisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead." #-}

instance
  Lude.FromJSON
    SignalExternalWorkflowExecutionFailedEventAttributes
  where
  parseJSON =
    Lude.withObject
      "SignalExternalWorkflowExecutionFailedEventAttributes"
      ( \x ->
          SignalExternalWorkflowExecutionFailedEventAttributes'
            Lude.<$> (x Lude..:? "control")
            Lude.<*> (x Lude..:? "runId")
            Lude.<*> (x Lude..: "workflowId")
            Lude.<*> (x Lude..: "cause")
            Lude.<*> (x Lude..: "initiatedEventId")
            Lude.<*> (x Lude..: "decisionTaskCompletedEventId")
      )
