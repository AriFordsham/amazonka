{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.SignalExternalWorkflowExecutionFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.SWF.Types.SignalExternalWorkflowExecutionFailedEventAttributes
  ( SignalExternalWorkflowExecutionFailedEventAttributes (..)
  -- * Smart constructor
  , mkSignalExternalWorkflowExecutionFailedEventAttributes
  -- * Lenses
  , sewefeaWorkflowId
  , sewefeaCause
  , sewefeaInitiatedEventId
  , sewefeaDecisionTaskCompletedEventId
  , sewefeaControl
  , sewefeaRunId
  ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.SWF.Types.Data as Types
import qualified Network.AWS.SWF.Types.RunId as Types
import qualified Network.AWS.SWF.Types.SignalExternalWorkflowExecutionFailedCause as Types
import qualified Network.AWS.SWF.Types.WorkflowId as Types

-- | Provides the details of the @SignalExternalWorkflowExecutionFailed@ event.
--
-- /See:/ 'mkSignalExternalWorkflowExecutionFailedEventAttributes' smart constructor.
data SignalExternalWorkflowExecutionFailedEventAttributes = SignalExternalWorkflowExecutionFailedEventAttributes'
  { workflowId :: Types.WorkflowId
    -- ^ The @workflowId@ of the external workflow execution that the signal was being delivered to.
  , cause :: Types.SignalExternalWorkflowExecutionFailedCause
    -- ^ The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
  , initiatedEventId :: Core.Integer
    -- ^ The ID of the @SignalExternalWorkflowExecutionInitiated@ event corresponding to the @SignalExternalWorkflowExecution@ decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
  , decisionTaskCompletedEventId :: Core.Integer
    -- ^ The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @SignalExternalWorkflowExecution@ decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
  , control :: Core.Maybe Types.Data
    -- ^ The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
  , runId :: Core.Maybe Types.RunId
    -- ^ The @runId@ of the external workflow execution that the signal was being delivered to.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'SignalExternalWorkflowExecutionFailedEventAttributes' value with any optional fields omitted.
mkSignalExternalWorkflowExecutionFailedEventAttributes
    :: Types.WorkflowId -- ^ 'workflowId'
    -> Types.SignalExternalWorkflowExecutionFailedCause -- ^ 'cause'
    -> Core.Integer -- ^ 'initiatedEventId'
    -> Core.Integer -- ^ 'decisionTaskCompletedEventId'
    -> SignalExternalWorkflowExecutionFailedEventAttributes
mkSignalExternalWorkflowExecutionFailedEventAttributes workflowId
  cause initiatedEventId decisionTaskCompletedEventId
  = SignalExternalWorkflowExecutionFailedEventAttributes'{workflowId,
                                                          cause, initiatedEventId,
                                                          decisionTaskCompletedEventId,
                                                          control = Core.Nothing,
                                                          runId = Core.Nothing}

-- | The @workflowId@ of the external workflow execution that the signal was being delivered to.
--
-- /Note:/ Consider using 'workflowId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaWorkflowId :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes Types.WorkflowId
sewefeaWorkflowId = Lens.field @"workflowId"
{-# INLINEABLE sewefeaWorkflowId #-}
{-# DEPRECATED workflowId "Use generic-lens or generic-optics with 'workflowId' instead"  #-}

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaCause :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes Types.SignalExternalWorkflowExecutionFailedCause
sewefeaCause = Lens.field @"cause"
{-# INLINEABLE sewefeaCause #-}
{-# DEPRECATED cause "Use generic-lens or generic-optics with 'cause' instead"  #-}

-- | The ID of the @SignalExternalWorkflowExecutionInitiated@ event corresponding to the @SignalExternalWorkflowExecution@ decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'initiatedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaInitiatedEventId :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes Core.Integer
sewefeaInitiatedEventId = Lens.field @"initiatedEventId"
{-# INLINEABLE sewefeaInitiatedEventId #-}
{-# DEPRECATED initiatedEventId "Use generic-lens or generic-optics with 'initiatedEventId' instead"  #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @SignalExternalWorkflowExecution@ decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaDecisionTaskCompletedEventId :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes Core.Integer
sewefeaDecisionTaskCompletedEventId = Lens.field @"decisionTaskCompletedEventId"
{-# INLINEABLE sewefeaDecisionTaskCompletedEventId #-}
{-# DEPRECATED decisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead"  #-}

-- | The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
--
-- /Note:/ Consider using 'control' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaControl :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes (Core.Maybe Types.Data)
sewefeaControl = Lens.field @"control"
{-# INLINEABLE sewefeaControl #-}
{-# DEPRECATED control "Use generic-lens or generic-optics with 'control' instead"  #-}

-- | The @runId@ of the external workflow execution that the signal was being delivered to.
--
-- /Note:/ Consider using 'runId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sewefeaRunId :: Lens.Lens' SignalExternalWorkflowExecutionFailedEventAttributes (Core.Maybe Types.RunId)
sewefeaRunId = Lens.field @"runId"
{-# INLINEABLE sewefeaRunId #-}
{-# DEPRECATED runId "Use generic-lens or generic-optics with 'runId' instead"  #-}

instance Core.FromJSON
           SignalExternalWorkflowExecutionFailedEventAttributes
         where
        parseJSON
          = Core.withObject
              "SignalExternalWorkflowExecutionFailedEventAttributes"
              Core.$
              \ x ->
                SignalExternalWorkflowExecutionFailedEventAttributes' Core.<$>
                  (x Core..: "workflowId") Core.<*> x Core..: "cause" Core.<*>
                    x Core..: "initiatedEventId"
                    Core.<*> x Core..: "decisionTaskCompletedEventId"
                    Core.<*> x Core..:? "control"
                    Core.<*> x Core..:? "runId"
