{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.CancelTimerFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.SWF.Types.CancelTimerFailedEventAttributes
  ( CancelTimerFailedEventAttributes (..)
  -- * Smart constructor
  , mkCancelTimerFailedEventAttributes
  -- * Lenses
  , ctfeaTimerId
  , ctfeaCause
  , ctfeaDecisionTaskCompletedEventId
  ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.SWF.Types.CancelTimerFailedCause as Types
import qualified Network.AWS.SWF.Types.TimerId as Types

-- | Provides the details of the @CancelTimerFailed@ event.
--
-- /See:/ 'mkCancelTimerFailedEventAttributes' smart constructor.
data CancelTimerFailedEventAttributes = CancelTimerFailedEventAttributes'
  { timerId :: Types.TimerId
    -- ^ The timerId provided in the @CancelTimer@ decision that failed.
  , cause :: Types.CancelTimerFailedCause
    -- ^ The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
  , decisionTaskCompletedEventId :: Core.Integer
    -- ^ The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @CancelTimer@ decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CancelTimerFailedEventAttributes' value with any optional fields omitted.
mkCancelTimerFailedEventAttributes
    :: Types.TimerId -- ^ 'timerId'
    -> Types.CancelTimerFailedCause -- ^ 'cause'
    -> Core.Integer -- ^ 'decisionTaskCompletedEventId'
    -> CancelTimerFailedEventAttributes
mkCancelTimerFailedEventAttributes timerId cause
  decisionTaskCompletedEventId
  = CancelTimerFailedEventAttributes'{timerId, cause,
                                      decisionTaskCompletedEventId}

-- | The timerId provided in the @CancelTimer@ decision that failed.
--
-- /Note:/ Consider using 'timerId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctfeaTimerId :: Lens.Lens' CancelTimerFailedEventAttributes Types.TimerId
ctfeaTimerId = Lens.field @"timerId"
{-# INLINEABLE ctfeaTimerId #-}
{-# DEPRECATED timerId "Use generic-lens or generic-optics with 'timerId' instead"  #-}

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctfeaCause :: Lens.Lens' CancelTimerFailedEventAttributes Types.CancelTimerFailedCause
ctfeaCause = Lens.field @"cause"
{-# INLINEABLE ctfeaCause #-}
{-# DEPRECATED cause "Use generic-lens or generic-optics with 'cause' instead"  #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @CancelTimer@ decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ctfeaDecisionTaskCompletedEventId :: Lens.Lens' CancelTimerFailedEventAttributes Core.Integer
ctfeaDecisionTaskCompletedEventId = Lens.field @"decisionTaskCompletedEventId"
{-# INLINEABLE ctfeaDecisionTaskCompletedEventId #-}
{-# DEPRECATED decisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead"  #-}

instance Core.FromJSON CancelTimerFailedEventAttributes where
        parseJSON
          = Core.withObject "CancelTimerFailedEventAttributes" Core.$
              \ x ->
                CancelTimerFailedEventAttributes' Core.<$>
                  (x Core..: "timerId") Core.<*> x Core..: "cause" Core.<*>
                    x Core..: "decisionTaskCompletedEventId"
