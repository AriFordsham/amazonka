{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.CompleteWorkflowExecutionFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SWF.Types.CompleteWorkflowExecutionFailedEventAttributes
  ( CompleteWorkflowExecutionFailedEventAttributes (..),

    -- * Smart constructor
    mkCompleteWorkflowExecutionFailedEventAttributes,

    -- * Lenses
    cwefeaCause,
    cwefeaDecisionTaskCompletedEventId,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import Network.AWS.SWF.Types.CompleteWorkflowExecutionFailedCause

-- | Provides the details of the @CompleteWorkflowExecutionFailed@ event.
--
-- /See:/ 'mkCompleteWorkflowExecutionFailedEventAttributes' smart constructor.
data CompleteWorkflowExecutionFailedEventAttributes = CompleteWorkflowExecutionFailedEventAttributes'
  { -- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
    cause :: CompleteWorkflowExecutionFailedCause,
    -- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @CompleteWorkflowExecution@ decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
    decisionTaskCompletedEventId :: Lude.Integer
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CompleteWorkflowExecutionFailedEventAttributes' with the minimum fields required to make a request.
--
-- * 'cause' - The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
-- * 'decisionTaskCompletedEventId' - The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @CompleteWorkflowExecution@ decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
mkCompleteWorkflowExecutionFailedEventAttributes ::
  -- | 'cause'
  CompleteWorkflowExecutionFailedCause ->
  -- | 'decisionTaskCompletedEventId'
  Lude.Integer ->
  CompleteWorkflowExecutionFailedEventAttributes
mkCompleteWorkflowExecutionFailedEventAttributes
  pCause_
  pDecisionTaskCompletedEventId_ =
    CompleteWorkflowExecutionFailedEventAttributes'
      { cause = pCause_,
        decisionTaskCompletedEventId =
          pDecisionTaskCompletedEventId_
      }

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cwefeaCause :: Lens.Lens' CompleteWorkflowExecutionFailedEventAttributes CompleteWorkflowExecutionFailedCause
cwefeaCause = Lens.lens (cause :: CompleteWorkflowExecutionFailedEventAttributes -> CompleteWorkflowExecutionFailedCause) (\s a -> s {cause = a} :: CompleteWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED cwefeaCause "Use generic-lens or generic-optics with 'cause' instead." #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @CompleteWorkflowExecution@ decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cwefeaDecisionTaskCompletedEventId :: Lens.Lens' CompleteWorkflowExecutionFailedEventAttributes Lude.Integer
cwefeaDecisionTaskCompletedEventId = Lens.lens (decisionTaskCompletedEventId :: CompleteWorkflowExecutionFailedEventAttributes -> Lude.Integer) (\s a -> s {decisionTaskCompletedEventId = a} :: CompleteWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED cwefeaDecisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead." #-}

instance
  Lude.FromJSON
    CompleteWorkflowExecutionFailedEventAttributes
  where
  parseJSON =
    Lude.withObject
      "CompleteWorkflowExecutionFailedEventAttributes"
      ( \x ->
          CompleteWorkflowExecutionFailedEventAttributes'
            Lude.<$> (x Lude..: "cause")
            Lude.<*> (x Lude..: "decisionTaskCompletedEventId")
      )
