{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.CancelWorkflowExecutionFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.SWF.Types.CancelWorkflowExecutionFailedEventAttributes
  ( CancelWorkflowExecutionFailedEventAttributes (..),

    -- * Smart constructor
    mkCancelWorkflowExecutionFailedEventAttributes,

    -- * Lenses
    cCause,
    cDecisionTaskCompletedEventId,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import Network.AWS.SWF.Types.CancelWorkflowExecutionFailedCause

-- | Provides the details of the @CancelWorkflowExecutionFailed@ event.
--
-- /See:/ 'mkCancelWorkflowExecutionFailedEventAttributes' smart constructor.
data CancelWorkflowExecutionFailedEventAttributes = CancelWorkflowExecutionFailedEventAttributes'
  { cause ::
      CancelWorkflowExecutionFailedCause,
    decisionTaskCompletedEventId ::
      Lude.Integer
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CancelWorkflowExecutionFailedEventAttributes' with the minimum fields required to make a request.
--
-- * 'cause' - The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
-- * 'decisionTaskCompletedEventId' - The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @CancelWorkflowExecution@ decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
mkCancelWorkflowExecutionFailedEventAttributes ::
  -- | 'cause'
  CancelWorkflowExecutionFailedCause ->
  -- | 'decisionTaskCompletedEventId'
  Lude.Integer ->
  CancelWorkflowExecutionFailedEventAttributes
mkCancelWorkflowExecutionFailedEventAttributes
  pCause_
  pDecisionTaskCompletedEventId_ =
    CancelWorkflowExecutionFailedEventAttributes'
      { cause = pCause_,
        decisionTaskCompletedEventId =
          pDecisionTaskCompletedEventId_
      }

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cCause :: Lens.Lens' CancelWorkflowExecutionFailedEventAttributes CancelWorkflowExecutionFailedCause
cCause = Lens.lens (cause :: CancelWorkflowExecutionFailedEventAttributes -> CancelWorkflowExecutionFailedCause) (\s a -> s {cause = a} :: CancelWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED cCause "Use generic-lens or generic-optics with 'cause' instead." #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @CancelWorkflowExecution@ decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
cDecisionTaskCompletedEventId :: Lens.Lens' CancelWorkflowExecutionFailedEventAttributes Lude.Integer
cDecisionTaskCompletedEventId = Lens.lens (decisionTaskCompletedEventId :: CancelWorkflowExecutionFailedEventAttributes -> Lude.Integer) (\s a -> s {decisionTaskCompletedEventId = a} :: CancelWorkflowExecutionFailedEventAttributes)
{-# DEPRECATED cDecisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead." #-}

instance Lude.FromJSON CancelWorkflowExecutionFailedEventAttributes where
  parseJSON =
    Lude.withObject
      "CancelWorkflowExecutionFailedEventAttributes"
      ( \x ->
          CancelWorkflowExecutionFailedEventAttributes'
            Lude.<$> (x Lude..: "cause")
            Lude.<*> (x Lude..: "decisionTaskCompletedEventId")
      )
