{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.Types.RecordMarkerFailedEventAttributes
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.SWF.Types.RecordMarkerFailedEventAttributes
  ( RecordMarkerFailedEventAttributes (..)
  -- * Smart constructor
  , mkRecordMarkerFailedEventAttributes
  -- * Lenses
  , rmfeaMarkerName
  , rmfeaCause
  , rmfeaDecisionTaskCompletedEventId
  ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.SWF.Types.MarkerName as Types
import qualified Network.AWS.SWF.Types.RecordMarkerFailedCause as Types

-- | Provides the details of the @RecordMarkerFailed@ event.
--
-- /See:/ 'mkRecordMarkerFailedEventAttributes' smart constructor.
data RecordMarkerFailedEventAttributes = RecordMarkerFailedEventAttributes'
  { markerName :: Types.MarkerName
    -- ^ The marker's name.
  , cause :: Types.RecordMarkerFailedCause
    -- ^ The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
  , decisionTaskCompletedEventId :: Core.Integer
    -- ^ The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @RecordMarkerFailed@ decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'RecordMarkerFailedEventAttributes' value with any optional fields omitted.
mkRecordMarkerFailedEventAttributes
    :: Types.MarkerName -- ^ 'markerName'
    -> Types.RecordMarkerFailedCause -- ^ 'cause'
    -> Core.Integer -- ^ 'decisionTaskCompletedEventId'
    -> RecordMarkerFailedEventAttributes
mkRecordMarkerFailedEventAttributes markerName cause
  decisionTaskCompletedEventId
  = RecordMarkerFailedEventAttributes'{markerName, cause,
                                       decisionTaskCompletedEventId}

-- | The marker's name.
--
-- /Note:/ Consider using 'markerName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rmfeaMarkerName :: Lens.Lens' RecordMarkerFailedEventAttributes Types.MarkerName
rmfeaMarkerName = Lens.field @"markerName"
{-# INLINEABLE rmfeaMarkerName #-}
{-# DEPRECATED markerName "Use generic-lens or generic-optics with 'markerName' instead"  #-}

-- | The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.
--
-- /Note:/ Consider using 'cause' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rmfeaCause :: Lens.Lens' RecordMarkerFailedEventAttributes Types.RecordMarkerFailedCause
rmfeaCause = Lens.field @"cause"
{-# INLINEABLE rmfeaCause #-}
{-# DEPRECATED cause "Use generic-lens or generic-optics with 'cause' instead"  #-}

-- | The ID of the @DecisionTaskCompleted@ event corresponding to the decision task that resulted in the @RecordMarkerFailed@ decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
--
-- /Note:/ Consider using 'decisionTaskCompletedEventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rmfeaDecisionTaskCompletedEventId :: Lens.Lens' RecordMarkerFailedEventAttributes Core.Integer
rmfeaDecisionTaskCompletedEventId = Lens.field @"decisionTaskCompletedEventId"
{-# INLINEABLE rmfeaDecisionTaskCompletedEventId #-}
{-# DEPRECATED decisionTaskCompletedEventId "Use generic-lens or generic-optics with 'decisionTaskCompletedEventId' instead"  #-}

instance Core.FromJSON RecordMarkerFailedEventAttributes where
        parseJSON
          = Core.withObject "RecordMarkerFailedEventAttributes" Core.$
              \ x ->
                RecordMarkerFailedEventAttributes' Core.<$>
                  (x Core..: "markerName") Core.<*> x Core..: "cause" Core.<*>
                    x Core..: "decisionTaskCompletedEventId"
