{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.SWF.RespondActivityTaskCanceled
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by workers to tell the service that the 'ActivityTask' identified by the @taskToken@ was successfully canceled. Additional @details@ can be provided using the @details@ argument.
--
-- These @details@ (if provided) appear in the @ActivityTaskCanceled@ event added to the workflow history.
-- /Important:/ Only use this operation if the @canceled@ flag of a 'RecordActivityTaskHeartbeat' request returns @true@ and if the activity can be safely undone or abandoned.
-- A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to 'RespondActivityTaskCompleted' , RespondActivityTaskCanceled, 'RespondActivityTaskFailed' , or the task has <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types timed out> .
-- __Access Control__
-- You can use IAM policies to control this action's access to Amazon SWF resources as follows:
--
--     * Use a @Resource@ element with the domain name to limit the action to only specified domains.
--
--
--     * Use an @Action@ element to allow or deny permission to call this action.
--
--
--     * You cannot use an IAM policy to constrain this action's parameters.
--
--
-- If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's @cause@ parameter is set to @OPERATION_NOT_PERMITTED@ . For details and example IAM policies, see <https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html Using IAM to Manage Access to Amazon SWF Workflows> in the /Amazon SWF Developer Guide/ .
module Network.AWS.SWF.RespondActivityTaskCanceled
  ( -- * Creating a request
    RespondActivityTaskCanceled (..),
    mkRespondActivityTaskCanceled,

    -- ** Request lenses
    rDetails,
    rTaskToken,

    -- * Destructuring the response
    RespondActivityTaskCanceledResponse (..),
    mkRespondActivityTaskCanceledResponse,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.SWF.Types

-- | /See:/ 'mkRespondActivityTaskCanceled' smart constructor.
data RespondActivityTaskCanceled = RespondActivityTaskCanceled'
  { details ::
      Lude.Maybe Lude.Text,
    taskToken :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RespondActivityTaskCanceled' with the minimum fields required to make a request.
--
-- * 'details' - Information about the cancellation.
-- * 'taskToken' - The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
mkRespondActivityTaskCanceled ::
  -- | 'taskToken'
  Lude.Text ->
  RespondActivityTaskCanceled
mkRespondActivityTaskCanceled pTaskToken_ =
  RespondActivityTaskCanceled'
    { details = Lude.Nothing,
      taskToken = pTaskToken_
    }

-- | Information about the cancellation.
--
-- /Note:/ Consider using 'details' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rDetails :: Lens.Lens' RespondActivityTaskCanceled (Lude.Maybe Lude.Text)
rDetails = Lens.lens (details :: RespondActivityTaskCanceled -> Lude.Maybe Lude.Text) (\s a -> s {details = a} :: RespondActivityTaskCanceled)
{-# DEPRECATED rDetails "Use generic-lens or generic-optics with 'details' instead." #-}

-- | The @taskToken@ of the 'ActivityTask' .
--
-- /Important:/ @taskToken@ is generated by the service and should be treated as an opaque value. If the task is passed to another process, its @taskToken@ must also be passed. This enables it to provide its progress and respond with results.
--
-- /Note:/ Consider using 'taskToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
rTaskToken :: Lens.Lens' RespondActivityTaskCanceled Lude.Text
rTaskToken = Lens.lens (taskToken :: RespondActivityTaskCanceled -> Lude.Text) (\s a -> s {taskToken = a} :: RespondActivityTaskCanceled)
{-# DEPRECATED rTaskToken "Use generic-lens or generic-optics with 'taskToken' instead." #-}

instance Lude.AWSRequest RespondActivityTaskCanceled where
  type
    Rs RespondActivityTaskCanceled =
      RespondActivityTaskCanceledResponse
  request = Req.postJSON swfService
  response = Res.receiveNull RespondActivityTaskCanceledResponse'

instance Lude.ToHeaders RespondActivityTaskCanceled where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ( "SimpleWorkflowService.RespondActivityTaskCanceled" ::
                          Lude.ByteString
                      ),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.0" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON RespondActivityTaskCanceled where
  toJSON RespondActivityTaskCanceled' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("details" Lude..=) Lude.<$> details,
            Lude.Just ("taskToken" Lude..= taskToken)
          ]
      )

instance Lude.ToPath RespondActivityTaskCanceled where
  toPath = Lude.const "/"

instance Lude.ToQuery RespondActivityTaskCanceled where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkRespondActivityTaskCanceledResponse' smart constructor.
data RespondActivityTaskCanceledResponse = RespondActivityTaskCanceledResponse'
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'RespondActivityTaskCanceledResponse' with the minimum fields required to make a request.
mkRespondActivityTaskCanceledResponse ::
  RespondActivityTaskCanceledResponse
mkRespondActivityTaskCanceledResponse =
  RespondActivityTaskCanceledResponse'
