{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Support.DescribeAttachment
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns the attachment that has the specified ID. Attachments can include screenshots, error logs, or other files that describe your issue. Attachment IDs are generated by the case management system when you add an attachment to a case or case communication. Attachment IDs are returned in the 'AttachmentDetails' objects that are returned by the 'DescribeCommunications' operation.
module Network.AWS.Support.DescribeAttachment
    (
    -- * Creating a request
      DescribeAttachment (..)
    , mkDescribeAttachment
    -- ** Request lenses
    , daAttachmentId

    -- * Destructuring the response
    , DescribeAttachmentResponse (..)
    , mkDescribeAttachmentResponse
    -- ** Response lenses
    , darrsAttachment
    , darrsResponseStatus
    ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response
import qualified Network.AWS.Support.Types as Types

-- | /See:/ 'mkDescribeAttachment' smart constructor.
newtype DescribeAttachment = DescribeAttachment'
  { attachmentId :: Types.AttachmentId
    -- ^ The ID of the attachment to return. Attachment IDs are returned by the 'DescribeCommunications' operation.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving newtype (Core.Hashable, Core.NFData)

-- | Creates a 'DescribeAttachment' value with any optional fields omitted.
mkDescribeAttachment
    :: Types.AttachmentId -- ^ 'attachmentId'
    -> DescribeAttachment
mkDescribeAttachment attachmentId
  = DescribeAttachment'{attachmentId}

-- | The ID of the attachment to return. Attachment IDs are returned by the 'DescribeCommunications' operation.
--
-- /Note:/ Consider using 'attachmentId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
daAttachmentId :: Lens.Lens' DescribeAttachment Types.AttachmentId
daAttachmentId = Lens.field @"attachmentId"
{-# INLINEABLE daAttachmentId #-}
{-# DEPRECATED attachmentId "Use generic-lens or generic-optics with 'attachmentId' instead"  #-}

instance Core.ToQuery DescribeAttachment where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders DescribeAttachment where
        toHeaders DescribeAttachment{..}
          = Core.pure
              ("X-Amz-Target", "AWSSupport_20130415.DescribeAttachment")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON DescribeAttachment where
        toJSON DescribeAttachment{..}
          = Core.object
              (Core.catMaybes [Core.Just ("attachmentId" Core..= attachmentId)])

instance Core.AWSRequest DescribeAttachment where
        type Rs DescribeAttachment = DescribeAttachmentResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 DescribeAttachmentResponse' Core.<$>
                   (x Core..:? "attachment") Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | The content and file name of the attachment returned by the 'DescribeAttachment' operation.
--
-- /See:/ 'mkDescribeAttachmentResponse' smart constructor.
data DescribeAttachmentResponse = DescribeAttachmentResponse'
  { attachment :: Core.Maybe Types.Attachment
    -- ^ This object includes the attachment content and file name.
--
-- In the previous response syntax, the value for the @data@ parameter appears as @blob@ , which is represented as a base64-encoded string. The value for @fileName@ is the name of the attachment, such as @troubleshoot-screenshot.png@ .
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'DescribeAttachmentResponse' value with any optional fields omitted.
mkDescribeAttachmentResponse
    :: Core.Int -- ^ 'responseStatus'
    -> DescribeAttachmentResponse
mkDescribeAttachmentResponse responseStatus
  = DescribeAttachmentResponse'{attachment = Core.Nothing,
                                responseStatus}

-- | This object includes the attachment content and file name.
--
-- In the previous response syntax, the value for the @data@ parameter appears as @blob@ , which is represented as a base64-encoded string. The value for @fileName@ is the name of the attachment, such as @troubleshoot-screenshot.png@ .
--
-- /Note:/ Consider using 'attachment' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
darrsAttachment :: Lens.Lens' DescribeAttachmentResponse (Core.Maybe Types.Attachment)
darrsAttachment = Lens.field @"attachment"
{-# INLINEABLE darrsAttachment #-}
{-# DEPRECATED attachment "Use generic-lens or generic-optics with 'attachment' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
darrsResponseStatus :: Lens.Lens' DescribeAttachmentResponse Core.Int
darrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE darrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
