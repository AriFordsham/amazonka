{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Support.DescribeAttachment
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns the attachment that has the specified ID. Attachments can include screenshots, error logs, or other files that describe your issue. Attachment IDs are generated by the case management system when you add an attachment to a case or case communication. Attachment IDs are returned in the 'AttachmentDetails' objects that are returned by the 'DescribeCommunications' operation.
module Network.AWS.Support.DescribeAttachment
  ( -- * Creating a request
    DescribeAttachment (..),
    mkDescribeAttachment,

    -- ** Request lenses
    daAttachmentId,

    -- * Destructuring the response
    DescribeAttachmentResponse (..),
    mkDescribeAttachmentResponse,

    -- ** Response lenses
    darsAttachment,
    darsResponseStatus,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res
import Network.AWS.Support.Types

-- | /See:/ 'mkDescribeAttachment' smart constructor.
newtype DescribeAttachment = DescribeAttachment'
  { -- | The ID of the attachment to return. Attachment IDs are returned by the 'DescribeCommunications' operation.
    attachmentId :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving newtype (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'DescribeAttachment' with the minimum fields required to make a request.
--
-- * 'attachmentId' - The ID of the attachment to return. Attachment IDs are returned by the 'DescribeCommunications' operation.
mkDescribeAttachment ::
  -- | 'attachmentId'
  Lude.Text ->
  DescribeAttachment
mkDescribeAttachment pAttachmentId_ =
  DescribeAttachment' {attachmentId = pAttachmentId_}

-- | The ID of the attachment to return. Attachment IDs are returned by the 'DescribeCommunications' operation.
--
-- /Note:/ Consider using 'attachmentId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
daAttachmentId :: Lens.Lens' DescribeAttachment Lude.Text
daAttachmentId = Lens.lens (attachmentId :: DescribeAttachment -> Lude.Text) (\s a -> s {attachmentId = a} :: DescribeAttachment)
{-# DEPRECATED daAttachmentId "Use generic-lens or generic-optics with 'attachmentId' instead." #-}

instance Lude.AWSRequest DescribeAttachment where
  type Rs DescribeAttachment = DescribeAttachmentResponse
  request = Req.postJSON supportService
  response =
    Res.receiveJSON
      ( \s h x ->
          DescribeAttachmentResponse'
            Lude.<$> (x Lude..?> "attachment") Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders DescribeAttachment where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("AWSSupport_20130415.DescribeAttachment" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON DescribeAttachment where
  toJSON DescribeAttachment' {..} =
    Lude.object
      (Lude.catMaybes [Lude.Just ("attachmentId" Lude..= attachmentId)])

instance Lude.ToPath DescribeAttachment where
  toPath = Lude.const "/"

instance Lude.ToQuery DescribeAttachment where
  toQuery = Lude.const Lude.mempty

-- | The content and file name of the attachment returned by the 'DescribeAttachment' operation.
--
-- /See:/ 'mkDescribeAttachmentResponse' smart constructor.
data DescribeAttachmentResponse = DescribeAttachmentResponse'
  { -- | This object includes the attachment content and file name.
    --
    -- In the previous response syntax, the value for the @data@ parameter appears as @blob@ , which is represented as a base64-encoded string. The value for @fileName@ is the name of the attachment, such as @troubleshoot-screenshot.png@ .
    attachment :: Lude.Maybe Attachment,
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'DescribeAttachmentResponse' with the minimum fields required to make a request.
--
-- * 'attachment' - This object includes the attachment content and file name.
--
-- In the previous response syntax, the value for the @data@ parameter appears as @blob@ , which is represented as a base64-encoded string. The value for @fileName@ is the name of the attachment, such as @troubleshoot-screenshot.png@ .
-- * 'responseStatus' - The response status code.
mkDescribeAttachmentResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  DescribeAttachmentResponse
mkDescribeAttachmentResponse pResponseStatus_ =
  DescribeAttachmentResponse'
    { attachment = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | This object includes the attachment content and file name.
--
-- In the previous response syntax, the value for the @data@ parameter appears as @blob@ , which is represented as a base64-encoded string. The value for @fileName@ is the name of the attachment, such as @troubleshoot-screenshot.png@ .
--
-- /Note:/ Consider using 'attachment' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
darsAttachment :: Lens.Lens' DescribeAttachmentResponse (Lude.Maybe Attachment)
darsAttachment = Lens.lens (attachment :: DescribeAttachmentResponse -> Lude.Maybe Attachment) (\s a -> s {attachment = a} :: DescribeAttachmentResponse)
{-# DEPRECATED darsAttachment "Use generic-lens or generic-optics with 'attachment' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
darsResponseStatus :: Lens.Lens' DescribeAttachmentResponse Lude.Int
darsResponseStatus = Lens.lens (responseStatus :: DescribeAttachmentResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: DescribeAttachmentResponse)
{-# DEPRECATED darsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
