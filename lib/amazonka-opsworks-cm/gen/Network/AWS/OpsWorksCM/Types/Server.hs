{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.OpsWorksCM.Types.Server
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.OpsWorksCM.Types.Server
  ( Server (..),

    -- * Smart constructor
    mkServer,

    -- * Lenses
    sAssociatePublicIpAddress,
    sBackupRetentionCount,
    sCloudFormationStackArn,
    sCreatedAt,
    sCustomDomain,
    sDisableAutomatedBackup,
    sEndpoint,
    sEngine,
    sEngineAttributes,
    sEngineModel,
    sEngineVersion,
    sInstanceProfileArn,
    sInstanceType,
    sKeyPair,
    sMaintenanceStatus,
    sPreferredBackupWindow,
    sPreferredMaintenanceWindow,
    sSecurityGroupIds,
    sServerArn,
    sServerName,
    sServiceRoleArn,
    sStatus,
    sStatusReason,
    sSubnetIds,
  )
where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.OpsWorksCM.Types.CustomDomain as Types
import qualified Network.AWS.OpsWorksCM.Types.EngineAttribute as Types
import qualified Network.AWS.OpsWorksCM.Types.MaintenanceStatus as Types
import qualified Network.AWS.OpsWorksCM.Types.ServerStatus as Types
import qualified Network.AWS.OpsWorksCM.Types.String as Types
import qualified Network.AWS.OpsWorksCM.Types.TimeWindowDefinition as Types
import qualified Network.AWS.Prelude as Core

-- | Describes a configuration management server.
--
-- /See:/ 'mkServer' smart constructor.
data Server = Server'
  { -- | Associate a public IP address with a server that you are launching.
    associatePublicIpAddress :: Core.Maybe Core.Bool,
    -- | The number of automated backups to keep.
    backupRetentionCount :: Core.Maybe Core.Int,
    -- | The ARN of the CloudFormation stack that was used to create the server.
    cloudFormationStackArn :: Core.Maybe Types.String,
    -- | Time stamp of server creation. Example @2016-07-29T13:38:47.520Z@
    createdAt :: Core.Maybe Core.NominalDiffTime,
    -- | An optional public endpoint of a server, such as @https://aws.my-company.com@ . You cannot access the server by using the @Endpoint@ value if the server has a @CustomDomain@ specified.
    customDomain :: Core.Maybe Types.CustomDomain,
    -- | Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount.
    disableAutomatedBackup :: Core.Maybe Core.Bool,
    -- | A DNS name that can be used to access the engine. Example: @myserver-asdfghjkl.us-east-1.opsworks.io@ . You cannot access the server by using the @Endpoint@ value if the server has a @CustomDomain@ specified.
    endpoint :: Core.Maybe Types.String,
    -- | The engine type of the server. Valid values in this release include @ChefAutomate@ and @Puppet@ .
    engine :: Core.Maybe Types.String,
    -- | The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer().
    --
    -- __Attributes returned in a createServer response for Chef__
    --
    --     * @CHEF_AUTOMATE_PIVOTAL_KEY@ : A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.
    --
    --
    --     * @CHEF_STARTER_KIT@ : A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.
    --
    --
    -- __Attributes returned in a createServer response for Puppet__
    --
    --     * @PUPPET_STARTER_KIT@ : A base64-encoded ZIP file. The ZIP file contains a Puppet starter kit, including a README and a required private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents.
    --
    --
    --     * @PUPPET_ADMIN_PASSWORD@ : An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.
    engineAttributes :: Core.Maybe [Types.EngineAttribute],
    -- | The engine model of the server. Valid values in this release include @Monolithic@ for Puppet and @Single@ for Chef.
    engineModel :: Core.Maybe Types.String,
    -- | The engine version of the server. For a Chef server, the valid value for EngineVersion is currently @2@ . For a Puppet server, the valid value is @2017@ .
    engineVersion :: Core.Maybe Types.String,
    -- | The instance profile ARN of the server.
    instanceProfileArn :: Core.Maybe Types.String,
    -- | The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console.
    instanceType :: Core.Maybe Types.String,
    -- | The key pair associated with the server.
    keyPair :: Core.Maybe Types.String,
    -- | The status of the most recent server maintenance run. Shows @SUCCESS@ or @FAILED@ .
    maintenanceStatus :: Core.Maybe Types.MaintenanceStatus,
    -- | The preferred backup period specified for the server.
    preferredBackupWindow :: Core.Maybe Types.TimeWindowDefinition,
    -- | The preferred maintenance period specified for the server.
    preferredMaintenanceWindow :: Core.Maybe Types.TimeWindowDefinition,
    -- | The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console.
    securityGroupIds :: Core.Maybe [Types.String],
    -- | The ARN of the server.
    serverArn :: Core.Maybe Types.String,
    -- | The name of the server.
    serverName :: Core.Maybe Types.String,
    -- | The service role ARN used to create the server.
    serviceRoleArn :: Core.Maybe Types.String,
    -- | The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state.
    status :: Core.Maybe Types.ServerStatus,
    -- | Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results).
    statusReason :: Core.Maybe Types.String,
    -- | The subnet IDs specified in a CreateServer request.
    subnetIds :: Core.Maybe [Types.String]
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'Server' value with any optional fields omitted.
mkServer ::
  Server
mkServer =
  Server'
    { associatePublicIpAddress = Core.Nothing,
      backupRetentionCount = Core.Nothing,
      cloudFormationStackArn = Core.Nothing,
      createdAt = Core.Nothing,
      customDomain = Core.Nothing,
      disableAutomatedBackup = Core.Nothing,
      endpoint = Core.Nothing,
      engine = Core.Nothing,
      engineAttributes = Core.Nothing,
      engineModel = Core.Nothing,
      engineVersion = Core.Nothing,
      instanceProfileArn = Core.Nothing,
      instanceType = Core.Nothing,
      keyPair = Core.Nothing,
      maintenanceStatus = Core.Nothing,
      preferredBackupWindow = Core.Nothing,
      preferredMaintenanceWindow = Core.Nothing,
      securityGroupIds = Core.Nothing,
      serverArn = Core.Nothing,
      serverName = Core.Nothing,
      serviceRoleArn = Core.Nothing,
      status = Core.Nothing,
      statusReason = Core.Nothing,
      subnetIds = Core.Nothing
    }

-- | Associate a public IP address with a server that you are launching.
--
-- /Note:/ Consider using 'associatePublicIpAddress' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sAssociatePublicIpAddress :: Lens.Lens' Server (Core.Maybe Core.Bool)
sAssociatePublicIpAddress = Lens.field @"associatePublicIpAddress"
{-# DEPRECATED sAssociatePublicIpAddress "Use generic-lens or generic-optics with 'associatePublicIpAddress' instead." #-}

-- | The number of automated backups to keep.
--
-- /Note:/ Consider using 'backupRetentionCount' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sBackupRetentionCount :: Lens.Lens' Server (Core.Maybe Core.Int)
sBackupRetentionCount = Lens.field @"backupRetentionCount"
{-# DEPRECATED sBackupRetentionCount "Use generic-lens or generic-optics with 'backupRetentionCount' instead." #-}

-- | The ARN of the CloudFormation stack that was used to create the server.
--
-- /Note:/ Consider using 'cloudFormationStackArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sCloudFormationStackArn :: Lens.Lens' Server (Core.Maybe Types.String)
sCloudFormationStackArn = Lens.field @"cloudFormationStackArn"
{-# DEPRECATED sCloudFormationStackArn "Use generic-lens or generic-optics with 'cloudFormationStackArn' instead." #-}

-- | Time stamp of server creation. Example @2016-07-29T13:38:47.520Z@
--
-- /Note:/ Consider using 'createdAt' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sCreatedAt :: Lens.Lens' Server (Core.Maybe Core.NominalDiffTime)
sCreatedAt = Lens.field @"createdAt"
{-# DEPRECATED sCreatedAt "Use generic-lens or generic-optics with 'createdAt' instead." #-}

-- | An optional public endpoint of a server, such as @https://aws.my-company.com@ . You cannot access the server by using the @Endpoint@ value if the server has a @CustomDomain@ specified.
--
-- /Note:/ Consider using 'customDomain' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sCustomDomain :: Lens.Lens' Server (Core.Maybe Types.CustomDomain)
sCustomDomain = Lens.field @"customDomain"
{-# DEPRECATED sCustomDomain "Use generic-lens or generic-optics with 'customDomain' instead." #-}

-- | Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount.
--
-- /Note:/ Consider using 'disableAutomatedBackup' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sDisableAutomatedBackup :: Lens.Lens' Server (Core.Maybe Core.Bool)
sDisableAutomatedBackup = Lens.field @"disableAutomatedBackup"
{-# DEPRECATED sDisableAutomatedBackup "Use generic-lens or generic-optics with 'disableAutomatedBackup' instead." #-}

-- | A DNS name that can be used to access the engine. Example: @myserver-asdfghjkl.us-east-1.opsworks.io@ . You cannot access the server by using the @Endpoint@ value if the server has a @CustomDomain@ specified.
--
-- /Note:/ Consider using 'endpoint' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sEndpoint :: Lens.Lens' Server (Core.Maybe Types.String)
sEndpoint = Lens.field @"endpoint"
{-# DEPRECATED sEndpoint "Use generic-lens or generic-optics with 'endpoint' instead." #-}

-- | The engine type of the server. Valid values in this release include @ChefAutomate@ and @Puppet@ .
--
-- /Note:/ Consider using 'engine' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sEngine :: Lens.Lens' Server (Core.Maybe Types.String)
sEngine = Lens.field @"engine"
{-# DEPRECATED sEngine "Use generic-lens or generic-optics with 'engine' instead." #-}

-- | The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer().
--
-- __Attributes returned in a createServer response for Chef__
--
--     * @CHEF_AUTOMATE_PIVOTAL_KEY@ : A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.
--
--
--     * @CHEF_STARTER_KIT@ : A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.
--
--
-- __Attributes returned in a createServer response for Puppet__
--
--     * @PUPPET_STARTER_KIT@ : A base64-encoded ZIP file. The ZIP file contains a Puppet starter kit, including a README and a required private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents.
--
--
--     * @PUPPET_ADMIN_PASSWORD@ : An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.
--
--
--
-- /Note:/ Consider using 'engineAttributes' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sEngineAttributes :: Lens.Lens' Server (Core.Maybe [Types.EngineAttribute])
sEngineAttributes = Lens.field @"engineAttributes"
{-# DEPRECATED sEngineAttributes "Use generic-lens or generic-optics with 'engineAttributes' instead." #-}

-- | The engine model of the server. Valid values in this release include @Monolithic@ for Puppet and @Single@ for Chef.
--
-- /Note:/ Consider using 'engineModel' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sEngineModel :: Lens.Lens' Server (Core.Maybe Types.String)
sEngineModel = Lens.field @"engineModel"
{-# DEPRECATED sEngineModel "Use generic-lens or generic-optics with 'engineModel' instead." #-}

-- | The engine version of the server. For a Chef server, the valid value for EngineVersion is currently @2@ . For a Puppet server, the valid value is @2017@ .
--
-- /Note:/ Consider using 'engineVersion' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sEngineVersion :: Lens.Lens' Server (Core.Maybe Types.String)
sEngineVersion = Lens.field @"engineVersion"
{-# DEPRECATED sEngineVersion "Use generic-lens or generic-optics with 'engineVersion' instead." #-}

-- | The instance profile ARN of the server.
--
-- /Note:/ Consider using 'instanceProfileArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sInstanceProfileArn :: Lens.Lens' Server (Core.Maybe Types.String)
sInstanceProfileArn = Lens.field @"instanceProfileArn"
{-# DEPRECATED sInstanceProfileArn "Use generic-lens or generic-optics with 'instanceProfileArn' instead." #-}

-- | The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console.
--
-- /Note:/ Consider using 'instanceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sInstanceType :: Lens.Lens' Server (Core.Maybe Types.String)
sInstanceType = Lens.field @"instanceType"
{-# DEPRECATED sInstanceType "Use generic-lens or generic-optics with 'instanceType' instead." #-}

-- | The key pair associated with the server.
--
-- /Note:/ Consider using 'keyPair' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sKeyPair :: Lens.Lens' Server (Core.Maybe Types.String)
sKeyPair = Lens.field @"keyPair"
{-# DEPRECATED sKeyPair "Use generic-lens or generic-optics with 'keyPair' instead." #-}

-- | The status of the most recent server maintenance run. Shows @SUCCESS@ or @FAILED@ .
--
-- /Note:/ Consider using 'maintenanceStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sMaintenanceStatus :: Lens.Lens' Server (Core.Maybe Types.MaintenanceStatus)
sMaintenanceStatus = Lens.field @"maintenanceStatus"
{-# DEPRECATED sMaintenanceStatus "Use generic-lens or generic-optics with 'maintenanceStatus' instead." #-}

-- | The preferred backup period specified for the server.
--
-- /Note:/ Consider using 'preferredBackupWindow' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sPreferredBackupWindow :: Lens.Lens' Server (Core.Maybe Types.TimeWindowDefinition)
sPreferredBackupWindow = Lens.field @"preferredBackupWindow"
{-# DEPRECATED sPreferredBackupWindow "Use generic-lens or generic-optics with 'preferredBackupWindow' instead." #-}

-- | The preferred maintenance period specified for the server.
--
-- /Note:/ Consider using 'preferredMaintenanceWindow' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sPreferredMaintenanceWindow :: Lens.Lens' Server (Core.Maybe Types.TimeWindowDefinition)
sPreferredMaintenanceWindow = Lens.field @"preferredMaintenanceWindow"
{-# DEPRECATED sPreferredMaintenanceWindow "Use generic-lens or generic-optics with 'preferredMaintenanceWindow' instead." #-}

-- | The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console.
--
-- /Note:/ Consider using 'securityGroupIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sSecurityGroupIds :: Lens.Lens' Server (Core.Maybe [Types.String])
sSecurityGroupIds = Lens.field @"securityGroupIds"
{-# DEPRECATED sSecurityGroupIds "Use generic-lens or generic-optics with 'securityGroupIds' instead." #-}

-- | The ARN of the server.
--
-- /Note:/ Consider using 'serverArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sServerArn :: Lens.Lens' Server (Core.Maybe Types.String)
sServerArn = Lens.field @"serverArn"
{-# DEPRECATED sServerArn "Use generic-lens or generic-optics with 'serverArn' instead." #-}

-- | The name of the server.
--
-- /Note:/ Consider using 'serverName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sServerName :: Lens.Lens' Server (Core.Maybe Types.String)
sServerName = Lens.field @"serverName"
{-# DEPRECATED sServerName "Use generic-lens or generic-optics with 'serverName' instead." #-}

-- | The service role ARN used to create the server.
--
-- /Note:/ Consider using 'serviceRoleArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sServiceRoleArn :: Lens.Lens' Server (Core.Maybe Types.String)
sServiceRoleArn = Lens.field @"serviceRoleArn"
{-# DEPRECATED sServiceRoleArn "Use generic-lens or generic-optics with 'serviceRoleArn' instead." #-}

-- | The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state.
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sStatus :: Lens.Lens' Server (Core.Maybe Types.ServerStatus)
sStatus = Lens.field @"status"
{-# DEPRECATED sStatus "Use generic-lens or generic-optics with 'status' instead." #-}

-- | Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results).
--
-- /Note:/ Consider using 'statusReason' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sStatusReason :: Lens.Lens' Server (Core.Maybe Types.String)
sStatusReason = Lens.field @"statusReason"
{-# DEPRECATED sStatusReason "Use generic-lens or generic-optics with 'statusReason' instead." #-}

-- | The subnet IDs specified in a CreateServer request.
--
-- /Note:/ Consider using 'subnetIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sSubnetIds :: Lens.Lens' Server (Core.Maybe [Types.String])
sSubnetIds = Lens.field @"subnetIds"
{-# DEPRECATED sSubnetIds "Use generic-lens or generic-optics with 'subnetIds' instead." #-}

instance Core.FromJSON Server where
  parseJSON =
    Core.withObject "Server" Core.$
      \x ->
        Server'
          Core.<$> (x Core..:? "AssociatePublicIpAddress")
          Core.<*> (x Core..:? "BackupRetentionCount")
          Core.<*> (x Core..:? "CloudFormationStackArn")
          Core.<*> (x Core..:? "CreatedAt")
          Core.<*> (x Core..:? "CustomDomain")
          Core.<*> (x Core..:? "DisableAutomatedBackup")
          Core.<*> (x Core..:? "Endpoint")
          Core.<*> (x Core..:? "Engine")
          Core.<*> (x Core..:? "EngineAttributes")
          Core.<*> (x Core..:? "EngineModel")
          Core.<*> (x Core..:? "EngineVersion")
          Core.<*> (x Core..:? "InstanceProfileArn")
          Core.<*> (x Core..:? "InstanceType")
          Core.<*> (x Core..:? "KeyPair")
          Core.<*> (x Core..:? "MaintenanceStatus")
          Core.<*> (x Core..:? "PreferredBackupWindow")
          Core.<*> (x Core..:? "PreferredMaintenanceWindow")
          Core.<*> (x Core..:? "SecurityGroupIds")
          Core.<*> (x Core..:? "ServerArn")
          Core.<*> (x Core..:? "ServerName")
          Core.<*> (x Core..:? "ServiceRoleArn")
          Core.<*> (x Core..:? "Status")
          Core.<*> (x Core..:? "StatusReason")
          Core.<*> (x Core..:? "SubnetIds")
