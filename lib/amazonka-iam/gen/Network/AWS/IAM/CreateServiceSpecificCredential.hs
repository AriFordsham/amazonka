{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.CreateServiceSpecificCredential
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. 
--
-- You can have a maximum of two sets of service-specific credentials for each supported service per user.
-- The only supported service at this time is AWS CodeCommit.
-- You can reset the password to a new service-generated value by calling 'ResetServiceSpecificCredential' .
-- For more information about service-specific credentials, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys> in the /IAM User Guide/ .
module Network.AWS.IAM.CreateServiceSpecificCredential
    (
    -- * Creating a request
      CreateServiceSpecificCredential (..)
    , mkCreateServiceSpecificCredential
    -- ** Request lenses
    , csscUserName
    , csscServiceName

    -- * Destructuring the response
    , CreateServiceSpecificCredentialResponse (..)
    , mkCreateServiceSpecificCredentialResponse
    -- ** Response lenses
    , csscrrsServiceSpecificCredential
    , csscrrsResponseStatus
    ) where

import qualified Network.AWS.IAM.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkCreateServiceSpecificCredential' smart constructor.
data CreateServiceSpecificCredential = CreateServiceSpecificCredential'
  { userName :: Types.UserName
    -- ^ The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
--
-- This parameter allows (through its <http://wikipedia.org/wiki/regex regex pattern> ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
  , serviceName :: Types.ServiceName
    -- ^ The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'CreateServiceSpecificCredential' value with any optional fields omitted.
mkCreateServiceSpecificCredential
    :: Types.UserName -- ^ 'userName'
    -> Types.ServiceName -- ^ 'serviceName'
    -> CreateServiceSpecificCredential
mkCreateServiceSpecificCredential userName serviceName
  = CreateServiceSpecificCredential'{userName, serviceName}

-- | The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
--
-- This parameter allows (through its <http://wikipedia.org/wiki/regex regex pattern> ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
--
-- /Note:/ Consider using 'userName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csscUserName :: Lens.Lens' CreateServiceSpecificCredential Types.UserName
csscUserName = Lens.field @"userName"
{-# INLINEABLE csscUserName #-}
{-# DEPRECATED userName "Use generic-lens or generic-optics with 'userName' instead"  #-}

-- | The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
--
-- /Note:/ Consider using 'serviceName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csscServiceName :: Lens.Lens' CreateServiceSpecificCredential Types.ServiceName
csscServiceName = Lens.field @"serviceName"
{-# INLINEABLE csscServiceName #-}
{-# DEPRECATED serviceName "Use generic-lens or generic-optics with 'serviceName' instead"  #-}

instance Core.ToQuery CreateServiceSpecificCredential where
        toQuery CreateServiceSpecificCredential{..}
          = Core.toQueryPair "Action"
              ("CreateServiceSpecificCredential" :: Core.Text)
              Core.<> Core.toQueryPair "Version" ("2010-05-08" :: Core.Text)
              Core.<> Core.toQueryPair "UserName" userName
              Core.<> Core.toQueryPair "ServiceName" serviceName

instance Core.ToHeaders CreateServiceSpecificCredential where
        toHeaders _ = Core.pure Core.mempty

instance Core.AWSRequest CreateServiceSpecificCredential where
        type Rs CreateServiceSpecificCredential =
             CreateServiceSpecificCredentialResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.mempty,
                         Core._rqHeaders =
                           Core.pure
                             ("Content-Type",
                              "application/x-www-form-urlencoded; charset=utf-8")
                             Core.<> Core.toHeaders x,
                         Core._rqBody = Core.toFormBody (Core.toQuery x)}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveXMLWrapper
              "CreateServiceSpecificCredentialResult"
              (\ s h x ->
                 CreateServiceSpecificCredentialResponse' Core.<$>
                   (x Core..@? "ServiceSpecificCredential") Core.<*>
                     Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkCreateServiceSpecificCredentialResponse' smart constructor.
data CreateServiceSpecificCredentialResponse = CreateServiceSpecificCredentialResponse'
  { serviceSpecificCredential :: Core.Maybe Types.ServiceSpecificCredential
    -- ^ A structure that contains information about the newly created service-specific credential.
--
-- /Important:/ This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with 'ResetServiceSpecificCredential' .
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'CreateServiceSpecificCredentialResponse' value with any optional fields omitted.
mkCreateServiceSpecificCredentialResponse
    :: Core.Int -- ^ 'responseStatus'
    -> CreateServiceSpecificCredentialResponse
mkCreateServiceSpecificCredentialResponse responseStatus
  = CreateServiceSpecificCredentialResponse'{serviceSpecificCredential
                                               = Core.Nothing,
                                             responseStatus}

-- | A structure that contains information about the newly created service-specific credential.
--
-- /Important:/ This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with 'ResetServiceSpecificCredential' .
--
-- /Note:/ Consider using 'serviceSpecificCredential' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csscrrsServiceSpecificCredential :: Lens.Lens' CreateServiceSpecificCredentialResponse (Core.Maybe Types.ServiceSpecificCredential)
csscrrsServiceSpecificCredential = Lens.field @"serviceSpecificCredential"
{-# INLINEABLE csscrrsServiceSpecificCredential #-}
{-# DEPRECATED serviceSpecificCredential "Use generic-lens or generic-optics with 'serviceSpecificCredential' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csscrrsResponseStatus :: Lens.Lens' CreateServiceSpecificCredentialResponse Core.Int
csscrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE csscrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
