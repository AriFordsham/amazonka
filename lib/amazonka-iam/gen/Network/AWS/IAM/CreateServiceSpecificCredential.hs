{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.CreateServiceSpecificCredential
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service.
--
-- You can have a maximum of two sets of service-specific credentials for each supported service per user.
-- The only supported service at this time is AWS CodeCommit.
-- You can reset the password to a new service-generated value by calling 'ResetServiceSpecificCredential' .
-- For more information about service-specific credentials, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys> in the /IAM User Guide/ .
module Network.AWS.IAM.CreateServiceSpecificCredential
  ( -- * Creating a request
    CreateServiceSpecificCredential (..),
    mkCreateServiceSpecificCredential,

    -- ** Request lenses
    csscUserName,
    csscServiceName,

    -- * Destructuring the response
    CreateServiceSpecificCredentialResponse (..),
    mkCreateServiceSpecificCredentialResponse,

    -- ** Response lenses
    csscrsServiceSpecificCredential,
    csscrsResponseStatus,
  )
where

import Network.AWS.IAM.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkCreateServiceSpecificCredential' smart constructor.
data CreateServiceSpecificCredential = CreateServiceSpecificCredential'
  { -- | The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
    --
    -- This parameter allows (through its <http://wikipedia.org/wiki/regex regex pattern> ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
    userName :: Lude.Text,
    -- | The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
    serviceName :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CreateServiceSpecificCredential' with the minimum fields required to make a request.
--
-- * 'userName' - The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
--
-- This parameter allows (through its <http://wikipedia.org/wiki/regex regex pattern> ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
-- * 'serviceName' - The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
mkCreateServiceSpecificCredential ::
  -- | 'userName'
  Lude.Text ->
  -- | 'serviceName'
  Lude.Text ->
  CreateServiceSpecificCredential
mkCreateServiceSpecificCredential pUserName_ pServiceName_ =
  CreateServiceSpecificCredential'
    { userName = pUserName_,
      serviceName = pServiceName_
    }

-- | The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
--
-- This parameter allows (through its <http://wikipedia.org/wiki/regex regex pattern> ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
--
-- /Note:/ Consider using 'userName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csscUserName :: Lens.Lens' CreateServiceSpecificCredential Lude.Text
csscUserName = Lens.lens (userName :: CreateServiceSpecificCredential -> Lude.Text) (\s a -> s {userName = a} :: CreateServiceSpecificCredential)
{-# DEPRECATED csscUserName "Use generic-lens or generic-optics with 'userName' instead." #-}

-- | The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
--
-- /Note:/ Consider using 'serviceName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csscServiceName :: Lens.Lens' CreateServiceSpecificCredential Lude.Text
csscServiceName = Lens.lens (serviceName :: CreateServiceSpecificCredential -> Lude.Text) (\s a -> s {serviceName = a} :: CreateServiceSpecificCredential)
{-# DEPRECATED csscServiceName "Use generic-lens or generic-optics with 'serviceName' instead." #-}

instance Lude.AWSRequest CreateServiceSpecificCredential where
  type
    Rs CreateServiceSpecificCredential =
      CreateServiceSpecificCredentialResponse
  request = Req.postQuery iamService
  response =
    Res.receiveXMLWrapper
      "CreateServiceSpecificCredentialResult"
      ( \s h x ->
          CreateServiceSpecificCredentialResponse'
            Lude.<$> (x Lude..@? "ServiceSpecificCredential")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders CreateServiceSpecificCredential where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath CreateServiceSpecificCredential where
  toPath = Lude.const "/"

instance Lude.ToQuery CreateServiceSpecificCredential where
  toQuery CreateServiceSpecificCredential' {..} =
    Lude.mconcat
      [ "Action"
          Lude.=: ("CreateServiceSpecificCredential" :: Lude.ByteString),
        "Version" Lude.=: ("2010-05-08" :: Lude.ByteString),
        "UserName" Lude.=: userName,
        "ServiceName" Lude.=: serviceName
      ]

-- | /See:/ 'mkCreateServiceSpecificCredentialResponse' smart constructor.
data CreateServiceSpecificCredentialResponse = CreateServiceSpecificCredentialResponse'
  { -- | A structure that contains information about the newly created service-specific credential.
    --
    -- /Important:/ This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with 'ResetServiceSpecificCredential' .
    serviceSpecificCredential :: Lude.Maybe ServiceSpecificCredential,
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CreateServiceSpecificCredentialResponse' with the minimum fields required to make a request.
--
-- * 'serviceSpecificCredential' - A structure that contains information about the newly created service-specific credential.
--
-- /Important:/ This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with 'ResetServiceSpecificCredential' .
-- * 'responseStatus' - The response status code.
mkCreateServiceSpecificCredentialResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  CreateServiceSpecificCredentialResponse
mkCreateServiceSpecificCredentialResponse pResponseStatus_ =
  CreateServiceSpecificCredentialResponse'
    { serviceSpecificCredential =
        Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | A structure that contains information about the newly created service-specific credential.
--
-- /Important:/ This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with 'ResetServiceSpecificCredential' .
--
-- /Note:/ Consider using 'serviceSpecificCredential' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csscrsServiceSpecificCredential :: Lens.Lens' CreateServiceSpecificCredentialResponse (Lude.Maybe ServiceSpecificCredential)
csscrsServiceSpecificCredential = Lens.lens (serviceSpecificCredential :: CreateServiceSpecificCredentialResponse -> Lude.Maybe ServiceSpecificCredential) (\s a -> s {serviceSpecificCredential = a} :: CreateServiceSpecificCredentialResponse)
{-# DEPRECATED csscrsServiceSpecificCredential "Use generic-lens or generic-optics with 'serviceSpecificCredential' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csscrsResponseStatus :: Lens.Lens' CreateServiceSpecificCredentialResponse Lude.Int
csscrsResponseStatus = Lens.lens (responseStatus :: CreateServiceSpecificCredentialResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: CreateServiceSpecificCredentialResponse)
{-# DEPRECATED csscrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
