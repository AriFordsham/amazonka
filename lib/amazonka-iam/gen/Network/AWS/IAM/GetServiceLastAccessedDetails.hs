{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.GetServiceLastAccessedDetails
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Retrieves a service last accessed report that was created using the @GenerateServiceLastAccessedDetails@ operation. You can use the @JobId@ parameter in @GetServiceLastAccessedDetails@ to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.
--
-- For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the @GetServiceLastAccessedDetails@ operation returns the reason that it failed.
-- The @GetServiceLastAccessedDetails@ operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:
--
--     * __User__ – Returns the user ARN that you used to generate the report
--
--
--     * __Group__ – Returns the ARN of the group member (user) that last attempted to access the service
--
--
--     * __Role__ – Returns the role ARN that you used to generate the report
--
--
--     * __Policy__ – Returns the ARN of the user or role that last used the policy to attempt to access the service
--
--
-- By default, the list is sorted by service namespace.
-- If you specified @ACTION_LEVEL@ granularity when you generated the report, this operation returns service and action last accessed data. This includes the most recent access attempt for each tracked action within a service. Otherwise, this operation returns only service data.
-- For more information about service and action last accessed data, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html Reducing Permissions Using Service Last Accessed Data> in the /IAM User Guide/ .
module Network.AWS.IAM.GetServiceLastAccessedDetails
    (
    -- * Creating a request
      GetServiceLastAccessedDetails (..)
    , mkGetServiceLastAccessedDetails
    -- ** Request lenses
    , gsladJobId
    , gsladMarker
    , gsladMaxItems

    -- * Destructuring the response
    , GetServiceLastAccessedDetailsResponse (..)
    , mkGetServiceLastAccessedDetailsResponse
    -- ** Response lenses
    , gsladrrsJobStatus
    , gsladrrsJobCreationDate
    , gsladrrsServicesLastAccessed
    , gsladrrsJobCompletionDate
    , gsladrrsError
    , gsladrrsIsTruncated
    , gsladrrsJobType
    , gsladrrsMarker
    , gsladrrsResponseStatus
    ) where

import qualified Network.AWS.IAM.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkGetServiceLastAccessedDetails' smart constructor.
data GetServiceLastAccessedDetails = GetServiceLastAccessedDetails'
  { jobId :: Types.JobId
    -- ^ The ID of the request generated by the 'GenerateServiceLastAccessedDetails' operation. The @JobId@ returned by @GenerateServiceLastAccessedDetail@ must be used by the same role within a session, or by the same user when used to call @GetServiceLastAccessedDetail@ .
  , marker :: Core.Maybe Types.MarkerType
    -- ^ Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
  , maxItems :: Core.Maybe Core.Natural
    -- ^ Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'GetServiceLastAccessedDetails' value with any optional fields omitted.
mkGetServiceLastAccessedDetails
    :: Types.JobId -- ^ 'jobId'
    -> GetServiceLastAccessedDetails
mkGetServiceLastAccessedDetails jobId
  = GetServiceLastAccessedDetails'{jobId, marker = Core.Nothing,
                                   maxItems = Core.Nothing}

-- | The ID of the request generated by the 'GenerateServiceLastAccessedDetails' operation. The @JobId@ returned by @GenerateServiceLastAccessedDetail@ must be used by the same role within a session, or by the same user when used to call @GetServiceLastAccessedDetail@ .
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladJobId :: Lens.Lens' GetServiceLastAccessedDetails Types.JobId
gsladJobId = Lens.field @"jobId"
{-# INLINEABLE gsladJobId #-}
{-# DEPRECATED jobId "Use generic-lens or generic-optics with 'jobId' instead"  #-}

-- | Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladMarker :: Lens.Lens' GetServiceLastAccessedDetails (Core.Maybe Types.MarkerType)
gsladMarker = Lens.field @"marker"
{-# INLINEABLE gsladMarker #-}
{-# DEPRECATED marker "Use generic-lens or generic-optics with 'marker' instead"  #-}

-- | Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
--
-- /Note:/ Consider using 'maxItems' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladMaxItems :: Lens.Lens' GetServiceLastAccessedDetails (Core.Maybe Core.Natural)
gsladMaxItems = Lens.field @"maxItems"
{-# INLINEABLE gsladMaxItems #-}
{-# DEPRECATED maxItems "Use generic-lens or generic-optics with 'maxItems' instead"  #-}

instance Core.ToQuery GetServiceLastAccessedDetails where
        toQuery GetServiceLastAccessedDetails{..}
          = Core.toQueryPair "Action"
              ("GetServiceLastAccessedDetails" :: Core.Text)
              Core.<> Core.toQueryPair "Version" ("2010-05-08" :: Core.Text)
              Core.<> Core.toQueryPair "JobId" jobId
              Core.<> Core.maybe Core.mempty (Core.toQueryPair "Marker") marker
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "MaxItems") maxItems

instance Core.ToHeaders GetServiceLastAccessedDetails where
        toHeaders _ = Core.pure Core.mempty

instance Core.AWSRequest GetServiceLastAccessedDetails where
        type Rs GetServiceLastAccessedDetails =
             GetServiceLastAccessedDetailsResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.mempty,
                         Core._rqHeaders =
                           Core.pure
                             ("Content-Type",
                              "application/x-www-form-urlencoded; charset=utf-8")
                             Core.<> Core.toHeaders x,
                         Core._rqBody = Core.toFormBody (Core.toQuery x)}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveXMLWrapper "GetServiceLastAccessedDetailsResult"
              (\ s h x ->
                 GetServiceLastAccessedDetailsResponse' Core.<$>
                   (x Core..@ "JobStatus") Core.<*> x Core..@ "JobCreationDate"
                     Core.<*>
                     x Core..@ "ServicesLastAccessed" Core..@! Core.mempty Core..<@>
                       Core.parseXMLList "member"
                     Core.<*> x Core..@ "JobCompletionDate"
                     Core.<*> x Core..@? "Error"
                     Core.<*> x Core..@? "IsTruncated"
                     Core.<*> x Core..@? "JobType"
                     Core.<*> x Core..@? "Marker"
                     Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkGetServiceLastAccessedDetailsResponse' smart constructor.
data GetServiceLastAccessedDetailsResponse = GetServiceLastAccessedDetailsResponse'
  { jobStatus :: Types.JobStatusType
    -- ^ The status of the job.
  , jobCreationDate :: Core.UTCTime
    -- ^ The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
  , servicesLastAccessed :: [Types.ServiceLastAccessed]
    -- ^ A @ServiceLastAccessed@ object that contains details about the most recent attempt to access the service.
  , jobCompletionDate :: Core.UTCTime
    -- ^ The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
  , error :: Core.Maybe Types.ErrorDetails
    -- ^ An object that contains details about the reason the operation failed.
  , isTruncated :: Core.Maybe Core.Bool
    -- ^ A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
  , jobType :: Core.Maybe Types.AccessAdvisorUsageGranularityType
    -- ^ The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.
  , marker :: Core.Maybe Types.Marker
    -- ^ When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'GetServiceLastAccessedDetailsResponse' value with any optional fields omitted.
mkGetServiceLastAccessedDetailsResponse
    :: Types.JobStatusType -- ^ 'jobStatus'
    -> Core.UTCTime -- ^ 'jobCreationDate'
    -> Core.UTCTime -- ^ 'jobCompletionDate'
    -> Core.Int -- ^ 'responseStatus'
    -> GetServiceLastAccessedDetailsResponse
mkGetServiceLastAccessedDetailsResponse jobStatus jobCreationDate
  jobCompletionDate responseStatus
  = GetServiceLastAccessedDetailsResponse'{jobStatus,
                                           jobCreationDate, servicesLastAccessed = Core.mempty,
                                           jobCompletionDate, error = Core.Nothing,
                                           isTruncated = Core.Nothing, jobType = Core.Nothing,
                                           marker = Core.Nothing, responseStatus}

-- | The status of the job.
--
-- /Note:/ Consider using 'jobStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsJobStatus :: Lens.Lens' GetServiceLastAccessedDetailsResponse Types.JobStatusType
gsladrrsJobStatus = Lens.field @"jobStatus"
{-# INLINEABLE gsladrrsJobStatus #-}
{-# DEPRECATED jobStatus "Use generic-lens or generic-optics with 'jobStatus' instead"  #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
--
-- /Note:/ Consider using 'jobCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsJobCreationDate :: Lens.Lens' GetServiceLastAccessedDetailsResponse Core.UTCTime
gsladrrsJobCreationDate = Lens.field @"jobCreationDate"
{-# INLINEABLE gsladrrsJobCreationDate #-}
{-# DEPRECATED jobCreationDate "Use generic-lens or generic-optics with 'jobCreationDate' instead"  #-}

-- | A @ServiceLastAccessed@ object that contains details about the most recent attempt to access the service.
--
-- /Note:/ Consider using 'servicesLastAccessed' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsServicesLastAccessed :: Lens.Lens' GetServiceLastAccessedDetailsResponse [Types.ServiceLastAccessed]
gsladrrsServicesLastAccessed = Lens.field @"servicesLastAccessed"
{-# INLINEABLE gsladrrsServicesLastAccessed #-}
{-# DEPRECATED servicesLastAccessed "Use generic-lens or generic-optics with 'servicesLastAccessed' instead"  #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
--
-- /Note:/ Consider using 'jobCompletionDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsJobCompletionDate :: Lens.Lens' GetServiceLastAccessedDetailsResponse Core.UTCTime
gsladrrsJobCompletionDate = Lens.field @"jobCompletionDate"
{-# INLINEABLE gsladrrsJobCompletionDate #-}
{-# DEPRECATED jobCompletionDate "Use generic-lens or generic-optics with 'jobCompletionDate' instead"  #-}

-- | An object that contains details about the reason the operation failed.
--
-- /Note:/ Consider using 'error' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsError :: Lens.Lens' GetServiceLastAccessedDetailsResponse (Core.Maybe Types.ErrorDetails)
gsladrrsError = Lens.field @"error"
{-# INLINEABLE gsladrrsError #-}
{-# DEPRECATED error "Use generic-lens or generic-optics with 'error' instead"  #-}

-- | A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
--
-- /Note:/ Consider using 'isTruncated' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsIsTruncated :: Lens.Lens' GetServiceLastAccessedDetailsResponse (Core.Maybe Core.Bool)
gsladrrsIsTruncated = Lens.field @"isTruncated"
{-# INLINEABLE gsladrrsIsTruncated #-}
{-# DEPRECATED isTruncated "Use generic-lens or generic-optics with 'isTruncated' instead"  #-}

-- | The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.
--
-- /Note:/ Consider using 'jobType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsJobType :: Lens.Lens' GetServiceLastAccessedDetailsResponse (Core.Maybe Types.AccessAdvisorUsageGranularityType)
gsladrrsJobType = Lens.field @"jobType"
{-# INLINEABLE gsladrrsJobType #-}
{-# DEPRECATED jobType "Use generic-lens or generic-optics with 'jobType' instead"  #-}

-- | When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsMarker :: Lens.Lens' GetServiceLastAccessedDetailsResponse (Core.Maybe Types.Marker)
gsladrrsMarker = Lens.field @"marker"
{-# INLINEABLE gsladrrsMarker #-}
{-# DEPRECATED marker "Use generic-lens or generic-optics with 'marker' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrrsResponseStatus :: Lens.Lens' GetServiceLastAccessedDetailsResponse Core.Int
gsladrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE gsladrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
