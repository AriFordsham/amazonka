{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.GetServiceLastAccessedDetails
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Retrieves a service last accessed report that was created using the @GenerateServiceLastAccessedDetails@ operation. You can use the @JobId@ parameter in @GetServiceLastAccessedDetails@ to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.
--
-- For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the @GetServiceLastAccessedDetails@ operation returns the reason that it failed.
-- The @GetServiceLastAccessedDetails@ operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:
--
--     * __User__ – Returns the user ARN that you used to generate the report
--
--
--     * __Group__ – Returns the ARN of the group member (user) that last attempted to access the service
--
--
--     * __Role__ – Returns the role ARN that you used to generate the report
--
--
--     * __Policy__ – Returns the ARN of the user or role that last used the policy to attempt to access the service
--
--
-- By default, the list is sorted by service namespace.
-- If you specified @ACTION_LEVEL@ granularity when you generated the report, this operation returns service and action last accessed data. This includes the most recent access attempt for each tracked action within a service. Otherwise, this operation returns only service data.
-- For more information about service and action last accessed data, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html Reducing Permissions Using Service Last Accessed Data> in the /IAM User Guide/ .
module Network.AWS.IAM.GetServiceLastAccessedDetails
  ( -- * Creating a request
    GetServiceLastAccessedDetails (..),
    mkGetServiceLastAccessedDetails,

    -- ** Request lenses
    gsladMarker,
    gsladMaxItems,
    gsladJobId,

    -- * Destructuring the response
    GetServiceLastAccessedDetailsResponse (..),
    mkGetServiceLastAccessedDetailsResponse,

    -- ** Response lenses
    gsladrsJobType,
    gsladrsError,
    gsladrsMarker,
    gsladrsIsTruncated,
    gsladrsResponseStatus,
    gsladrsJobStatus,
    gsladrsJobCreationDate,
    gsladrsServicesLastAccessed,
    gsladrsJobCompletionDate,
  )
where

import Network.AWS.IAM.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkGetServiceLastAccessedDetails' smart constructor.
data GetServiceLastAccessedDetails = GetServiceLastAccessedDetails'
  { marker ::
      Lude.Maybe Lude.Text,
    maxItems ::
      Lude.Maybe Lude.Natural,
    jobId :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'GetServiceLastAccessedDetails' with the minimum fields required to make a request.
--
-- * 'jobId' - The ID of the request generated by the 'GenerateServiceLastAccessedDetails' operation. The @JobId@ returned by @GenerateServiceLastAccessedDetail@ must be used by the same role within a session, or by the same user when used to call @GetServiceLastAccessedDetail@ .
-- * 'marker' - Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
-- * 'maxItems' - Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
mkGetServiceLastAccessedDetails ::
  -- | 'jobId'
  Lude.Text ->
  GetServiceLastAccessedDetails
mkGetServiceLastAccessedDetails pJobId_ =
  GetServiceLastAccessedDetails'
    { marker = Lude.Nothing,
      maxItems = Lude.Nothing,
      jobId = pJobId_
    }

-- | Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladMarker :: Lens.Lens' GetServiceLastAccessedDetails (Lude.Maybe Lude.Text)
gsladMarker = Lens.lens (marker :: GetServiceLastAccessedDetails -> Lude.Maybe Lude.Text) (\s a -> s {marker = a} :: GetServiceLastAccessedDetails)
{-# DEPRECATED gsladMarker "Use generic-lens or generic-optics with 'marker' instead." #-}

-- | Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
--
-- /Note:/ Consider using 'maxItems' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladMaxItems :: Lens.Lens' GetServiceLastAccessedDetails (Lude.Maybe Lude.Natural)
gsladMaxItems = Lens.lens (maxItems :: GetServiceLastAccessedDetails -> Lude.Maybe Lude.Natural) (\s a -> s {maxItems = a} :: GetServiceLastAccessedDetails)
{-# DEPRECATED gsladMaxItems "Use generic-lens or generic-optics with 'maxItems' instead." #-}

-- | The ID of the request generated by the 'GenerateServiceLastAccessedDetails' operation. The @JobId@ returned by @GenerateServiceLastAccessedDetail@ must be used by the same role within a session, or by the same user when used to call @GetServiceLastAccessedDetail@ .
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladJobId :: Lens.Lens' GetServiceLastAccessedDetails Lude.Text
gsladJobId = Lens.lens (jobId :: GetServiceLastAccessedDetails -> Lude.Text) (\s a -> s {jobId = a} :: GetServiceLastAccessedDetails)
{-# DEPRECATED gsladJobId "Use generic-lens or generic-optics with 'jobId' instead." #-}

instance Lude.AWSRequest GetServiceLastAccessedDetails where
  type
    Rs GetServiceLastAccessedDetails =
      GetServiceLastAccessedDetailsResponse
  request = Req.postQuery iamService
  response =
    Res.receiveXMLWrapper
      "GetServiceLastAccessedDetailsResult"
      ( \s h x ->
          GetServiceLastAccessedDetailsResponse'
            Lude.<$> (x Lude..@? "JobType")
            Lude.<*> (x Lude..@? "Error")
            Lude.<*> (x Lude..@? "Marker")
            Lude.<*> (x Lude..@? "IsTruncated")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
            Lude.<*> (x Lude..@ "JobStatus")
            Lude.<*> (x Lude..@ "JobCreationDate")
            Lude.<*> ( x Lude..@? "ServicesLastAccessed" Lude..!@ Lude.mempty
                         Lude.>>= Lude.parseXMLList "member"
                     )
            Lude.<*> (x Lude..@ "JobCompletionDate")
      )

instance Lude.ToHeaders GetServiceLastAccessedDetails where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath GetServiceLastAccessedDetails where
  toPath = Lude.const "/"

instance Lude.ToQuery GetServiceLastAccessedDetails where
  toQuery GetServiceLastAccessedDetails' {..} =
    Lude.mconcat
      [ "Action"
          Lude.=: ("GetServiceLastAccessedDetails" :: Lude.ByteString),
        "Version" Lude.=: ("2010-05-08" :: Lude.ByteString),
        "Marker" Lude.=: marker,
        "MaxItems" Lude.=: maxItems,
        "JobId" Lude.=: jobId
      ]

-- | /See:/ 'mkGetServiceLastAccessedDetailsResponse' smart constructor.
data GetServiceLastAccessedDetailsResponse = GetServiceLastAccessedDetailsResponse'
  { jobType ::
      Lude.Maybe
        AccessAdvisorUsageGranularityType,
    error ::
      Lude.Maybe
        ErrorDetails,
    marker ::
      Lude.Maybe
        Lude.Text,
    isTruncated ::
      Lude.Maybe
        Lude.Bool,
    responseStatus ::
      Lude.Int,
    jobStatus ::
      JobStatusType,
    jobCreationDate ::
      Lude.DateTime,
    servicesLastAccessed ::
      [ServiceLastAccessed],
    jobCompletionDate ::
      Lude.DateTime
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'GetServiceLastAccessedDetailsResponse' with the minimum fields required to make a request.
--
-- * 'error' - An object that contains details about the reason the operation failed.
-- * 'isTruncated' - A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
-- * 'jobCompletionDate' - The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
-- * 'jobCreationDate' - The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
-- * 'jobStatus' - The status of the job.
-- * 'jobType' - The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.
-- * 'marker' - When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
-- * 'responseStatus' - The response status code.
-- * 'servicesLastAccessed' - A @ServiceLastAccessed@ object that contains details about the most recent attempt to access the service.
mkGetServiceLastAccessedDetailsResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  -- | 'jobStatus'
  JobStatusType ->
  -- | 'jobCreationDate'
  Lude.DateTime ->
  -- | 'jobCompletionDate'
  Lude.DateTime ->
  GetServiceLastAccessedDetailsResponse
mkGetServiceLastAccessedDetailsResponse
  pResponseStatus_
  pJobStatus_
  pJobCreationDate_
  pJobCompletionDate_ =
    GetServiceLastAccessedDetailsResponse'
      { jobType = Lude.Nothing,
        error = Lude.Nothing,
        marker = Lude.Nothing,
        isTruncated = Lude.Nothing,
        responseStatus = pResponseStatus_,
        jobStatus = pJobStatus_,
        jobCreationDate = pJobCreationDate_,
        servicesLastAccessed = Lude.mempty,
        jobCompletionDate = pJobCompletionDate_
      }

-- | The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.
--
-- /Note:/ Consider using 'jobType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsJobType :: Lens.Lens' GetServiceLastAccessedDetailsResponse (Lude.Maybe AccessAdvisorUsageGranularityType)
gsladrsJobType = Lens.lens (jobType :: GetServiceLastAccessedDetailsResponse -> Lude.Maybe AccessAdvisorUsageGranularityType) (\s a -> s {jobType = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsJobType "Use generic-lens or generic-optics with 'jobType' instead." #-}

-- | An object that contains details about the reason the operation failed.
--
-- /Note:/ Consider using 'error' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsError :: Lens.Lens' GetServiceLastAccessedDetailsResponse (Lude.Maybe ErrorDetails)
gsladrsError = Lens.lens (error :: GetServiceLastAccessedDetailsResponse -> Lude.Maybe ErrorDetails) (\s a -> s {error = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsError "Use generic-lens or generic-optics with 'error' instead." #-}

-- | When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsMarker :: Lens.Lens' GetServiceLastAccessedDetailsResponse (Lude.Maybe Lude.Text)
gsladrsMarker = Lens.lens (marker :: GetServiceLastAccessedDetailsResponse -> Lude.Maybe Lude.Text) (\s a -> s {marker = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsMarker "Use generic-lens or generic-optics with 'marker' instead." #-}

-- | A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
--
-- /Note:/ Consider using 'isTruncated' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsIsTruncated :: Lens.Lens' GetServiceLastAccessedDetailsResponse (Lude.Maybe Lude.Bool)
gsladrsIsTruncated = Lens.lens (isTruncated :: GetServiceLastAccessedDetailsResponse -> Lude.Maybe Lude.Bool) (\s a -> s {isTruncated = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsIsTruncated "Use generic-lens or generic-optics with 'isTruncated' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsResponseStatus :: Lens.Lens' GetServiceLastAccessedDetailsResponse Lude.Int
gsladrsResponseStatus = Lens.lens (responseStatus :: GetServiceLastAccessedDetailsResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}

-- | The status of the job.
--
-- /Note:/ Consider using 'jobStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsJobStatus :: Lens.Lens' GetServiceLastAccessedDetailsResponse JobStatusType
gsladrsJobStatus = Lens.lens (jobStatus :: GetServiceLastAccessedDetailsResponse -> JobStatusType) (\s a -> s {jobStatus = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsJobStatus "Use generic-lens or generic-optics with 'jobStatus' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
--
-- /Note:/ Consider using 'jobCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsJobCreationDate :: Lens.Lens' GetServiceLastAccessedDetailsResponse Lude.DateTime
gsladrsJobCreationDate = Lens.lens (jobCreationDate :: GetServiceLastAccessedDetailsResponse -> Lude.DateTime) (\s a -> s {jobCreationDate = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsJobCreationDate "Use generic-lens or generic-optics with 'jobCreationDate' instead." #-}

-- | A @ServiceLastAccessed@ object that contains details about the most recent attempt to access the service.
--
-- /Note:/ Consider using 'servicesLastAccessed' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsServicesLastAccessed :: Lens.Lens' GetServiceLastAccessedDetailsResponse [ServiceLastAccessed]
gsladrsServicesLastAccessed = Lens.lens (servicesLastAccessed :: GetServiceLastAccessedDetailsResponse -> [ServiceLastAccessed]) (\s a -> s {servicesLastAccessed = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsServicesLastAccessed "Use generic-lens or generic-optics with 'servicesLastAccessed' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
--
-- /Note:/ Consider using 'jobCompletionDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladrsJobCompletionDate :: Lens.Lens' GetServiceLastAccessedDetailsResponse Lude.DateTime
gsladrsJobCompletionDate = Lens.lens (jobCompletionDate :: GetServiceLastAccessedDetailsResponse -> Lude.DateTime) (\s a -> s {jobCompletionDate = a} :: GetServiceLastAccessedDetailsResponse)
{-# DEPRECATED gsladrsJobCompletionDate "Use generic-lens or generic-optics with 'jobCompletionDate' instead." #-}
