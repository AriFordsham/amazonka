{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.GetServiceLastAccessedDetailsWithEntities
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- After you generate a group or policy report using the @GenerateServiceLastAccessedDetails@ operation, you can use the @JobId@ parameter in @GetServiceLastAccessedDetailsWithEntities@ . This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.
--
--
--     * __Group__ – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.
--
--
--     * __Policy__ – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.
--
--
-- You can also use this operation for user or role reports to retrieve details about those entities.
-- If the operation fails, the @GetServiceLastAccessedDetailsWithEntities@ operation returns the reason that it failed.
-- By default, the list of associated entities is sorted by date, with the most recent access listed first.
module Network.AWS.IAM.GetServiceLastAccessedDetailsWithEntities
    (
    -- * Creating a request
      GetServiceLastAccessedDetailsWithEntities (..)
    , mkGetServiceLastAccessedDetailsWithEntities
    -- ** Request lenses
    , gsladweJobId
    , gsladweServiceNamespace
    , gsladweMarker
    , gsladweMaxItems

    -- * Destructuring the response
    , GetServiceLastAccessedDetailsWithEntitiesResponse (..)
    , mkGetServiceLastAccessedDetailsWithEntitiesResponse
    -- ** Response lenses
    , gsladwerrsJobStatus
    , gsladwerrsJobCreationDate
    , gsladwerrsJobCompletionDate
    , gsladwerrsEntityDetailsList
    , gsladwerrsError
    , gsladwerrsIsTruncated
    , gsladwerrsMarker
    , gsladwerrsResponseStatus
    ) where

import qualified Network.AWS.IAM.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkGetServiceLastAccessedDetailsWithEntities' smart constructor.
data GetServiceLastAccessedDetailsWithEntities = GetServiceLastAccessedDetailsWithEntities'
  { jobId :: Types.JobId
    -- ^ The ID of the request generated by the @GenerateServiceLastAccessedDetails@ operation.
  , serviceNamespace :: Types.ServiceNamespace
    -- ^ The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.
--
-- To learn the service namespace for a service, go to <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html Actions, Resources, and Condition Keys for AWS Services> in the /IAM User Guide/ . Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, @(service prefix: a4b)@ . For more information about service namespaces, see <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces AWS Service Namespaces> in the /AWS General Reference/ .
  , marker :: Core.Maybe Types.MarkerType
    -- ^ Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
  , maxItems :: Core.Maybe Core.Natural
    -- ^ Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'GetServiceLastAccessedDetailsWithEntities' value with any optional fields omitted.
mkGetServiceLastAccessedDetailsWithEntities
    :: Types.JobId -- ^ 'jobId'
    -> Types.ServiceNamespace -- ^ 'serviceNamespace'
    -> GetServiceLastAccessedDetailsWithEntities
mkGetServiceLastAccessedDetailsWithEntities jobId serviceNamespace
  = GetServiceLastAccessedDetailsWithEntities'{jobId,
                                               serviceNamespace, marker = Core.Nothing,
                                               maxItems = Core.Nothing}

-- | The ID of the request generated by the @GenerateServiceLastAccessedDetails@ operation.
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladweJobId :: Lens.Lens' GetServiceLastAccessedDetailsWithEntities Types.JobId
gsladweJobId = Lens.field @"jobId"
{-# INLINEABLE gsladweJobId #-}
{-# DEPRECATED jobId "Use generic-lens or generic-optics with 'jobId' instead"  #-}

-- | The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.
--
-- To learn the service namespace for a service, go to <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html Actions, Resources, and Condition Keys for AWS Services> in the /IAM User Guide/ . Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, @(service prefix: a4b)@ . For more information about service namespaces, see <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces AWS Service Namespaces> in the /AWS General Reference/ .
--
-- /Note:/ Consider using 'serviceNamespace' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladweServiceNamespace :: Lens.Lens' GetServiceLastAccessedDetailsWithEntities Types.ServiceNamespace
gsladweServiceNamespace = Lens.field @"serviceNamespace"
{-# INLINEABLE gsladweServiceNamespace #-}
{-# DEPRECATED serviceNamespace "Use generic-lens or generic-optics with 'serviceNamespace' instead"  #-}

-- | Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladweMarker :: Lens.Lens' GetServiceLastAccessedDetailsWithEntities (Core.Maybe Types.MarkerType)
gsladweMarker = Lens.field @"marker"
{-# INLINEABLE gsladweMarker #-}
{-# DEPRECATED marker "Use generic-lens or generic-optics with 'marker' instead"  #-}

-- | Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
--
-- /Note:/ Consider using 'maxItems' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladweMaxItems :: Lens.Lens' GetServiceLastAccessedDetailsWithEntities (Core.Maybe Core.Natural)
gsladweMaxItems = Lens.field @"maxItems"
{-# INLINEABLE gsladweMaxItems #-}
{-# DEPRECATED maxItems "Use generic-lens or generic-optics with 'maxItems' instead"  #-}

instance Core.ToQuery GetServiceLastAccessedDetailsWithEntities
         where
        toQuery GetServiceLastAccessedDetailsWithEntities{..}
          = Core.toQueryPair "Action"
              ("GetServiceLastAccessedDetailsWithEntities" :: Core.Text)
              Core.<> Core.toQueryPair "Version" ("2010-05-08" :: Core.Text)
              Core.<> Core.toQueryPair "JobId" jobId
              Core.<> Core.toQueryPair "ServiceNamespace" serviceNamespace
              Core.<> Core.maybe Core.mempty (Core.toQueryPair "Marker") marker
              Core.<>
              Core.maybe Core.mempty (Core.toQueryPair "MaxItems") maxItems

instance Core.ToHeaders GetServiceLastAccessedDetailsWithEntities
         where
        toHeaders _ = Core.pure Core.mempty

instance Core.AWSRequest GetServiceLastAccessedDetailsWithEntities
         where
        type Rs GetServiceLastAccessedDetailsWithEntities =
             GetServiceLastAccessedDetailsWithEntitiesResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.mempty,
                         Core._rqHeaders =
                           Core.pure
                             ("Content-Type",
                              "application/x-www-form-urlencoded; charset=utf-8")
                             Core.<> Core.toHeaders x,
                         Core._rqBody = Core.toFormBody (Core.toQuery x)}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveXMLWrapper
              "GetServiceLastAccessedDetailsWithEntitiesResult"
              (\ s h x ->
                 GetServiceLastAccessedDetailsWithEntitiesResponse' Core.<$>
                   (x Core..@ "JobStatus") Core.<*> x Core..@ "JobCreationDate"
                     Core.<*> x Core..@ "JobCompletionDate"
                     Core.<*>
                     x Core..@ "EntityDetailsList" Core..@! Core.mempty Core..<@>
                       Core.parseXMLList "member"
                     Core.<*> x Core..@? "Error"
                     Core.<*> x Core..@? "IsTruncated"
                     Core.<*> x Core..@? "Marker"
                     Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkGetServiceLastAccessedDetailsWithEntitiesResponse' smart constructor.
data GetServiceLastAccessedDetailsWithEntitiesResponse = GetServiceLastAccessedDetailsWithEntitiesResponse'
  { jobStatus :: Types.JobStatusType
    -- ^ The status of the job.
  , jobCreationDate :: Core.UTCTime
    -- ^ The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
  , jobCompletionDate :: Core.UTCTime
    -- ^ The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
  , entityDetailsList :: [Types.EntityDetails]
    -- ^ An @EntityDetailsList@ object that contains details about when an IAM entity (user or role) used group or policy permissions in an attempt to access the specified AWS service.
  , error :: Core.Maybe Types.ErrorDetails
    -- ^ An object that contains details about the reason the operation failed.
  , isTruncated :: Core.Maybe Core.Bool
    -- ^ A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
  , marker :: Core.Maybe Types.Marker
    -- ^ When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'GetServiceLastAccessedDetailsWithEntitiesResponse' value with any optional fields omitted.
mkGetServiceLastAccessedDetailsWithEntitiesResponse
    :: Types.JobStatusType -- ^ 'jobStatus'
    -> Core.UTCTime -- ^ 'jobCreationDate'
    -> Core.UTCTime -- ^ 'jobCompletionDate'
    -> Core.Int -- ^ 'responseStatus'
    -> GetServiceLastAccessedDetailsWithEntitiesResponse
mkGetServiceLastAccessedDetailsWithEntitiesResponse jobStatus
  jobCreationDate jobCompletionDate responseStatus
  = GetServiceLastAccessedDetailsWithEntitiesResponse'{jobStatus,
                                                       jobCreationDate, jobCompletionDate,
                                                       entityDetailsList = Core.mempty,
                                                       error = Core.Nothing,
                                                       isTruncated = Core.Nothing,
                                                       marker = Core.Nothing, responseStatus}

-- | The status of the job.
--
-- /Note:/ Consider using 'jobStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwerrsJobStatus :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse Types.JobStatusType
gsladwerrsJobStatus = Lens.field @"jobStatus"
{-# INLINEABLE gsladwerrsJobStatus #-}
{-# DEPRECATED jobStatus "Use generic-lens or generic-optics with 'jobStatus' instead"  #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
--
-- /Note:/ Consider using 'jobCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwerrsJobCreationDate :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse Core.UTCTime
gsladwerrsJobCreationDate = Lens.field @"jobCreationDate"
{-# INLINEABLE gsladwerrsJobCreationDate #-}
{-# DEPRECATED jobCreationDate "Use generic-lens or generic-optics with 'jobCreationDate' instead"  #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
--
-- /Note:/ Consider using 'jobCompletionDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwerrsJobCompletionDate :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse Core.UTCTime
gsladwerrsJobCompletionDate = Lens.field @"jobCompletionDate"
{-# INLINEABLE gsladwerrsJobCompletionDate #-}
{-# DEPRECATED jobCompletionDate "Use generic-lens or generic-optics with 'jobCompletionDate' instead"  #-}

-- | An @EntityDetailsList@ object that contains details about when an IAM entity (user or role) used group or policy permissions in an attempt to access the specified AWS service.
--
-- /Note:/ Consider using 'entityDetailsList' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwerrsEntityDetailsList :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse [Types.EntityDetails]
gsladwerrsEntityDetailsList = Lens.field @"entityDetailsList"
{-# INLINEABLE gsladwerrsEntityDetailsList #-}
{-# DEPRECATED entityDetailsList "Use generic-lens or generic-optics with 'entityDetailsList' instead"  #-}

-- | An object that contains details about the reason the operation failed.
--
-- /Note:/ Consider using 'error' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwerrsError :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse (Core.Maybe Types.ErrorDetails)
gsladwerrsError = Lens.field @"error"
{-# INLINEABLE gsladwerrsError #-}
{-# DEPRECATED error "Use generic-lens or generic-optics with 'error' instead"  #-}

-- | A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
--
-- /Note:/ Consider using 'isTruncated' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwerrsIsTruncated :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse (Core.Maybe Core.Bool)
gsladwerrsIsTruncated = Lens.field @"isTruncated"
{-# INLINEABLE gsladwerrsIsTruncated #-}
{-# DEPRECATED isTruncated "Use generic-lens or generic-optics with 'isTruncated' instead"  #-}

-- | When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwerrsMarker :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse (Core.Maybe Types.Marker)
gsladwerrsMarker = Lens.field @"marker"
{-# INLINEABLE gsladwerrsMarker #-}
{-# DEPRECATED marker "Use generic-lens or generic-optics with 'marker' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwerrsResponseStatus :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse Core.Int
gsladwerrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE gsladwerrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
