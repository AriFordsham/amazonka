{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.GetServiceLastAccessedDetailsWithEntities
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- After you generate a group or policy report using the @GenerateServiceLastAccessedDetails@ operation, you can use the @JobId@ parameter in @GetServiceLastAccessedDetailsWithEntities@ . This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.
--
--
--     * __Group__ – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.
--
--
--     * __Policy__ – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.
--
--
-- You can also use this operation for user or role reports to retrieve details about those entities.
-- If the operation fails, the @GetServiceLastAccessedDetailsWithEntities@ operation returns the reason that it failed.
-- By default, the list of associated entities is sorted by date, with the most recent access listed first.
module Network.AWS.IAM.GetServiceLastAccessedDetailsWithEntities
  ( -- * Creating a request
    GetServiceLastAccessedDetailsWithEntities (..),
    mkGetServiceLastAccessedDetailsWithEntities,

    -- ** Request lenses
    gsladweMarker,
    gsladweMaxItems,
    gsladweJobId,
    gsladweServiceNamespace,

    -- * Destructuring the response
    GetServiceLastAccessedDetailsWithEntitiesResponse (..),
    mkGetServiceLastAccessedDetailsWithEntitiesResponse,

    -- ** Response lenses
    gsladwersError,
    gsladwersMarker,
    gsladwersIsTruncated,
    gsladwersResponseStatus,
    gsladwersJobStatus,
    gsladwersJobCreationDate,
    gsladwersJobCompletionDate,
    gsladwersEntityDetailsList,
  )
where

import Network.AWS.IAM.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkGetServiceLastAccessedDetailsWithEntities' smart constructor.
data GetServiceLastAccessedDetailsWithEntities = GetServiceLastAccessedDetailsWithEntities'
  { marker ::
      Lude.Maybe
        Lude.Text,
    maxItems ::
      Lude.Maybe
        Lude.Natural,
    jobId ::
      Lude.Text,
    serviceNamespace ::
      Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'GetServiceLastAccessedDetailsWithEntities' with the minimum fields required to make a request.
--
-- * 'jobId' - The ID of the request generated by the @GenerateServiceLastAccessedDetails@ operation.
-- * 'marker' - Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
-- * 'maxItems' - Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
-- * 'serviceNamespace' - The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.
--
-- To learn the service namespace for a service, go to <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html Actions, Resources, and Condition Keys for AWS Services> in the /IAM User Guide/ . Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, @(service prefix: a4b)@ . For more information about service namespaces, see <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces AWS Service Namespaces> in the /AWS General Reference/ .
mkGetServiceLastAccessedDetailsWithEntities ::
  -- | 'jobId'
  Lude.Text ->
  -- | 'serviceNamespace'
  Lude.Text ->
  GetServiceLastAccessedDetailsWithEntities
mkGetServiceLastAccessedDetailsWithEntities
  pJobId_
  pServiceNamespace_ =
    GetServiceLastAccessedDetailsWithEntities'
      { marker = Lude.Nothing,
        maxItems = Lude.Nothing,
        jobId = pJobId_,
        serviceNamespace = pServiceNamespace_
      }

-- | Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladweMarker :: Lens.Lens' GetServiceLastAccessedDetailsWithEntities (Lude.Maybe Lude.Text)
gsladweMarker = Lens.lens (marker :: GetServiceLastAccessedDetailsWithEntities -> Lude.Maybe Lude.Text) (\s a -> s {marker = a} :: GetServiceLastAccessedDetailsWithEntities)
{-# DEPRECATED gsladweMarker "Use generic-lens or generic-optics with 'marker' instead." #-}

-- | Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
--
-- /Note:/ Consider using 'maxItems' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladweMaxItems :: Lens.Lens' GetServiceLastAccessedDetailsWithEntities (Lude.Maybe Lude.Natural)
gsladweMaxItems = Lens.lens (maxItems :: GetServiceLastAccessedDetailsWithEntities -> Lude.Maybe Lude.Natural) (\s a -> s {maxItems = a} :: GetServiceLastAccessedDetailsWithEntities)
{-# DEPRECATED gsladweMaxItems "Use generic-lens or generic-optics with 'maxItems' instead." #-}

-- | The ID of the request generated by the @GenerateServiceLastAccessedDetails@ operation.
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladweJobId :: Lens.Lens' GetServiceLastAccessedDetailsWithEntities Lude.Text
gsladweJobId = Lens.lens (jobId :: GetServiceLastAccessedDetailsWithEntities -> Lude.Text) (\s a -> s {jobId = a} :: GetServiceLastAccessedDetailsWithEntities)
{-# DEPRECATED gsladweJobId "Use generic-lens or generic-optics with 'jobId' instead." #-}

-- | The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.
--
-- To learn the service namespace for a service, go to <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html Actions, Resources, and Condition Keys for AWS Services> in the /IAM User Guide/ . Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, @(service prefix: a4b)@ . For more information about service namespaces, see <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces AWS Service Namespaces> in the /AWS General Reference/ .
--
-- /Note:/ Consider using 'serviceNamespace' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladweServiceNamespace :: Lens.Lens' GetServiceLastAccessedDetailsWithEntities Lude.Text
gsladweServiceNamespace = Lens.lens (serviceNamespace :: GetServiceLastAccessedDetailsWithEntities -> Lude.Text) (\s a -> s {serviceNamespace = a} :: GetServiceLastAccessedDetailsWithEntities)
{-# DEPRECATED gsladweServiceNamespace "Use generic-lens or generic-optics with 'serviceNamespace' instead." #-}

instance Lude.AWSRequest GetServiceLastAccessedDetailsWithEntities where
  type
    Rs GetServiceLastAccessedDetailsWithEntities =
      GetServiceLastAccessedDetailsWithEntitiesResponse
  request = Req.postQuery iamService
  response =
    Res.receiveXMLWrapper
      "GetServiceLastAccessedDetailsWithEntitiesResult"
      ( \s h x ->
          GetServiceLastAccessedDetailsWithEntitiesResponse'
            Lude.<$> (x Lude..@? "Error")
            Lude.<*> (x Lude..@? "Marker")
            Lude.<*> (x Lude..@? "IsTruncated")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
            Lude.<*> (x Lude..@ "JobStatus")
            Lude.<*> (x Lude..@ "JobCreationDate")
            Lude.<*> (x Lude..@ "JobCompletionDate")
            Lude.<*> ( x Lude..@? "EntityDetailsList" Lude..!@ Lude.mempty
                         Lude.>>= Lude.parseXMLList "member"
                     )
      )

instance Lude.ToHeaders GetServiceLastAccessedDetailsWithEntities where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath GetServiceLastAccessedDetailsWithEntities where
  toPath = Lude.const "/"

instance Lude.ToQuery GetServiceLastAccessedDetailsWithEntities where
  toQuery GetServiceLastAccessedDetailsWithEntities' {..} =
    Lude.mconcat
      [ "Action"
          Lude.=: ("GetServiceLastAccessedDetailsWithEntities" :: Lude.ByteString),
        "Version" Lude.=: ("2010-05-08" :: Lude.ByteString),
        "Marker" Lude.=: marker,
        "MaxItems" Lude.=: maxItems,
        "JobId" Lude.=: jobId,
        "ServiceNamespace" Lude.=: serviceNamespace
      ]

-- | /See:/ 'mkGetServiceLastAccessedDetailsWithEntitiesResponse' smart constructor.
data GetServiceLastAccessedDetailsWithEntitiesResponse = GetServiceLastAccessedDetailsWithEntitiesResponse'
  { error ::
      Lude.Maybe
        ErrorDetails,
    marker ::
      Lude.Maybe
        Lude.Text,
    isTruncated ::
      Lude.Maybe
        Lude.Bool,
    responseStatus ::
      Lude.Int,
    jobStatus ::
      JobStatusType,
    jobCreationDate ::
      Lude.DateTime,
    jobCompletionDate ::
      Lude.DateTime,
    entityDetailsList ::
      [EntityDetails]
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass
    ( Lude.Hashable,
      Lude.NFData
    )

-- | Creates a value of 'GetServiceLastAccessedDetailsWithEntitiesResponse' with the minimum fields required to make a request.
--
-- * 'entityDetailsList' - An @EntityDetailsList@ object that contains details about when an IAM entity (user or role) used group or policy permissions in an attempt to access the specified AWS service.
-- * 'error' - An object that contains details about the reason the operation failed.
-- * 'isTruncated' - A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
-- * 'jobCompletionDate' - The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
-- * 'jobCreationDate' - The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
-- * 'jobStatus' - The status of the job.
-- * 'marker' - When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
-- * 'responseStatus' - The response status code.
mkGetServiceLastAccessedDetailsWithEntitiesResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  -- | 'jobStatus'
  JobStatusType ->
  -- | 'jobCreationDate'
  Lude.DateTime ->
  -- | 'jobCompletionDate'
  Lude.DateTime ->
  GetServiceLastAccessedDetailsWithEntitiesResponse
mkGetServiceLastAccessedDetailsWithEntitiesResponse
  pResponseStatus_
  pJobStatus_
  pJobCreationDate_
  pJobCompletionDate_ =
    GetServiceLastAccessedDetailsWithEntitiesResponse'
      { error =
          Lude.Nothing,
        marker = Lude.Nothing,
        isTruncated = Lude.Nothing,
        responseStatus = pResponseStatus_,
        jobStatus = pJobStatus_,
        jobCreationDate = pJobCreationDate_,
        jobCompletionDate = pJobCompletionDate_,
        entityDetailsList = Lude.mempty
      }

-- | An object that contains details about the reason the operation failed.
--
-- /Note:/ Consider using 'error' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwersError :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse (Lude.Maybe ErrorDetails)
gsladwersError = Lens.lens (error :: GetServiceLastAccessedDetailsWithEntitiesResponse -> Lude.Maybe ErrorDetails) (\s a -> s {error = a} :: GetServiceLastAccessedDetailsWithEntitiesResponse)
{-# DEPRECATED gsladwersError "Use generic-lens or generic-optics with 'error' instead." #-}

-- | When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwersMarker :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse (Lude.Maybe Lude.Text)
gsladwersMarker = Lens.lens (marker :: GetServiceLastAccessedDetailsWithEntitiesResponse -> Lude.Maybe Lude.Text) (\s a -> s {marker = a} :: GetServiceLastAccessedDetailsWithEntitiesResponse)
{-# DEPRECATED gsladwersMarker "Use generic-lens or generic-optics with 'marker' instead." #-}

-- | A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
--
-- /Note:/ Consider using 'isTruncated' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwersIsTruncated :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse (Lude.Maybe Lude.Bool)
gsladwersIsTruncated = Lens.lens (isTruncated :: GetServiceLastAccessedDetailsWithEntitiesResponse -> Lude.Maybe Lude.Bool) (\s a -> s {isTruncated = a} :: GetServiceLastAccessedDetailsWithEntitiesResponse)
{-# DEPRECATED gsladwersIsTruncated "Use generic-lens or generic-optics with 'isTruncated' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwersResponseStatus :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse Lude.Int
gsladwersResponseStatus = Lens.lens (responseStatus :: GetServiceLastAccessedDetailsWithEntitiesResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: GetServiceLastAccessedDetailsWithEntitiesResponse)
{-# DEPRECATED gsladwersResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}

-- | The status of the job.
--
-- /Note:/ Consider using 'jobStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwersJobStatus :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse JobStatusType
gsladwersJobStatus = Lens.lens (jobStatus :: GetServiceLastAccessedDetailsWithEntitiesResponse -> JobStatusType) (\s a -> s {jobStatus = a} :: GetServiceLastAccessedDetailsWithEntitiesResponse)
{-# DEPRECATED gsladwersJobStatus "Use generic-lens or generic-optics with 'jobStatus' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
--
-- /Note:/ Consider using 'jobCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwersJobCreationDate :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse Lude.DateTime
gsladwersJobCreationDate = Lens.lens (jobCreationDate :: GetServiceLastAccessedDetailsWithEntitiesResponse -> Lude.DateTime) (\s a -> s {jobCreationDate = a} :: GetServiceLastAccessedDetailsWithEntitiesResponse)
{-# DEPRECATED gsladwersJobCreationDate "Use generic-lens or generic-optics with 'jobCreationDate' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
--
-- /Note:/ Consider using 'jobCompletionDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwersJobCompletionDate :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse Lude.DateTime
gsladwersJobCompletionDate = Lens.lens (jobCompletionDate :: GetServiceLastAccessedDetailsWithEntitiesResponse -> Lude.DateTime) (\s a -> s {jobCompletionDate = a} :: GetServiceLastAccessedDetailsWithEntitiesResponse)
{-# DEPRECATED gsladwersJobCompletionDate "Use generic-lens or generic-optics with 'jobCompletionDate' instead." #-}

-- | An @EntityDetailsList@ object that contains details about when an IAM entity (user or role) used group or policy permissions in an attempt to access the specified AWS service.
--
-- /Note:/ Consider using 'entityDetailsList' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gsladwersEntityDetailsList :: Lens.Lens' GetServiceLastAccessedDetailsWithEntitiesResponse [EntityDetails]
gsladwersEntityDetailsList = Lens.lens (entityDetailsList :: GetServiceLastAccessedDetailsWithEntitiesResponse -> [EntityDetails]) (\s a -> s {entityDetailsList = a} :: GetServiceLastAccessedDetailsWithEntitiesResponse)
{-# DEPRECATED gsladwersEntityDetailsList "Use generic-lens or generic-optics with 'entityDetailsList' instead." #-}
