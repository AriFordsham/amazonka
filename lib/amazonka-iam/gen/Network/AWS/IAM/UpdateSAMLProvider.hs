{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.UpdateSAMLProvider
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Updates the metadata document for an existing SAML provider resource object.
module Network.AWS.IAM.UpdateSAMLProvider
    (
    -- * Creating a request
      UpdateSAMLProvider (..)
    , mkUpdateSAMLProvider
    -- ** Request lenses
    , usamlpSAMLMetadataDocument
    , usamlpSAMLProviderArn

    -- * Destructuring the response
    , UpdateSAMLProviderResponse (..)
    , mkUpdateSAMLProviderResponse
    -- ** Response lenses
    , usamlprrsSAMLProviderArn
    , usamlprrsResponseStatus
    ) where

import qualified Network.AWS.IAM.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkUpdateSAMLProvider' smart constructor.
data UpdateSAMLProvider = UpdateSAMLProvider'
  { sAMLMetadataDocument :: Types.SAMLMetadataDocumentType
    -- ^ An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  , sAMLProviderArn :: Types.SAMLProviderArn
    -- ^ The Amazon Resource Name (ARN) of the SAML provider to update.
--
-- For more information about ARNs, see <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html Amazon Resource Names (ARNs) and AWS Service Namespaces> in the /AWS General Reference/ .
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'UpdateSAMLProvider' value with any optional fields omitted.
mkUpdateSAMLProvider
    :: Types.SAMLMetadataDocumentType -- ^ 'sAMLMetadataDocument'
    -> Types.SAMLProviderArn -- ^ 'sAMLProviderArn'
    -> UpdateSAMLProvider
mkUpdateSAMLProvider sAMLMetadataDocument sAMLProviderArn
  = UpdateSAMLProvider'{sAMLMetadataDocument, sAMLProviderArn}

-- | An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
--
-- /Note:/ Consider using 'sAMLMetadataDocument' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
usamlpSAMLMetadataDocument :: Lens.Lens' UpdateSAMLProvider Types.SAMLMetadataDocumentType
usamlpSAMLMetadataDocument = Lens.field @"sAMLMetadataDocument"
{-# INLINEABLE usamlpSAMLMetadataDocument #-}
{-# DEPRECATED sAMLMetadataDocument "Use generic-lens or generic-optics with 'sAMLMetadataDocument' instead"  #-}

-- | The Amazon Resource Name (ARN) of the SAML provider to update.
--
-- For more information about ARNs, see <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html Amazon Resource Names (ARNs) and AWS Service Namespaces> in the /AWS General Reference/ .
--
-- /Note:/ Consider using 'sAMLProviderArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
usamlpSAMLProviderArn :: Lens.Lens' UpdateSAMLProvider Types.SAMLProviderArn
usamlpSAMLProviderArn = Lens.field @"sAMLProviderArn"
{-# INLINEABLE usamlpSAMLProviderArn #-}
{-# DEPRECATED sAMLProviderArn "Use generic-lens or generic-optics with 'sAMLProviderArn' instead"  #-}

instance Core.ToQuery UpdateSAMLProvider where
        toQuery UpdateSAMLProvider{..}
          = Core.toQueryPair "Action" ("UpdateSAMLProvider" :: Core.Text)
              Core.<> Core.toQueryPair "Version" ("2010-05-08" :: Core.Text)
              Core.<>
              Core.toQueryPair "SAMLMetadataDocument" sAMLMetadataDocument
              Core.<> Core.toQueryPair "SAMLProviderArn" sAMLProviderArn

instance Core.ToHeaders UpdateSAMLProvider where
        toHeaders _ = Core.pure Core.mempty

instance Core.AWSRequest UpdateSAMLProvider where
        type Rs UpdateSAMLProvider = UpdateSAMLProviderResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.mempty,
                         Core._rqHeaders =
                           Core.pure
                             ("Content-Type",
                              "application/x-www-form-urlencoded; charset=utf-8")
                             Core.<> Core.toHeaders x,
                         Core._rqBody = Core.toFormBody (Core.toQuery x)}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveXMLWrapper "UpdateSAMLProviderResult"
              (\ s h x ->
                 UpdateSAMLProviderResponse' Core.<$>
                   (x Core..@? "SAMLProviderArn") Core.<*>
                     Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | Contains the response to a successful 'UpdateSAMLProvider' request. 
--
-- /See:/ 'mkUpdateSAMLProviderResponse' smart constructor.
data UpdateSAMLProviderResponse = UpdateSAMLProviderResponse'
  { sAMLProviderArn :: Core.Maybe Types.ArnType
    -- ^ The Amazon Resource Name (ARN) of the SAML provider that was updated.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'UpdateSAMLProviderResponse' value with any optional fields omitted.
mkUpdateSAMLProviderResponse
    :: Core.Int -- ^ 'responseStatus'
    -> UpdateSAMLProviderResponse
mkUpdateSAMLProviderResponse responseStatus
  = UpdateSAMLProviderResponse'{sAMLProviderArn = Core.Nothing,
                                responseStatus}

-- | The Amazon Resource Name (ARN) of the SAML provider that was updated.
--
-- /Note:/ Consider using 'sAMLProviderArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
usamlprrsSAMLProviderArn :: Lens.Lens' UpdateSAMLProviderResponse (Core.Maybe Types.ArnType)
usamlprrsSAMLProviderArn = Lens.field @"sAMLProviderArn"
{-# INLINEABLE usamlprrsSAMLProviderArn #-}
{-# DEPRECATED sAMLProviderArn "Use generic-lens or generic-optics with 'sAMLProviderArn' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
usamlprrsResponseStatus :: Lens.Lens' UpdateSAMLProviderResponse Core.Int
usamlprrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE usamlprrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
