{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.UpdateSAMLProvider
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Updates the metadata document for an existing SAML provider resource object.
module Network.AWS.IAM.UpdateSAMLProvider
  ( -- * Creating a request
    UpdateSAMLProvider (..),
    mkUpdateSAMLProvider,

    -- ** Request lenses
    usamlpSAMLMetadataDocument,
    usamlpSAMLProviderARN,

    -- * Destructuring the response
    UpdateSAMLProviderResponse (..),
    mkUpdateSAMLProviderResponse,

    -- ** Response lenses
    usamlprsSAMLProviderARN,
    usamlprsResponseStatus,
  )
where

import Network.AWS.IAM.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkUpdateSAMLProvider' smart constructor.
data UpdateSAMLProvider = UpdateSAMLProvider'
  { sAMLMetadataDocument ::
      Lude.Text,
    sAMLProviderARN :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'UpdateSAMLProvider' with the minimum fields required to make a request.
--
-- * 'sAMLMetadataDocument' - An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
-- * 'sAMLProviderARN' - The Amazon Resource Name (ARN) of the SAML provider to update.
--
-- For more information about ARNs, see <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html Amazon Resource Names (ARNs) and AWS Service Namespaces> in the /AWS General Reference/ .
mkUpdateSAMLProvider ::
  -- | 'sAMLMetadataDocument'
  Lude.Text ->
  -- | 'sAMLProviderARN'
  Lude.Text ->
  UpdateSAMLProvider
mkUpdateSAMLProvider pSAMLMetadataDocument_ pSAMLProviderARN_ =
  UpdateSAMLProvider'
    { sAMLMetadataDocument =
        pSAMLMetadataDocument_,
      sAMLProviderARN = pSAMLProviderARN_
    }

-- | An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
--
-- /Note:/ Consider using 'sAMLMetadataDocument' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
usamlpSAMLMetadataDocument :: Lens.Lens' UpdateSAMLProvider Lude.Text
usamlpSAMLMetadataDocument = Lens.lens (sAMLMetadataDocument :: UpdateSAMLProvider -> Lude.Text) (\s a -> s {sAMLMetadataDocument = a} :: UpdateSAMLProvider)
{-# DEPRECATED usamlpSAMLMetadataDocument "Use generic-lens or generic-optics with 'sAMLMetadataDocument' instead." #-}

-- | The Amazon Resource Name (ARN) of the SAML provider to update.
--
-- For more information about ARNs, see <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html Amazon Resource Names (ARNs) and AWS Service Namespaces> in the /AWS General Reference/ .
--
-- /Note:/ Consider using 'sAMLProviderARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
usamlpSAMLProviderARN :: Lens.Lens' UpdateSAMLProvider Lude.Text
usamlpSAMLProviderARN = Lens.lens (sAMLProviderARN :: UpdateSAMLProvider -> Lude.Text) (\s a -> s {sAMLProviderARN = a} :: UpdateSAMLProvider)
{-# DEPRECATED usamlpSAMLProviderARN "Use generic-lens or generic-optics with 'sAMLProviderARN' instead." #-}

instance Lude.AWSRequest UpdateSAMLProvider where
  type Rs UpdateSAMLProvider = UpdateSAMLProviderResponse
  request = Req.postQuery iamService
  response =
    Res.receiveXMLWrapper
      "UpdateSAMLProviderResult"
      ( \s h x ->
          UpdateSAMLProviderResponse'
            Lude.<$> (x Lude..@? "SAMLProviderArn")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders UpdateSAMLProvider where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath UpdateSAMLProvider where
  toPath = Lude.const "/"

instance Lude.ToQuery UpdateSAMLProvider where
  toQuery UpdateSAMLProvider' {..} =
    Lude.mconcat
      [ "Action" Lude.=: ("UpdateSAMLProvider" :: Lude.ByteString),
        "Version" Lude.=: ("2010-05-08" :: Lude.ByteString),
        "SAMLMetadataDocument" Lude.=: sAMLMetadataDocument,
        "SAMLProviderArn" Lude.=: sAMLProviderARN
      ]

-- | Contains the response to a successful 'UpdateSAMLProvider' request.
--
-- /See:/ 'mkUpdateSAMLProviderResponse' smart constructor.
data UpdateSAMLProviderResponse = UpdateSAMLProviderResponse'
  { sAMLProviderARN ::
      Lude.Maybe Lude.Text,
    responseStatus :: Lude.Int
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'UpdateSAMLProviderResponse' with the minimum fields required to make a request.
--
-- * 'responseStatus' - The response status code.
-- * 'sAMLProviderARN' - The Amazon Resource Name (ARN) of the SAML provider that was updated.
mkUpdateSAMLProviderResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  UpdateSAMLProviderResponse
mkUpdateSAMLProviderResponse pResponseStatus_ =
  UpdateSAMLProviderResponse'
    { sAMLProviderARN = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | The Amazon Resource Name (ARN) of the SAML provider that was updated.
--
-- /Note:/ Consider using 'sAMLProviderARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
usamlprsSAMLProviderARN :: Lens.Lens' UpdateSAMLProviderResponse (Lude.Maybe Lude.Text)
usamlprsSAMLProviderARN = Lens.lens (sAMLProviderARN :: UpdateSAMLProviderResponse -> Lude.Maybe Lude.Text) (\s a -> s {sAMLProviderARN = a} :: UpdateSAMLProviderResponse)
{-# DEPRECATED usamlprsSAMLProviderARN "Use generic-lens or generic-optics with 'sAMLProviderARN' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
usamlprsResponseStatus :: Lens.Lens' UpdateSAMLProviderResponse Lude.Int
usamlprsResponseStatus = Lens.lens (responseStatus :: UpdateSAMLProviderResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: UpdateSAMLProviderResponse)
{-# DEPRECATED usamlprsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
