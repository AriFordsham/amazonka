{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.Types.ServiceSpecificCredential
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.IAM.Types.ServiceSpecificCredential
  ( ServiceSpecificCredential (..),

    -- * Smart constructor
    mkServiceSpecificCredential,

    -- * Lenses
    sscCreateDate,
    sscServiceName,
    sscServiceUserName,
    sscServicePassword,
    sscServiceSpecificCredentialId,
    sscUserName,
    sscStatus,
  )
where

import qualified Network.AWS.IAM.Types.ServiceName as Types
import qualified Network.AWS.IAM.Types.ServicePassword as Types
import qualified Network.AWS.IAM.Types.ServiceSpecificCredentialId as Types
import qualified Network.AWS.IAM.Types.ServiceUserName as Types
import qualified Network.AWS.IAM.Types.StatusType as Types
import qualified Network.AWS.IAM.Types.UserNameType as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | Contains the details of a service-specific credential.
--
-- /See:/ 'mkServiceSpecificCredential' smart constructor.
data ServiceSpecificCredential = ServiceSpecificCredential'
  { -- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the service-specific credential were created.
    createDate :: Core.UTCTime,
    -- | The name of the service associated with the service-specific credential.
    serviceName :: Types.ServiceName,
    -- | The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in @jane-at-123456789012@ , for example. This value cannot be configured by the user.
    serviceUserName :: Types.ServiceUserName,
    -- | The generated password for the service-specific credential.
    servicePassword :: Types.ServicePassword,
    -- | The unique identifier for the service-specific credential.
    serviceSpecificCredentialId :: Types.ServiceSpecificCredentialId,
    -- | The name of the IAM user associated with the service-specific credential.
    userName :: Types.UserNameType,
    -- | The status of the service-specific credential. @Active@ means that the key is valid for API calls, while @Inactive@ means it is not.
    status :: Types.StatusType
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'ServiceSpecificCredential' value with any optional fields omitted.
mkServiceSpecificCredential ::
  -- | 'createDate'
  Core.UTCTime ->
  -- | 'serviceName'
  Types.ServiceName ->
  -- | 'serviceUserName'
  Types.ServiceUserName ->
  -- | 'servicePassword'
  Types.ServicePassword ->
  -- | 'serviceSpecificCredentialId'
  Types.ServiceSpecificCredentialId ->
  -- | 'userName'
  Types.UserNameType ->
  -- | 'status'
  Types.StatusType ->
  ServiceSpecificCredential
mkServiceSpecificCredential
  createDate
  serviceName
  serviceUserName
  servicePassword
  serviceSpecificCredentialId
  userName
  status =
    ServiceSpecificCredential'
      { createDate,
        serviceName,
        serviceUserName,
        servicePassword,
        serviceSpecificCredentialId,
        userName,
        status
      }

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the service-specific credential were created.
--
-- /Note:/ Consider using 'createDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscCreateDate :: Lens.Lens' ServiceSpecificCredential Core.UTCTime
sscCreateDate = Lens.field @"createDate"
{-# DEPRECATED sscCreateDate "Use generic-lens or generic-optics with 'createDate' instead." #-}

-- | The name of the service associated with the service-specific credential.
--
-- /Note:/ Consider using 'serviceName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscServiceName :: Lens.Lens' ServiceSpecificCredential Types.ServiceName
sscServiceName = Lens.field @"serviceName"
{-# DEPRECATED sscServiceName "Use generic-lens or generic-optics with 'serviceName' instead." #-}

-- | The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in @jane-at-123456789012@ , for example. This value cannot be configured by the user.
--
-- /Note:/ Consider using 'serviceUserName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscServiceUserName :: Lens.Lens' ServiceSpecificCredential Types.ServiceUserName
sscServiceUserName = Lens.field @"serviceUserName"
{-# DEPRECATED sscServiceUserName "Use generic-lens or generic-optics with 'serviceUserName' instead." #-}

-- | The generated password for the service-specific credential.
--
-- /Note:/ Consider using 'servicePassword' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscServicePassword :: Lens.Lens' ServiceSpecificCredential Types.ServicePassword
sscServicePassword = Lens.field @"servicePassword"
{-# DEPRECATED sscServicePassword "Use generic-lens or generic-optics with 'servicePassword' instead." #-}

-- | The unique identifier for the service-specific credential.
--
-- /Note:/ Consider using 'serviceSpecificCredentialId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscServiceSpecificCredentialId :: Lens.Lens' ServiceSpecificCredential Types.ServiceSpecificCredentialId
sscServiceSpecificCredentialId = Lens.field @"serviceSpecificCredentialId"
{-# DEPRECATED sscServiceSpecificCredentialId "Use generic-lens or generic-optics with 'serviceSpecificCredentialId' instead." #-}

-- | The name of the IAM user associated with the service-specific credential.
--
-- /Note:/ Consider using 'userName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscUserName :: Lens.Lens' ServiceSpecificCredential Types.UserNameType
sscUserName = Lens.field @"userName"
{-# DEPRECATED sscUserName "Use generic-lens or generic-optics with 'userName' instead." #-}

-- | The status of the service-specific credential. @Active@ means that the key is valid for API calls, while @Inactive@ means it is not.
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscStatus :: Lens.Lens' ServiceSpecificCredential Types.StatusType
sscStatus = Lens.field @"status"
{-# DEPRECATED sscStatus "Use generic-lens or generic-optics with 'status' instead." #-}

instance Core.FromXML ServiceSpecificCredential where
  parseXML x =
    ServiceSpecificCredential'
      Core.<$> (x Core..@ "CreateDate")
      Core.<*> (x Core..@ "ServiceName")
      Core.<*> (x Core..@ "ServiceUserName")
      Core.<*> (x Core..@ "ServicePassword")
      Core.<*> (x Core..@ "ServiceSpecificCredentialId")
      Core.<*> (x Core..@ "UserName")
      Core.<*> (x Core..@ "Status")
