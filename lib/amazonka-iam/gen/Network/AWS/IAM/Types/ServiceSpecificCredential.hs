{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.Types.ServiceSpecificCredential
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.IAM.Types.ServiceSpecificCredential
  ( ServiceSpecificCredential (..),

    -- * Smart constructor
    mkServiceSpecificCredential,

    -- * Lenses
    sscStatus,
    sscCreateDate,
    sscUserName,
    sscServiceName,
    sscServicePassword,
    sscServiceSpecificCredentialId,
    sscServiceUserName,
  )
where

import Network.AWS.IAM.Types.StatusType
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | Contains the details of a service-specific credential.
--
-- /See:/ 'mkServiceSpecificCredential' smart constructor.
data ServiceSpecificCredential = ServiceSpecificCredential'
  { -- | The status of the service-specific credential. @Active@ means that the key is valid for API calls, while @Inactive@ means it is not.
    status :: StatusType,
    -- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the service-specific credential were created.
    createDate :: Lude.DateTime,
    -- | The name of the IAM user associated with the service-specific credential.
    userName :: Lude.Text,
    -- | The name of the service associated with the service-specific credential.
    serviceName :: Lude.Text,
    -- | The generated password for the service-specific credential.
    servicePassword :: Lude.Sensitive Lude.Text,
    -- | The unique identifier for the service-specific credential.
    serviceSpecificCredentialId :: Lude.Text,
    -- | The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in @jane-at-123456789012@ , for example. This value cannot be configured by the user.
    serviceUserName :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ServiceSpecificCredential' with the minimum fields required to make a request.
--
-- * 'status' - The status of the service-specific credential. @Active@ means that the key is valid for API calls, while @Inactive@ means it is not.
-- * 'createDate' - The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the service-specific credential were created.
-- * 'userName' - The name of the IAM user associated with the service-specific credential.
-- * 'serviceName' - The name of the service associated with the service-specific credential.
-- * 'servicePassword' - The generated password for the service-specific credential.
-- * 'serviceSpecificCredentialId' - The unique identifier for the service-specific credential.
-- * 'serviceUserName' - The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in @jane-at-123456789012@ , for example. This value cannot be configured by the user.
mkServiceSpecificCredential ::
  -- | 'status'
  StatusType ->
  -- | 'createDate'
  Lude.DateTime ->
  -- | 'userName'
  Lude.Text ->
  -- | 'serviceName'
  Lude.Text ->
  -- | 'servicePassword'
  Lude.Sensitive Lude.Text ->
  -- | 'serviceSpecificCredentialId'
  Lude.Text ->
  -- | 'serviceUserName'
  Lude.Text ->
  ServiceSpecificCredential
mkServiceSpecificCredential
  pStatus_
  pCreateDate_
  pUserName_
  pServiceName_
  pServicePassword_
  pServiceSpecificCredentialId_
  pServiceUserName_ =
    ServiceSpecificCredential'
      { status = pStatus_,
        createDate = pCreateDate_,
        userName = pUserName_,
        serviceName = pServiceName_,
        servicePassword = pServicePassword_,
        serviceSpecificCredentialId = pServiceSpecificCredentialId_,
        serviceUserName = pServiceUserName_
      }

-- | The status of the service-specific credential. @Active@ means that the key is valid for API calls, while @Inactive@ means it is not.
--
-- /Note:/ Consider using 'status' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscStatus :: Lens.Lens' ServiceSpecificCredential StatusType
sscStatus = Lens.lens (status :: ServiceSpecificCredential -> StatusType) (\s a -> s {status = a} :: ServiceSpecificCredential)
{-# DEPRECATED sscStatus "Use generic-lens or generic-optics with 'status' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the service-specific credential were created.
--
-- /Note:/ Consider using 'createDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscCreateDate :: Lens.Lens' ServiceSpecificCredential Lude.DateTime
sscCreateDate = Lens.lens (createDate :: ServiceSpecificCredential -> Lude.DateTime) (\s a -> s {createDate = a} :: ServiceSpecificCredential)
{-# DEPRECATED sscCreateDate "Use generic-lens or generic-optics with 'createDate' instead." #-}

-- | The name of the IAM user associated with the service-specific credential.
--
-- /Note:/ Consider using 'userName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscUserName :: Lens.Lens' ServiceSpecificCredential Lude.Text
sscUserName = Lens.lens (userName :: ServiceSpecificCredential -> Lude.Text) (\s a -> s {userName = a} :: ServiceSpecificCredential)
{-# DEPRECATED sscUserName "Use generic-lens or generic-optics with 'userName' instead." #-}

-- | The name of the service associated with the service-specific credential.
--
-- /Note:/ Consider using 'serviceName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscServiceName :: Lens.Lens' ServiceSpecificCredential Lude.Text
sscServiceName = Lens.lens (serviceName :: ServiceSpecificCredential -> Lude.Text) (\s a -> s {serviceName = a} :: ServiceSpecificCredential)
{-# DEPRECATED sscServiceName "Use generic-lens or generic-optics with 'serviceName' instead." #-}

-- | The generated password for the service-specific credential.
--
-- /Note:/ Consider using 'servicePassword' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscServicePassword :: Lens.Lens' ServiceSpecificCredential (Lude.Sensitive Lude.Text)
sscServicePassword = Lens.lens (servicePassword :: ServiceSpecificCredential -> Lude.Sensitive Lude.Text) (\s a -> s {servicePassword = a} :: ServiceSpecificCredential)
{-# DEPRECATED sscServicePassword "Use generic-lens or generic-optics with 'servicePassword' instead." #-}

-- | The unique identifier for the service-specific credential.
--
-- /Note:/ Consider using 'serviceSpecificCredentialId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscServiceSpecificCredentialId :: Lens.Lens' ServiceSpecificCredential Lude.Text
sscServiceSpecificCredentialId = Lens.lens (serviceSpecificCredentialId :: ServiceSpecificCredential -> Lude.Text) (\s a -> s {serviceSpecificCredentialId = a} :: ServiceSpecificCredential)
{-# DEPRECATED sscServiceSpecificCredentialId "Use generic-lens or generic-optics with 'serviceSpecificCredentialId' instead." #-}

-- | The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in @jane-at-123456789012@ , for example. This value cannot be configured by the user.
--
-- /Note:/ Consider using 'serviceUserName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sscServiceUserName :: Lens.Lens' ServiceSpecificCredential Lude.Text
sscServiceUserName = Lens.lens (serviceUserName :: ServiceSpecificCredential -> Lude.Text) (\s a -> s {serviceUserName = a} :: ServiceSpecificCredential)
{-# DEPRECATED sscServiceUserName "Use generic-lens or generic-optics with 'serviceUserName' instead." #-}

instance Lude.FromXML ServiceSpecificCredential where
  parseXML x =
    ServiceSpecificCredential'
      Lude.<$> (x Lude..@ "Status")
      Lude.<*> (x Lude..@ "CreateDate")
      Lude.<*> (x Lude..@ "UserName")
      Lude.<*> (x Lude..@ "ServiceName")
      Lude.<*> (x Lude..@ "ServicePassword")
      Lude.<*> (x Lude..@ "ServiceSpecificCredentialId")
      Lude.<*> (x Lude..@ "ServiceUserName")
