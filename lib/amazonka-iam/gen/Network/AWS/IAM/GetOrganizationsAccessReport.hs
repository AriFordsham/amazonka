{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.GetOrganizationsAccessReport
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Retrieves the service last accessed data report for AWS Organizations that was previously generated using the @'GenerateOrganizationsAccessReport' @ operation. This operation retrieves the status of your report job and the report contents.
--
-- Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see 'GenerateOrganizationsAccessReport' .
-- To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html Refining Permissions Using Service Last Accessed Data> in the /IAM User Guide/ .
-- For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.
-- By default, the list is sorted by service namespace.
module Network.AWS.IAM.GetOrganizationsAccessReport
  ( -- * Creating a request
    GetOrganizationsAccessReport (..),
    mkGetOrganizationsAccessReport,

    -- ** Request lenses
    goarJobId,
    goarMarker,
    goarMaxItems,
    goarSortKey,

    -- * Destructuring the response
    GetOrganizationsAccessReportResponse (..),
    mkGetOrganizationsAccessReportResponse,

    -- ** Response lenses
    goarrfrsJobStatus,
    goarrfrsJobCreationDate,
    goarrfrsAccessDetails,
    goarrfrsErrorDetails,
    goarrfrsIsTruncated,
    goarrfrsJobCompletionDate,
    goarrfrsMarker,
    goarrfrsNumberOfServicesAccessible,
    goarrfrsNumberOfServicesNotAccessed,
    goarrfrsResponseStatus,
  )
where

import qualified Network.AWS.IAM.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkGetOrganizationsAccessReport' smart constructor.
data GetOrganizationsAccessReport = GetOrganizationsAccessReport'
  { -- | The identifier of the request generated by the 'GenerateOrganizationsAccessReport' operation.
    jobId :: Types.JobId,
    -- | Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
    marker :: Core.Maybe Types.MarkerType,
    -- | Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
    --
    -- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
    maxItems :: Core.Maybe Core.Natural,
    -- | The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
    sortKey :: Core.Maybe Types.SortKeyType
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'GetOrganizationsAccessReport' value with any optional fields omitted.
mkGetOrganizationsAccessReport ::
  -- | 'jobId'
  Types.JobId ->
  GetOrganizationsAccessReport
mkGetOrganizationsAccessReport jobId =
  GetOrganizationsAccessReport'
    { jobId,
      marker = Core.Nothing,
      maxItems = Core.Nothing,
      sortKey = Core.Nothing
    }

-- | The identifier of the request generated by the 'GenerateOrganizationsAccessReport' operation.
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarJobId :: Lens.Lens' GetOrganizationsAccessReport Types.JobId
goarJobId = Lens.field @"jobId"
{-# DEPRECATED goarJobId "Use generic-lens or generic-optics with 'jobId' instead." #-}

-- | Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarMarker :: Lens.Lens' GetOrganizationsAccessReport (Core.Maybe Types.MarkerType)
goarMarker = Lens.field @"marker"
{-# DEPRECATED goarMarker "Use generic-lens or generic-optics with 'marker' instead." #-}

-- | Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
--
-- /Note:/ Consider using 'maxItems' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarMaxItems :: Lens.Lens' GetOrganizationsAccessReport (Core.Maybe Core.Natural)
goarMaxItems = Lens.field @"maxItems"
{-# DEPRECATED goarMaxItems "Use generic-lens or generic-optics with 'maxItems' instead." #-}

-- | The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
--
-- /Note:/ Consider using 'sortKey' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarSortKey :: Lens.Lens' GetOrganizationsAccessReport (Core.Maybe Types.SortKeyType)
goarSortKey = Lens.field @"sortKey"
{-# DEPRECATED goarSortKey "Use generic-lens or generic-optics with 'sortKey' instead." #-}

instance Core.AWSRequest GetOrganizationsAccessReport where
  type
    Rs GetOrganizationsAccessReport =
      GetOrganizationsAccessReportResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "Content-Type",
              "application/x-www-form-urlencoded; charset=utf-8"
            ),
        Core._rqBody =
          Core.toFormBody
            ( Core.pure ("Action", "GetOrganizationsAccessReport")
                Core.<> (Core.pure ("Version", "2010-05-08"))
                Core.<> (Core.toQueryValue "JobId" jobId)
                Core.<> (Core.toQueryValue "Marker" Core.<$> marker)
                Core.<> (Core.toQueryValue "MaxItems" Core.<$> maxItems)
                Core.<> (Core.toQueryValue "SortKey" Core.<$> sortKey)
            )
      }
  response =
    Response.receiveXMLWrapper
      "GetOrganizationsAccessReportResult"
      ( \s h x ->
          GetOrganizationsAccessReportResponse'
            Core.<$> (x Core..@ "JobStatus")
            Core.<*> (x Core..@ "JobCreationDate")
            Core.<*> (x Core..@? "AccessDetails" Core..<@> Core.parseXMLList "member")
            Core.<*> (x Core..@? "ErrorDetails")
            Core.<*> (x Core..@? "IsTruncated")
            Core.<*> (x Core..@? "JobCompletionDate")
            Core.<*> (x Core..@? "Marker")
            Core.<*> (x Core..@? "NumberOfServicesAccessible")
            Core.<*> (x Core..@? "NumberOfServicesNotAccessed")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkGetOrganizationsAccessReportResponse' smart constructor.
data GetOrganizationsAccessReportResponse = GetOrganizationsAccessReportResponse'
  { -- | The status of the job.
    jobStatus :: Types.JobStatusType,
    -- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
    jobCreationDate :: Core.UTCTime,
    -- | An object that contains details about the most recent attempt to access the service.
    accessDetails :: Core.Maybe [Types.AccessDetail],
    errorDetails :: Core.Maybe Types.ErrorDetails,
    -- | A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
    isTruncated :: Core.Maybe Core.Bool,
    -- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
    --
    -- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
    jobCompletionDate :: Core.Maybe Core.UTCTime,
    -- | When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
    marker :: Core.Maybe Types.MarkerType,
    -- | The number of services that the applicable SCPs allow account principals to access.
    numberOfServicesAccessible :: Core.Maybe Core.Int,
    -- | The number of services that account principals are allowed but did not attempt to access.
    numberOfServicesNotAccessed :: Core.Maybe Core.Int,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'GetOrganizationsAccessReportResponse' value with any optional fields omitted.
mkGetOrganizationsAccessReportResponse ::
  -- | 'jobStatus'
  Types.JobStatusType ->
  -- | 'jobCreationDate'
  Core.UTCTime ->
  -- | 'responseStatus'
  Core.Int ->
  GetOrganizationsAccessReportResponse
mkGetOrganizationsAccessReportResponse
  jobStatus
  jobCreationDate
  responseStatus =
    GetOrganizationsAccessReportResponse'
      { jobStatus,
        jobCreationDate,
        accessDetails = Core.Nothing,
        errorDetails = Core.Nothing,
        isTruncated = Core.Nothing,
        jobCompletionDate = Core.Nothing,
        marker = Core.Nothing,
        numberOfServicesAccessible = Core.Nothing,
        numberOfServicesNotAccessed = Core.Nothing,
        responseStatus
      }

-- | The status of the job.
--
-- /Note:/ Consider using 'jobStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsJobStatus :: Lens.Lens' GetOrganizationsAccessReportResponse Types.JobStatusType
goarrfrsJobStatus = Lens.field @"jobStatus"
{-# DEPRECATED goarrfrsJobStatus "Use generic-lens or generic-optics with 'jobStatus' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
--
-- /Note:/ Consider using 'jobCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsJobCreationDate :: Lens.Lens' GetOrganizationsAccessReportResponse Core.UTCTime
goarrfrsJobCreationDate = Lens.field @"jobCreationDate"
{-# DEPRECATED goarrfrsJobCreationDate "Use generic-lens or generic-optics with 'jobCreationDate' instead." #-}

-- | An object that contains details about the most recent attempt to access the service.
--
-- /Note:/ Consider using 'accessDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsAccessDetails :: Lens.Lens' GetOrganizationsAccessReportResponse (Core.Maybe [Types.AccessDetail])
goarrfrsAccessDetails = Lens.field @"accessDetails"
{-# DEPRECATED goarrfrsAccessDetails "Use generic-lens or generic-optics with 'accessDetails' instead." #-}

-- | Undocumented field.
--
-- /Note:/ Consider using 'errorDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsErrorDetails :: Lens.Lens' GetOrganizationsAccessReportResponse (Core.Maybe Types.ErrorDetails)
goarrfrsErrorDetails = Lens.field @"errorDetails"
{-# DEPRECATED goarrfrsErrorDetails "Use generic-lens or generic-optics with 'errorDetails' instead." #-}

-- | A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
--
-- /Note:/ Consider using 'isTruncated' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsIsTruncated :: Lens.Lens' GetOrganizationsAccessReportResponse (Core.Maybe Core.Bool)
goarrfrsIsTruncated = Lens.field @"isTruncated"
{-# DEPRECATED goarrfrsIsTruncated "Use generic-lens or generic-optics with 'isTruncated' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
--
-- /Note:/ Consider using 'jobCompletionDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsJobCompletionDate :: Lens.Lens' GetOrganizationsAccessReportResponse (Core.Maybe Core.UTCTime)
goarrfrsJobCompletionDate = Lens.field @"jobCompletionDate"
{-# DEPRECATED goarrfrsJobCompletionDate "Use generic-lens or generic-optics with 'jobCompletionDate' instead." #-}

-- | When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsMarker :: Lens.Lens' GetOrganizationsAccessReportResponse (Core.Maybe Types.MarkerType)
goarrfrsMarker = Lens.field @"marker"
{-# DEPRECATED goarrfrsMarker "Use generic-lens or generic-optics with 'marker' instead." #-}

-- | The number of services that the applicable SCPs allow account principals to access.
--
-- /Note:/ Consider using 'numberOfServicesAccessible' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsNumberOfServicesAccessible :: Lens.Lens' GetOrganizationsAccessReportResponse (Core.Maybe Core.Int)
goarrfrsNumberOfServicesAccessible = Lens.field @"numberOfServicesAccessible"
{-# DEPRECATED goarrfrsNumberOfServicesAccessible "Use generic-lens or generic-optics with 'numberOfServicesAccessible' instead." #-}

-- | The number of services that account principals are allowed but did not attempt to access.
--
-- /Note:/ Consider using 'numberOfServicesNotAccessed' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsNumberOfServicesNotAccessed :: Lens.Lens' GetOrganizationsAccessReportResponse (Core.Maybe Core.Int)
goarrfrsNumberOfServicesNotAccessed = Lens.field @"numberOfServicesNotAccessed"
{-# DEPRECATED goarrfrsNumberOfServicesNotAccessed "Use generic-lens or generic-optics with 'numberOfServicesNotAccessed' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarrfrsResponseStatus :: Lens.Lens' GetOrganizationsAccessReportResponse Core.Int
goarrfrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED goarrfrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
