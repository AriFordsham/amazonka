{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.GetOrganizationsAccessReport
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Retrieves the service last accessed data report for AWS Organizations that was previously generated using the @'GenerateOrganizationsAccessReport' @ operation. This operation retrieves the status of your report job and the report contents.
--
-- Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see 'GenerateOrganizationsAccessReport' .
-- To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html Refining Permissions Using Service Last Accessed Data> in the /IAM User Guide/ .
-- For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.
-- By default, the list is sorted by service namespace.
module Network.AWS.IAM.GetOrganizationsAccessReport
  ( -- * Creating a request
    GetOrganizationsAccessReport (..),
    mkGetOrganizationsAccessReport,

    -- ** Request lenses
    goarSortKey,
    goarMarker,
    goarMaxItems,
    goarJobId,

    -- * Destructuring the response
    GetOrganizationsAccessReportResponse (..),
    mkGetOrganizationsAccessReportResponse,

    -- ** Response lenses
    getrsNumberOfServicesNotAccessed,
    getrsJobCompletionDate,
    getrsAccessDetails,
    getrsNumberOfServicesAccessible,
    getrsMarker,
    getrsErrorDetails,
    getrsIsTruncated,
    getrsResponseStatus,
    getrsJobStatus,
    getrsJobCreationDate,
  )
where

import Network.AWS.IAM.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkGetOrganizationsAccessReport' smart constructor.
data GetOrganizationsAccessReport = GetOrganizationsAccessReport'
  { sortKey ::
      Lude.Maybe SortKeyType,
    marker :: Lude.Maybe Lude.Text,
    maxItems ::
      Lude.Maybe Lude.Natural,
    jobId :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'GetOrganizationsAccessReport' with the minimum fields required to make a request.
--
-- * 'jobId' - The identifier of the request generated by the 'GenerateOrganizationsAccessReport' operation.
-- * 'marker' - Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
-- * 'maxItems' - Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
-- * 'sortKey' - The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
mkGetOrganizationsAccessReport ::
  -- | 'jobId'
  Lude.Text ->
  GetOrganizationsAccessReport
mkGetOrganizationsAccessReport pJobId_ =
  GetOrganizationsAccessReport'
    { sortKey = Lude.Nothing,
      marker = Lude.Nothing,
      maxItems = Lude.Nothing,
      jobId = pJobId_
    }

-- | The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
--
-- /Note:/ Consider using 'sortKey' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarSortKey :: Lens.Lens' GetOrganizationsAccessReport (Lude.Maybe SortKeyType)
goarSortKey = Lens.lens (sortKey :: GetOrganizationsAccessReport -> Lude.Maybe SortKeyType) (\s a -> s {sortKey = a} :: GetOrganizationsAccessReport)
{-# DEPRECATED goarSortKey "Use generic-lens or generic-optics with 'sortKey' instead." #-}

-- | Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the @Marker@ element in the response that you received to indicate where the next call should start.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarMarker :: Lens.Lens' GetOrganizationsAccessReport (Lude.Maybe Lude.Text)
goarMarker = Lens.lens (marker :: GetOrganizationsAccessReport -> Lude.Maybe Lude.Text) (\s a -> s {marker = a} :: GetOrganizationsAccessReport)
{-# DEPRECATED goarMarker "Use generic-lens or generic-optics with 'marker' instead." #-}

-- | Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the @IsTruncated@ response element is @true@ .
--
-- If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the @IsTruncated@ response element returns @true@ , and @Marker@ contains a value to include in the subsequent call that tells the service where to continue from.
--
-- /Note:/ Consider using 'maxItems' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarMaxItems :: Lens.Lens' GetOrganizationsAccessReport (Lude.Maybe Lude.Natural)
goarMaxItems = Lens.lens (maxItems :: GetOrganizationsAccessReport -> Lude.Maybe Lude.Natural) (\s a -> s {maxItems = a} :: GetOrganizationsAccessReport)
{-# DEPRECATED goarMaxItems "Use generic-lens or generic-optics with 'maxItems' instead." #-}

-- | The identifier of the request generated by the 'GenerateOrganizationsAccessReport' operation.
--
-- /Note:/ Consider using 'jobId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
goarJobId :: Lens.Lens' GetOrganizationsAccessReport Lude.Text
goarJobId = Lens.lens (jobId :: GetOrganizationsAccessReport -> Lude.Text) (\s a -> s {jobId = a} :: GetOrganizationsAccessReport)
{-# DEPRECATED goarJobId "Use generic-lens or generic-optics with 'jobId' instead." #-}

instance Lude.AWSRequest GetOrganizationsAccessReport where
  type
    Rs GetOrganizationsAccessReport =
      GetOrganizationsAccessReportResponse
  request = Req.postQuery iamService
  response =
    Res.receiveXMLWrapper
      "GetOrganizationsAccessReportResult"
      ( \s h x ->
          GetOrganizationsAccessReportResponse'
            Lude.<$> (x Lude..@? "NumberOfServicesNotAccessed")
            Lude.<*> (x Lude..@? "JobCompletionDate")
            Lude.<*> ( x Lude..@? "AccessDetails" Lude..!@ Lude.mempty
                         Lude.>>= Lude.may (Lude.parseXMLList "member")
                     )
            Lude.<*> (x Lude..@? "NumberOfServicesAccessible")
            Lude.<*> (x Lude..@? "Marker")
            Lude.<*> (x Lude..@? "ErrorDetails")
            Lude.<*> (x Lude..@? "IsTruncated")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
            Lude.<*> (x Lude..@ "JobStatus")
            Lude.<*> (x Lude..@ "JobCreationDate")
      )

instance Lude.ToHeaders GetOrganizationsAccessReport where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath GetOrganizationsAccessReport where
  toPath = Lude.const "/"

instance Lude.ToQuery GetOrganizationsAccessReport where
  toQuery GetOrganizationsAccessReport' {..} =
    Lude.mconcat
      [ "Action"
          Lude.=: ("GetOrganizationsAccessReport" :: Lude.ByteString),
        "Version" Lude.=: ("2010-05-08" :: Lude.ByteString),
        "SortKey" Lude.=: sortKey,
        "Marker" Lude.=: marker,
        "MaxItems" Lude.=: maxItems,
        "JobId" Lude.=: jobId
      ]

-- | /See:/ 'mkGetOrganizationsAccessReportResponse' smart constructor.
data GetOrganizationsAccessReportResponse = GetOrganizationsAccessReportResponse'
  { numberOfServicesNotAccessed ::
      Lude.Maybe
        Lude.Int,
    jobCompletionDate ::
      Lude.Maybe
        Lude.ISO8601,
    accessDetails ::
      Lude.Maybe
        [AccessDetail],
    numberOfServicesAccessible ::
      Lude.Maybe
        Lude.Int,
    marker ::
      Lude.Maybe
        Lude.Text,
    errorDetails ::
      Lude.Maybe
        ErrorDetails,
    isTruncated ::
      Lude.Maybe
        Lude.Bool,
    responseStatus ::
      Lude.Int,
    jobStatus ::
      JobStatusType,
    jobCreationDate ::
      Lude.ISO8601
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'GetOrganizationsAccessReportResponse' with the minimum fields required to make a request.
--
-- * 'accessDetails' - An object that contains details about the most recent attempt to access the service.
-- * 'errorDetails' - Undocumented field.
-- * 'isTruncated' - A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
-- * 'jobCompletionDate' - The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
-- * 'jobCreationDate' - The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
-- * 'jobStatus' - The status of the job.
-- * 'marker' - When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
-- * 'numberOfServicesAccessible' - The number of services that the applicable SCPs allow account principals to access.
-- * 'numberOfServicesNotAccessed' - The number of services that account principals are allowed but did not attempt to access.
-- * 'responseStatus' - The response status code.
mkGetOrganizationsAccessReportResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  -- | 'jobStatus'
  JobStatusType ->
  -- | 'jobCreationDate'
  Lude.ISO8601 ->
  GetOrganizationsAccessReportResponse
mkGetOrganizationsAccessReportResponse
  pResponseStatus_
  pJobStatus_
  pJobCreationDate_ =
    GetOrganizationsAccessReportResponse'
      { numberOfServicesNotAccessed =
          Lude.Nothing,
        jobCompletionDate = Lude.Nothing,
        accessDetails = Lude.Nothing,
        numberOfServicesAccessible = Lude.Nothing,
        marker = Lude.Nothing,
        errorDetails = Lude.Nothing,
        isTruncated = Lude.Nothing,
        responseStatus = pResponseStatus_,
        jobStatus = pJobStatus_,
        jobCreationDate = pJobCreationDate_
      }

-- | The number of services that account principals are allowed but did not attempt to access.
--
-- /Note:/ Consider using 'numberOfServicesNotAccessed' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsNumberOfServicesNotAccessed :: Lens.Lens' GetOrganizationsAccessReportResponse (Lude.Maybe Lude.Int)
getrsNumberOfServicesNotAccessed = Lens.lens (numberOfServicesNotAccessed :: GetOrganizationsAccessReportResponse -> Lude.Maybe Lude.Int) (\s a -> s {numberOfServicesNotAccessed = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsNumberOfServicesNotAccessed "Use generic-lens or generic-optics with 'numberOfServicesNotAccessed' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the generated report job was completed or failed.
--
-- This field is null if the job is still in progress, as indicated by a job status value of @IN_PROGRESS@ .
--
-- /Note:/ Consider using 'jobCompletionDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsJobCompletionDate :: Lens.Lens' GetOrganizationsAccessReportResponse (Lude.Maybe Lude.ISO8601)
getrsJobCompletionDate = Lens.lens (jobCompletionDate :: GetOrganizationsAccessReportResponse -> Lude.Maybe Lude.ISO8601) (\s a -> s {jobCompletionDate = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsJobCompletionDate "Use generic-lens or generic-optics with 'jobCompletionDate' instead." #-}

-- | An object that contains details about the most recent attempt to access the service.
--
-- /Note:/ Consider using 'accessDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsAccessDetails :: Lens.Lens' GetOrganizationsAccessReportResponse (Lude.Maybe [AccessDetail])
getrsAccessDetails = Lens.lens (accessDetails :: GetOrganizationsAccessReportResponse -> Lude.Maybe [AccessDetail]) (\s a -> s {accessDetails = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsAccessDetails "Use generic-lens or generic-optics with 'accessDetails' instead." #-}

-- | The number of services that the applicable SCPs allow account principals to access.
--
-- /Note:/ Consider using 'numberOfServicesAccessible' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsNumberOfServicesAccessible :: Lens.Lens' GetOrganizationsAccessReportResponse (Lude.Maybe Lude.Int)
getrsNumberOfServicesAccessible = Lens.lens (numberOfServicesAccessible :: GetOrganizationsAccessReportResponse -> Lude.Maybe Lude.Int) (\s a -> s {numberOfServicesAccessible = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsNumberOfServicesAccessible "Use generic-lens or generic-optics with 'numberOfServicesAccessible' instead." #-}

-- | When @IsTruncated@ is @true@ , this element is present and contains the value to use for the @Marker@ parameter in a subsequent pagination request.
--
-- /Note:/ Consider using 'marker' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsMarker :: Lens.Lens' GetOrganizationsAccessReportResponse (Lude.Maybe Lude.Text)
getrsMarker = Lens.lens (marker :: GetOrganizationsAccessReportResponse -> Lude.Maybe Lude.Text) (\s a -> s {marker = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsMarker "Use generic-lens or generic-optics with 'marker' instead." #-}

-- | Undocumented field.
--
-- /Note:/ Consider using 'errorDetails' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsErrorDetails :: Lens.Lens' GetOrganizationsAccessReportResponse (Lude.Maybe ErrorDetails)
getrsErrorDetails = Lens.lens (errorDetails :: GetOrganizationsAccessReportResponse -> Lude.Maybe ErrorDetails) (\s a -> s {errorDetails = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsErrorDetails "Use generic-lens or generic-optics with 'errorDetails' instead." #-}

-- | A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the @Marker@ request parameter to retrieve more items. Note that IAM might return fewer than the @MaxItems@ number of results even when there are more results available. We recommend that you check @IsTruncated@ after every call to ensure that you receive all your results.
--
-- /Note:/ Consider using 'isTruncated' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsIsTruncated :: Lens.Lens' GetOrganizationsAccessReportResponse (Lude.Maybe Lude.Bool)
getrsIsTruncated = Lens.lens (isTruncated :: GetOrganizationsAccessReportResponse -> Lude.Maybe Lude.Bool) (\s a -> s {isTruncated = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsIsTruncated "Use generic-lens or generic-optics with 'isTruncated' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsResponseStatus :: Lens.Lens' GetOrganizationsAccessReportResponse Lude.Int
getrsResponseStatus = Lens.lens (responseStatus :: GetOrganizationsAccessReportResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}

-- | The status of the job.
--
-- /Note:/ Consider using 'jobStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsJobStatus :: Lens.Lens' GetOrganizationsAccessReportResponse JobStatusType
getrsJobStatus = Lens.lens (jobStatus :: GetOrganizationsAccessReportResponse -> JobStatusType) (\s a -> s {jobStatus = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsJobStatus "Use generic-lens or generic-optics with 'jobStatus' instead." #-}

-- | The date and time, in <http://www.iso.org/iso/iso8601 ISO 8601 date-time format> , when the report job was created.
--
-- /Note:/ Consider using 'jobCreationDate' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
getrsJobCreationDate :: Lens.Lens' GetOrganizationsAccessReportResponse Lude.ISO8601
getrsJobCreationDate = Lens.lens (jobCreationDate :: GetOrganizationsAccessReportResponse -> Lude.ISO8601) (\s a -> s {jobCreationDate = a} :: GetOrganizationsAccessReportResponse)
{-# DEPRECATED getrsJobCreationDate "Use generic-lens or generic-optics with 'jobCreationDate' instead." #-}
