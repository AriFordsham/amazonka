{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IAM.CreateSAMLProvider
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.
--
-- The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.
-- When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.
-- For more information, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html Enabling SAML 2.0 Federated Users to Access the AWS Management Console> and <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html About SAML 2.0-based Federation> in the /IAM User Guide/ .
module Network.AWS.IAM.CreateSAMLProvider
  ( -- * Creating a request
    CreateSAMLProvider (..),
    mkCreateSAMLProvider,

    -- ** Request lenses
    csamlpSAMLMetadataDocument,
    csamlpName,

    -- * Destructuring the response
    CreateSAMLProviderResponse (..),
    mkCreateSAMLProviderResponse,

    -- ** Response lenses
    csamlprsSAMLProviderARN,
    csamlprsResponseStatus,
  )
where

import Network.AWS.IAM.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkCreateSAMLProvider' smart constructor.
data CreateSAMLProvider = CreateSAMLProvider'
  { sAMLMetadataDocument ::
      Lude.Text,
    name :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CreateSAMLProvider' with the minimum fields required to make a request.
--
-- * 'name' - The name of the provider to create.
--
-- This parameter allows (through its <http://wikipedia.org/wiki/regex regex pattern> ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
-- * 'sAMLMetadataDocument' - An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
--
-- For more information, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html About SAML 2.0-based Federation> in the /IAM User Guide/
mkCreateSAMLProvider ::
  -- | 'sAMLMetadataDocument'
  Lude.Text ->
  -- | 'name'
  Lude.Text ->
  CreateSAMLProvider
mkCreateSAMLProvider pSAMLMetadataDocument_ pName_ =
  CreateSAMLProvider'
    { sAMLMetadataDocument =
        pSAMLMetadataDocument_,
      name = pName_
    }

-- | An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
--
-- For more information, see <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html About SAML 2.0-based Federation> in the /IAM User Guide/
--
-- /Note:/ Consider using 'sAMLMetadataDocument' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csamlpSAMLMetadataDocument :: Lens.Lens' CreateSAMLProvider Lude.Text
csamlpSAMLMetadataDocument = Lens.lens (sAMLMetadataDocument :: CreateSAMLProvider -> Lude.Text) (\s a -> s {sAMLMetadataDocument = a} :: CreateSAMLProvider)
{-# DEPRECATED csamlpSAMLMetadataDocument "Use generic-lens or generic-optics with 'sAMLMetadataDocument' instead." #-}

-- | The name of the provider to create.
--
-- This parameter allows (through its <http://wikipedia.org/wiki/regex regex pattern> ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
--
-- /Note:/ Consider using 'name' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csamlpName :: Lens.Lens' CreateSAMLProvider Lude.Text
csamlpName = Lens.lens (name :: CreateSAMLProvider -> Lude.Text) (\s a -> s {name = a} :: CreateSAMLProvider)
{-# DEPRECATED csamlpName "Use generic-lens or generic-optics with 'name' instead." #-}

instance Lude.AWSRequest CreateSAMLProvider where
  type Rs CreateSAMLProvider = CreateSAMLProviderResponse
  request = Req.postQuery iamService
  response =
    Res.receiveXMLWrapper
      "CreateSAMLProviderResult"
      ( \s h x ->
          CreateSAMLProviderResponse'
            Lude.<$> (x Lude..@? "SAMLProviderArn")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders CreateSAMLProvider where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath CreateSAMLProvider where
  toPath = Lude.const "/"

instance Lude.ToQuery CreateSAMLProvider where
  toQuery CreateSAMLProvider' {..} =
    Lude.mconcat
      [ "Action" Lude.=: ("CreateSAMLProvider" :: Lude.ByteString),
        "Version" Lude.=: ("2010-05-08" :: Lude.ByteString),
        "SAMLMetadataDocument" Lude.=: sAMLMetadataDocument,
        "Name" Lude.=: name
      ]

-- | Contains the response to a successful 'CreateSAMLProvider' request.
--
-- /See:/ 'mkCreateSAMLProviderResponse' smart constructor.
data CreateSAMLProviderResponse = CreateSAMLProviderResponse'
  { sAMLProviderARN ::
      Lude.Maybe Lude.Text,
    responseStatus :: Lude.Int
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'CreateSAMLProviderResponse' with the minimum fields required to make a request.
--
-- * 'responseStatus' - The response status code.
-- * 'sAMLProviderARN' - The Amazon Resource Name (ARN) of the new SAML provider resource in IAM.
mkCreateSAMLProviderResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  CreateSAMLProviderResponse
mkCreateSAMLProviderResponse pResponseStatus_ =
  CreateSAMLProviderResponse'
    { sAMLProviderARN = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | The Amazon Resource Name (ARN) of the new SAML provider resource in IAM.
--
-- /Note:/ Consider using 'sAMLProviderARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csamlprsSAMLProviderARN :: Lens.Lens' CreateSAMLProviderResponse (Lude.Maybe Lude.Text)
csamlprsSAMLProviderARN = Lens.lens (sAMLProviderARN :: CreateSAMLProviderResponse -> Lude.Maybe Lude.Text) (\s a -> s {sAMLProviderARN = a} :: CreateSAMLProviderResponse)
{-# DEPRECATED csamlprsSAMLProviderARN "Use generic-lens or generic-optics with 'sAMLProviderARN' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
csamlprsResponseStatus :: Lens.Lens' CreateSAMLProviderResponse Lude.Int
csamlprsResponseStatus = Lens.lens (responseStatus :: CreateSAMLProviderResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: CreateSAMLProviderResponse)
{-# DEPRECATED csamlprsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
