{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.MediaConvert.Types.M2tsScte35Esam
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.MediaConvert.Types.M2tsScte35Esam
  ( M2tsScte35Esam (..)
  -- * Smart constructor
  , mkM2tsScte35Esam
  -- * Lenses
  , mseScte35EsamPid
  ) where

import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | Settings for SCTE-35 signals from ESAM. Include this in your job settings to put SCTE-35 markers in your HLS and transport stream outputs at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
--
-- /See:/ 'mkM2tsScte35Esam' smart constructor.
newtype M2tsScte35Esam = M2tsScte35Esam'
  { scte35EsamPid :: Core.Maybe Core.Natural
    -- ^ Packet Identifier (PID) of the SCTE-35 stream in the transport stream generated by ESAM.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving newtype (Core.Hashable, Core.NFData)

-- | Creates a 'M2tsScte35Esam' value with any optional fields omitted.
mkM2tsScte35Esam
    :: M2tsScte35Esam
mkM2tsScte35Esam = M2tsScte35Esam'{scte35EsamPid = Core.Nothing}

-- | Packet Identifier (PID) of the SCTE-35 stream in the transport stream generated by ESAM.
--
-- /Note:/ Consider using 'scte35EsamPid' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
mseScte35EsamPid :: Lens.Lens' M2tsScte35Esam (Core.Maybe Core.Natural)
mseScte35EsamPid = Lens.field @"scte35EsamPid"
{-# INLINEABLE mseScte35EsamPid #-}
{-# DEPRECATED scte35EsamPid "Use generic-lens or generic-optics with 'scte35EsamPid' instead"  #-}

instance Core.FromJSON M2tsScte35Esam where
        toJSON M2tsScte35Esam{..}
          = Core.object
              (Core.catMaybes [("scte35EsamPid" Core..=) Core.<$> scte35EsamPid])

instance Core.FromJSON M2tsScte35Esam where
        parseJSON
          = Core.withObject "M2tsScte35Esam" Core.$
              \ x -> M2tsScte35Esam' Core.<$> (x Core..:? "scte35EsamPid")
