{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListQueryExecutions
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Provides a list of available query execution IDs for the queries in the specified workgroup. If a workgroup is not specified, returns a list of query execution IDs for the primary workgroup. Requires you to have access to the workgroup in which the queries ran.
--
-- For code samples using the AWS SDK for Java, see <http://docs.aws.amazon.com/athena/latest/ug/code-samples.html Examples and Code Samples> in the /Amazon Athena User Guide/ .
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListQueryExecutions
  ( -- * Creating a request
    ListQueryExecutions (..),
    mkListQueryExecutions,

    -- ** Request lenses
    lqeNextToken,
    lqeWorkGroup,
    lqeMaxResults,

    -- * Destructuring the response
    ListQueryExecutionsResponse (..),
    mkListQueryExecutionsResponse,

    -- ** Response lenses
    lqersQueryExecutionIds,
    lqersNextToken,
    lqersResponseStatus,
  )
where

import Network.AWS.Athena.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Page
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkListQueryExecutions' smart constructor.
data ListQueryExecutions = ListQueryExecutions'
  { -- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
    nextToken :: Lude.Maybe Lude.Text,
    -- | The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
    workGroup :: Lude.Maybe Lude.Text,
    -- | The maximum number of query executions to return in this request.
    maxResults :: Lude.Maybe Lude.Natural
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListQueryExecutions' with the minimum fields required to make a request.
--
-- * 'nextToken' - A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
-- * 'workGroup' - The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
-- * 'maxResults' - The maximum number of query executions to return in this request.
mkListQueryExecutions ::
  ListQueryExecutions
mkListQueryExecutions =
  ListQueryExecutions'
    { nextToken = Lude.Nothing,
      workGroup = Lude.Nothing,
      maxResults = Lude.Nothing
    }

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lqeNextToken :: Lens.Lens' ListQueryExecutions (Lude.Maybe Lude.Text)
lqeNextToken = Lens.lens (nextToken :: ListQueryExecutions -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListQueryExecutions)
{-# DEPRECATED lqeNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
--
-- /Note:/ Consider using 'workGroup' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lqeWorkGroup :: Lens.Lens' ListQueryExecutions (Lude.Maybe Lude.Text)
lqeWorkGroup = Lens.lens (workGroup :: ListQueryExecutions -> Lude.Maybe Lude.Text) (\s a -> s {workGroup = a} :: ListQueryExecutions)
{-# DEPRECATED lqeWorkGroup "Use generic-lens or generic-optics with 'workGroup' instead." #-}

-- | The maximum number of query executions to return in this request.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lqeMaxResults :: Lens.Lens' ListQueryExecutions (Lude.Maybe Lude.Natural)
lqeMaxResults = Lens.lens (maxResults :: ListQueryExecutions -> Lude.Maybe Lude.Natural) (\s a -> s {maxResults = a} :: ListQueryExecutions)
{-# DEPRECATED lqeMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

instance Page.AWSPager ListQueryExecutions where
  page rq rs
    | Page.stop (rs Lens.^. lqersNextToken) = Lude.Nothing
    | Page.stop (rs Lens.^. lqersQueryExecutionIds) = Lude.Nothing
    | Lude.otherwise =
      Lude.Just Lude.$
        rq
          Lude.& lqeNextToken Lens..~ rs Lens.^. lqersNextToken

instance Lude.AWSRequest ListQueryExecutions where
  type Rs ListQueryExecutions = ListQueryExecutionsResponse
  request = Req.postJSON athenaService
  response =
    Res.receiveJSON
      ( \s h x ->
          ListQueryExecutionsResponse'
            Lude.<$> (x Lude..?> "QueryExecutionIds")
            Lude.<*> (x Lude..?> "NextToken")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders ListQueryExecutions where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("AmazonAthena.ListQueryExecutions" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON ListQueryExecutions where
  toJSON ListQueryExecutions' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("NextToken" Lude..=) Lude.<$> nextToken,
            ("WorkGroup" Lude..=) Lude.<$> workGroup,
            ("MaxResults" Lude..=) Lude.<$> maxResults
          ]
      )

instance Lude.ToPath ListQueryExecutions where
  toPath = Lude.const "/"

instance Lude.ToQuery ListQueryExecutions where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkListQueryExecutionsResponse' smart constructor.
data ListQueryExecutionsResponse = ListQueryExecutionsResponse'
  { -- | The unique IDs of each query execution as an array of strings.
    queryExecutionIds :: Lude.Maybe (Lude.NonEmpty Lude.Text),
    -- | A token to be used by the next request if this request is truncated.
    nextToken :: Lude.Maybe Lude.Text,
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListQueryExecutionsResponse' with the minimum fields required to make a request.
--
-- * 'queryExecutionIds' - The unique IDs of each query execution as an array of strings.
-- * 'nextToken' - A token to be used by the next request if this request is truncated.
-- * 'responseStatus' - The response status code.
mkListQueryExecutionsResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  ListQueryExecutionsResponse
mkListQueryExecutionsResponse pResponseStatus_ =
  ListQueryExecutionsResponse'
    { queryExecutionIds = Lude.Nothing,
      nextToken = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | The unique IDs of each query execution as an array of strings.
--
-- /Note:/ Consider using 'queryExecutionIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lqersQueryExecutionIds :: Lens.Lens' ListQueryExecutionsResponse (Lude.Maybe (Lude.NonEmpty Lude.Text))
lqersQueryExecutionIds = Lens.lens (queryExecutionIds :: ListQueryExecutionsResponse -> Lude.Maybe (Lude.NonEmpty Lude.Text)) (\s a -> s {queryExecutionIds = a} :: ListQueryExecutionsResponse)
{-# DEPRECATED lqersQueryExecutionIds "Use generic-lens or generic-optics with 'queryExecutionIds' instead." #-}

-- | A token to be used by the next request if this request is truncated.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lqersNextToken :: Lens.Lens' ListQueryExecutionsResponse (Lude.Maybe Lude.Text)
lqersNextToken = Lens.lens (nextToken :: ListQueryExecutionsResponse -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListQueryExecutionsResponse)
{-# DEPRECATED lqersNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lqersResponseStatus :: Lens.Lens' ListQueryExecutionsResponse Lude.Int
lqersResponseStatus = Lens.lens (responseStatus :: ListQueryExecutionsResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: ListQueryExecutionsResponse)
{-# DEPRECATED lqersResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
