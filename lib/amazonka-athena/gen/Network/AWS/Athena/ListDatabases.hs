{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListDatabases
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the databases in the specified data catalog.
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListDatabases
    (
    -- * Creating a request
      ListDatabases (..)
    , mkListDatabases
    -- ** Request lenses
    , ldCatalogName
    , ldMaxResults
    , ldNextToken

    -- * Destructuring the response
    , ListDatabasesResponse (..)
    , mkListDatabasesResponse
    -- ** Response lenses
    , ldrrsDatabaseList
    , ldrrsNextToken
    , ldrrsResponseStatus
    ) where

import qualified Network.AWS.Athena.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Pager
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkListDatabases' smart constructor.
data ListDatabases = ListDatabases'
  { catalogName :: Types.CatalogName
    -- ^ The name of the data catalog that contains the databases to return.
  , maxResults :: Core.Maybe Core.Natural
    -- ^ Specifies the maximum number of results to return.
  , nextToken :: Core.Maybe Types.Token
    -- ^ A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ListDatabases' value with any optional fields omitted.
mkListDatabases
    :: Types.CatalogName -- ^ 'catalogName'
    -> ListDatabases
mkListDatabases catalogName
  = ListDatabases'{catalogName, maxResults = Core.Nothing,
                   nextToken = Core.Nothing}

-- | The name of the data catalog that contains the databases to return.
--
-- /Note:/ Consider using 'catalogName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldCatalogName :: Lens.Lens' ListDatabases Types.CatalogName
ldCatalogName = Lens.field @"catalogName"
{-# INLINEABLE ldCatalogName #-}
{-# DEPRECATED catalogName "Use generic-lens or generic-optics with 'catalogName' instead"  #-}

-- | Specifies the maximum number of results to return.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldMaxResults :: Lens.Lens' ListDatabases (Core.Maybe Core.Natural)
ldMaxResults = Lens.field @"maxResults"
{-# INLINEABLE ldMaxResults #-}
{-# DEPRECATED maxResults "Use generic-lens or generic-optics with 'maxResults' instead"  #-}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldNextToken :: Lens.Lens' ListDatabases (Core.Maybe Types.Token)
ldNextToken = Lens.field @"nextToken"
{-# INLINEABLE ldNextToken #-}
{-# DEPRECATED nextToken "Use generic-lens or generic-optics with 'nextToken' instead"  #-}

instance Core.ToQuery ListDatabases where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders ListDatabases where
        toHeaders ListDatabases{..}
          = Core.pure ("X-Amz-Target", "AmazonAthena.ListDatabases") Core.<>
              Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON ListDatabases where
        toJSON ListDatabases{..}
          = Core.object
              (Core.catMaybes
                 [Core.Just ("CatalogName" Core..= catalogName),
                  ("MaxResults" Core..=) Core.<$> maxResults,
                  ("NextToken" Core..=) Core.<$> nextToken])

instance Core.AWSRequest ListDatabases where
        type Rs ListDatabases = ListDatabasesResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 ListDatabasesResponse' Core.<$>
                   (x Core..:? "DatabaseList") Core.<*> x Core..:? "NextToken"
                     Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

instance Pager.AWSPager ListDatabases where
        page rq rs
          | Pager.stop (rs Lens.^. Lens.field @"nextToken") = Core.Nothing
          | Pager.stop
              (rs Lens.^? Lens.field @"databaseList" Core.. Lens._Just)
            = Core.Nothing
          | Core.otherwise =
            Core.Just
              (rq Core.&
                 Lens.field @"nextToken" Lens..~ rs Lens.^. Lens.field @"nextToken")

-- | /See:/ 'mkListDatabasesResponse' smart constructor.
data ListDatabasesResponse = ListDatabasesResponse'
  { databaseList :: Core.Maybe [Types.Database]
    -- ^ A list of databases from a data catalog.
  , nextToken :: Core.Maybe Types.Token
    -- ^ A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ListDatabasesResponse' value with any optional fields omitted.
mkListDatabasesResponse
    :: Core.Int -- ^ 'responseStatus'
    -> ListDatabasesResponse
mkListDatabasesResponse responseStatus
  = ListDatabasesResponse'{databaseList = Core.Nothing,
                           nextToken = Core.Nothing, responseStatus}

-- | A list of databases from a data catalog.
--
-- /Note:/ Consider using 'databaseList' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldrrsDatabaseList :: Lens.Lens' ListDatabasesResponse (Core.Maybe [Types.Database])
ldrrsDatabaseList = Lens.field @"databaseList"
{-# INLINEABLE ldrrsDatabaseList #-}
{-# DEPRECATED databaseList "Use generic-lens or generic-optics with 'databaseList' instead"  #-}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldrrsNextToken :: Lens.Lens' ListDatabasesResponse (Core.Maybe Types.Token)
ldrrsNextToken = Lens.field @"nextToken"
{-# INLINEABLE ldrrsNextToken #-}
{-# DEPRECATED nextToken "Use generic-lens or generic-optics with 'nextToken' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldrrsResponseStatus :: Lens.Lens' ListDatabasesResponse Core.Int
ldrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE ldrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
