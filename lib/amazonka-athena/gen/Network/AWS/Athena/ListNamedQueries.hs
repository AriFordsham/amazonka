{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListNamedQueries
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Provides a list of available query IDs only for queries saved in the specified workgroup. Requires that you have access to the specified workgroup. If a workgroup is not specified, lists the saved queries for the primary workgroup.
--
-- For code samples using the AWS SDK for Java, see <http://docs.aws.amazon.com/athena/latest/ug/code-samples.html Examples and Code Samples> in the /Amazon Athena User Guide/ .
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListNamedQueries
  ( -- * Creating a request
    ListNamedQueries (..),
    mkListNamedQueries,

    -- ** Request lenses
    lnqMaxResults,
    lnqNextToken,
    lnqWorkGroup,

    -- * Destructuring the response
    ListNamedQueriesResponse (..),
    mkListNamedQueriesResponse,

    -- ** Response lenses
    lnqrrsNamedQueryIds,
    lnqrrsNextToken,
    lnqrrsResponseStatus,
  )
where

import qualified Network.AWS.Athena.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Pager
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkListNamedQueries' smart constructor.
data ListNamedQueries = ListNamedQueries'
  { -- | The maximum number of queries to return in this request.
    maxResults :: Core.Maybe Core.Natural,
    -- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
    nextToken :: Core.Maybe Types.Token,
    -- | The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned.
    workGroup :: Core.Maybe Types.WorkGroupName
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ListNamedQueries' value with any optional fields omitted.
mkListNamedQueries ::
  ListNamedQueries
mkListNamedQueries =
  ListNamedQueries'
    { maxResults = Core.Nothing,
      nextToken = Core.Nothing,
      workGroup = Core.Nothing
    }

-- | The maximum number of queries to return in this request.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lnqMaxResults :: Lens.Lens' ListNamedQueries (Core.Maybe Core.Natural)
lnqMaxResults = Lens.field @"maxResults"
{-# DEPRECATED lnqMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lnqNextToken :: Lens.Lens' ListNamedQueries (Core.Maybe Types.Token)
lnqNextToken = Lens.field @"nextToken"
{-# DEPRECATED lnqNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned.
--
-- /Note:/ Consider using 'workGroup' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lnqWorkGroup :: Lens.Lens' ListNamedQueries (Core.Maybe Types.WorkGroupName)
lnqWorkGroup = Lens.field @"workGroup"
{-# DEPRECATED lnqWorkGroup "Use generic-lens or generic-optics with 'workGroup' instead." #-}

instance Core.FromJSON ListNamedQueries where
  toJSON ListNamedQueries {..} =
    Core.object
      ( Core.catMaybes
          [ ("MaxResults" Core..=) Core.<$> maxResults,
            ("NextToken" Core..=) Core.<$> nextToken,
            ("WorkGroup" Core..=) Core.<$> workGroup
          ]
      )

instance Core.AWSRequest ListNamedQueries where
  type Rs ListNamedQueries = ListNamedQueriesResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure ("X-Amz-Target", "AmazonAthena.ListNamedQueries")
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          ListNamedQueriesResponse'
            Core.<$> (x Core..:? "NamedQueryIds")
            Core.<*> (x Core..:? "NextToken")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Pager.AWSPager ListNamedQueries where
  page rq rs
    | Pager.stop (rs Lens.^. Lens.field @"nextToken") = Core.Nothing
    | Pager.stop
        (rs Lens.^? Lens.field @"namedQueryIds" Core.. Lens._Just) =
      Core.Nothing
    | Core.otherwise =
      Core.Just
        ( rq
            Core.& Lens.field @"nextToken" Lens..~ rs Lens.^. Lens.field @"nextToken"
        )

-- | /See:/ 'mkListNamedQueriesResponse' smart constructor.
data ListNamedQueriesResponse = ListNamedQueriesResponse'
  { -- | The list of unique query IDs.
    namedQueryIds :: Core.Maybe (Core.NonEmpty Types.NamedQueryId),
    -- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
    nextToken :: Core.Maybe Types.Token,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ListNamedQueriesResponse' value with any optional fields omitted.
mkListNamedQueriesResponse ::
  -- | 'responseStatus'
  Core.Int ->
  ListNamedQueriesResponse
mkListNamedQueriesResponse responseStatus =
  ListNamedQueriesResponse'
    { namedQueryIds = Core.Nothing,
      nextToken = Core.Nothing,
      responseStatus
    }

-- | The list of unique query IDs.
--
-- /Note:/ Consider using 'namedQueryIds' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lnqrrsNamedQueryIds :: Lens.Lens' ListNamedQueriesResponse (Core.Maybe (Core.NonEmpty Types.NamedQueryId))
lnqrrsNamedQueryIds = Lens.field @"namedQueryIds"
{-# DEPRECATED lnqrrsNamedQueryIds "Use generic-lens or generic-optics with 'namedQueryIds' instead." #-}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lnqrrsNextToken :: Lens.Lens' ListNamedQueriesResponse (Core.Maybe Types.Token)
lnqrrsNextToken = Lens.field @"nextToken"
{-# DEPRECATED lnqrrsNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lnqrrsResponseStatus :: Lens.Lens' ListNamedQueriesResponse Core.Int
lnqrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED lnqrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
