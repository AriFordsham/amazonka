{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.GetQueryResults
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Streams the results of a single query execution specified by @QueryExecutionId@ from the Athena query results location in Amazon S3. For more information, see <https://docs.aws.amazon.com/athena/latest/ug/querying.html Query Results> in the /Amazon Athena User Guide/ . This request does not execute the query but returns results. Use 'StartQueryExecution' to run a query.
--
-- To stream query results successfully, the IAM principal with permission to call @GetQueryResults@ also must have permissions to the Amazon S3 @GetObject@ action for the Athena query results location.
-- /Important:/ IAM principals with permission to the Amazon S3 @GetObject@ action for the query results location are able to retrieve query results from Amazon S3 even if permission to the @GetQueryResults@ action is denied. To restrict user or role access, ensure that Amazon S3 permissions to the Athena query location are denied.
--
-- This operation returns paginated results.
module Network.AWS.Athena.GetQueryResults
  ( -- * Creating a request
    GetQueryResults (..),
    mkGetQueryResults,

    -- ** Request lenses
    gqrQueryExecutionId,
    gqrMaxResults,
    gqrNextToken,

    -- * Destructuring the response
    GetQueryResultsResponse (..),
    mkGetQueryResultsResponse,

    -- ** Response lenses
    gqrrrsNextToken,
    gqrrrsResultSet,
    gqrrrsUpdateCount,
    gqrrrsResponseStatus,
  )
where

import qualified Network.AWS.Athena.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Pager
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkGetQueryResults' smart constructor.
data GetQueryResults = GetQueryResults'
  { -- | The unique ID of the query execution.
    queryExecutionId :: Types.QueryExecutionId,
    -- | The maximum number of results (rows) to return in this request.
    maxResults :: Core.Maybe Core.Natural,
    -- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
    nextToken :: Core.Maybe Types.Token
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'GetQueryResults' value with any optional fields omitted.
mkGetQueryResults ::
  -- | 'queryExecutionId'
  Types.QueryExecutionId ->
  GetQueryResults
mkGetQueryResults queryExecutionId =
  GetQueryResults'
    { queryExecutionId,
      maxResults = Core.Nothing,
      nextToken = Core.Nothing
    }

-- | The unique ID of the query execution.
--
-- /Note:/ Consider using 'queryExecutionId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gqrQueryExecutionId :: Lens.Lens' GetQueryResults Types.QueryExecutionId
gqrQueryExecutionId = Lens.field @"queryExecutionId"
{-# DEPRECATED gqrQueryExecutionId "Use generic-lens or generic-optics with 'queryExecutionId' instead." #-}

-- | The maximum number of results (rows) to return in this request.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gqrMaxResults :: Lens.Lens' GetQueryResults (Core.Maybe Core.Natural)
gqrMaxResults = Lens.field @"maxResults"
{-# DEPRECATED gqrMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gqrNextToken :: Lens.Lens' GetQueryResults (Core.Maybe Types.Token)
gqrNextToken = Lens.field @"nextToken"
{-# DEPRECATED gqrNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

instance Core.FromJSON GetQueryResults where
  toJSON GetQueryResults {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("QueryExecutionId" Core..= queryExecutionId),
            ("MaxResults" Core..=) Core.<$> maxResults,
            ("NextToken" Core..=) Core.<$> nextToken
          ]
      )

instance Core.AWSRequest GetQueryResults where
  type Rs GetQueryResults = GetQueryResultsResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure ("X-Amz-Target", "AmazonAthena.GetQueryResults")
            Core.<> (Core.pure ("Content-Type", "application/x-amz-json-1.1")),
        Core._rqBody = Core.toJSONBody x
      }
  response =
    Response.receiveJSON
      ( \s h x ->
          GetQueryResultsResponse'
            Core.<$> (x Core..:? "NextToken")
            Core.<*> (x Core..:? "ResultSet")
            Core.<*> (x Core..:? "UpdateCount")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

instance Pager.AWSPager GetQueryResults where
  page rq rs
    | Pager.stop (rs Lens.^. Lens.field @"nextToken") = Core.Nothing
    | Pager.stop
        ( rs
            Lens.^? Lens.field @"resultSet" Core.. Lens._Just
              Core.. Lens.field @"rows"
              Core.. Lens._Just
        ) =
      Core.Nothing
    | Core.otherwise =
      Core.Just
        ( rq
            Core.& Lens.field @"nextToken" Lens..~ rs Lens.^. Lens.field @"nextToken"
        )

-- | /See:/ 'mkGetQueryResultsResponse' smart constructor.
data GetQueryResultsResponse = GetQueryResultsResponse'
  { -- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
    nextToken :: Core.Maybe Types.Token,
    -- | The results of the query execution.
    resultSet :: Core.Maybe Types.ResultSet,
    -- | The number of rows inserted with a CREATE TABLE AS SELECT statement.
    updateCount :: Core.Maybe Core.Integer,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'GetQueryResultsResponse' value with any optional fields omitted.
mkGetQueryResultsResponse ::
  -- | 'responseStatus'
  Core.Int ->
  GetQueryResultsResponse
mkGetQueryResultsResponse responseStatus =
  GetQueryResultsResponse'
    { nextToken = Core.Nothing,
      resultSet = Core.Nothing,
      updateCount = Core.Nothing,
      responseStatus
    }

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gqrrrsNextToken :: Lens.Lens' GetQueryResultsResponse (Core.Maybe Types.Token)
gqrrrsNextToken = Lens.field @"nextToken"
{-# DEPRECATED gqrrrsNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The results of the query execution.
--
-- /Note:/ Consider using 'resultSet' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gqrrrsResultSet :: Lens.Lens' GetQueryResultsResponse (Core.Maybe Types.ResultSet)
gqrrrsResultSet = Lens.field @"resultSet"
{-# DEPRECATED gqrrrsResultSet "Use generic-lens or generic-optics with 'resultSet' instead." #-}

-- | The number of rows inserted with a CREATE TABLE AS SELECT statement.
--
-- /Note:/ Consider using 'updateCount' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gqrrrsUpdateCount :: Lens.Lens' GetQueryResultsResponse (Core.Maybe Core.Integer)
gqrrrsUpdateCount = Lens.field @"updateCount"
{-# DEPRECATED gqrrrsUpdateCount "Use generic-lens or generic-optics with 'updateCount' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
gqrrrsResponseStatus :: Lens.Lens' GetQueryResultsResponse Core.Int
gqrrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED gqrrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
