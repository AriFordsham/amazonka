{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListWorkGroups
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists available workgroups for the account.
module Network.AWS.Athena.ListWorkGroups
    (
    -- * Creating a request
      ListWorkGroups (..)
    , mkListWorkGroups
    -- ** Request lenses
    , lwgMaxResults
    , lwgNextToken

    -- * Destructuring the response
    , ListWorkGroupsResponse (..)
    , mkListWorkGroupsResponse
    -- ** Response lenses
    , lwgrrsNextToken
    , lwgrrsWorkGroups
    , lwgrrsResponseStatus
    ) where

import qualified Network.AWS.Athena.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkListWorkGroups' smart constructor.
data ListWorkGroups = ListWorkGroups'
  { maxResults :: Core.Maybe Core.Natural
    -- ^ The maximum number of workgroups to return in this request.
  , nextToken :: Core.Maybe Types.Token
    -- ^ A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ListWorkGroups' value with any optional fields omitted.
mkListWorkGroups
    :: ListWorkGroups
mkListWorkGroups
  = ListWorkGroups'{maxResults = Core.Nothing,
                    nextToken = Core.Nothing}

-- | The maximum number of workgroups to return in this request.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwgMaxResults :: Lens.Lens' ListWorkGroups (Core.Maybe Core.Natural)
lwgMaxResults = Lens.field @"maxResults"
{-# INLINEABLE lwgMaxResults #-}
{-# DEPRECATED maxResults "Use generic-lens or generic-optics with 'maxResults' instead"  #-}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwgNextToken :: Lens.Lens' ListWorkGroups (Core.Maybe Types.Token)
lwgNextToken = Lens.field @"nextToken"
{-# INLINEABLE lwgNextToken #-}
{-# DEPRECATED nextToken "Use generic-lens or generic-optics with 'nextToken' instead"  #-}

instance Core.ToQuery ListWorkGroups where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders ListWorkGroups where
        toHeaders ListWorkGroups{..}
          = Core.pure ("X-Amz-Target", "AmazonAthena.ListWorkGroups") Core.<>
              Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON ListWorkGroups where
        toJSON ListWorkGroups{..}
          = Core.object
              (Core.catMaybes
                 [("MaxResults" Core..=) Core.<$> maxResults,
                  ("NextToken" Core..=) Core.<$> nextToken])

instance Core.AWSRequest ListWorkGroups where
        type Rs ListWorkGroups = ListWorkGroupsResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 ListWorkGroupsResponse' Core.<$>
                   (x Core..:? "NextToken") Core.<*> x Core..:? "WorkGroups" Core.<*>
                     Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

-- | /See:/ 'mkListWorkGroupsResponse' smart constructor.
data ListWorkGroupsResponse = ListWorkGroupsResponse'
  { nextToken :: Core.Maybe Types.NextToken
    -- ^ A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
  , workGroups :: Core.Maybe [Types.WorkGroupSummary]
    -- ^ The list of workgroups, including their names, descriptions, creation times, and states.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass Core.NFData

-- | Creates a 'ListWorkGroupsResponse' value with any optional fields omitted.
mkListWorkGroupsResponse
    :: Core.Int -- ^ 'responseStatus'
    -> ListWorkGroupsResponse
mkListWorkGroupsResponse responseStatus
  = ListWorkGroupsResponse'{nextToken = Core.Nothing,
                            workGroups = Core.Nothing, responseStatus}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwgrrsNextToken :: Lens.Lens' ListWorkGroupsResponse (Core.Maybe Types.NextToken)
lwgrrsNextToken = Lens.field @"nextToken"
{-# INLINEABLE lwgrrsNextToken #-}
{-# DEPRECATED nextToken "Use generic-lens or generic-optics with 'nextToken' instead"  #-}

-- | The list of workgroups, including their names, descriptions, creation times, and states.
--
-- /Note:/ Consider using 'workGroups' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwgrrsWorkGroups :: Lens.Lens' ListWorkGroupsResponse (Core.Maybe [Types.WorkGroupSummary])
lwgrrsWorkGroups = Lens.field @"workGroups"
{-# INLINEABLE lwgrrsWorkGroups #-}
{-# DEPRECATED workGroups "Use generic-lens or generic-optics with 'workGroups' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
lwgrrsResponseStatus :: Lens.Lens' ListWorkGroupsResponse Core.Int
lwgrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE lwgrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
