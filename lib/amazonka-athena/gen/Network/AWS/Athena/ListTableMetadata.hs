{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListTableMetadata
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the metadata for the tables in the specified data catalog database.
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListTableMetadata
  ( -- * Creating a request
    ListTableMetadata (..),
    mkListTableMetadata,

    -- ** Request lenses
    ltmNextToken,
    ltmCatalogName,
    ltmExpression,
    ltmDatabaseName,
    ltmMaxResults,

    -- * Destructuring the response
    ListTableMetadataResponse (..),
    mkListTableMetadataResponse,

    -- ** Response lenses
    ltmrsNextToken,
    ltmrsTableMetadataList,
    ltmrsResponseStatus,
  )
where

import Network.AWS.Athena.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Page
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkListTableMetadata' smart constructor.
data ListTableMetadata = ListTableMetadata'
  { -- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    nextToken :: Lude.Maybe Lude.Text,
    -- | The name of the data catalog for which table metadata should be returned.
    catalogName :: Lude.Text,
    -- | A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
    expression :: Lude.Maybe Lude.Text,
    -- | The name of the database for which table metadata should be returned.
    databaseName :: Lude.Text,
    -- | Specifies the maximum number of results to return.
    maxResults :: Lude.Maybe Lude.Natural
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListTableMetadata' with the minimum fields required to make a request.
--
-- * 'nextToken' - A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
-- * 'catalogName' - The name of the data catalog for which table metadata should be returned.
-- * 'expression' - A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
-- * 'databaseName' - The name of the database for which table metadata should be returned.
-- * 'maxResults' - Specifies the maximum number of results to return.
mkListTableMetadata ::
  -- | 'catalogName'
  Lude.Text ->
  -- | 'databaseName'
  Lude.Text ->
  ListTableMetadata
mkListTableMetadata pCatalogName_ pDatabaseName_ =
  ListTableMetadata'
    { nextToken = Lude.Nothing,
      catalogName = pCatalogName_,
      expression = Lude.Nothing,
      databaseName = pDatabaseName_,
      maxResults = Lude.Nothing
    }

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ltmNextToken :: Lens.Lens' ListTableMetadata (Lude.Maybe Lude.Text)
ltmNextToken = Lens.lens (nextToken :: ListTableMetadata -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListTableMetadata)
{-# DEPRECATED ltmNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | The name of the data catalog for which table metadata should be returned.
--
-- /Note:/ Consider using 'catalogName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ltmCatalogName :: Lens.Lens' ListTableMetadata Lude.Text
ltmCatalogName = Lens.lens (catalogName :: ListTableMetadata -> Lude.Text) (\s a -> s {catalogName = a} :: ListTableMetadata)
{-# DEPRECATED ltmCatalogName "Use generic-lens or generic-optics with 'catalogName' instead." #-}

-- | A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
--
-- /Note:/ Consider using 'expression' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ltmExpression :: Lens.Lens' ListTableMetadata (Lude.Maybe Lude.Text)
ltmExpression = Lens.lens (expression :: ListTableMetadata -> Lude.Maybe Lude.Text) (\s a -> s {expression = a} :: ListTableMetadata)
{-# DEPRECATED ltmExpression "Use generic-lens or generic-optics with 'expression' instead." #-}

-- | The name of the database for which table metadata should be returned.
--
-- /Note:/ Consider using 'databaseName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ltmDatabaseName :: Lens.Lens' ListTableMetadata Lude.Text
ltmDatabaseName = Lens.lens (databaseName :: ListTableMetadata -> Lude.Text) (\s a -> s {databaseName = a} :: ListTableMetadata)
{-# DEPRECATED ltmDatabaseName "Use generic-lens or generic-optics with 'databaseName' instead." #-}

-- | Specifies the maximum number of results to return.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ltmMaxResults :: Lens.Lens' ListTableMetadata (Lude.Maybe Lude.Natural)
ltmMaxResults = Lens.lens (maxResults :: ListTableMetadata -> Lude.Maybe Lude.Natural) (\s a -> s {maxResults = a} :: ListTableMetadata)
{-# DEPRECATED ltmMaxResults "Use generic-lens or generic-optics with 'maxResults' instead." #-}

instance Page.AWSPager ListTableMetadata where
  page rq rs
    | Page.stop (rs Lens.^. ltmrsNextToken) = Lude.Nothing
    | Page.stop (rs Lens.^. ltmrsTableMetadataList) = Lude.Nothing
    | Lude.otherwise =
      Lude.Just Lude.$
        rq
          Lude.& ltmNextToken Lens..~ rs Lens.^. ltmrsNextToken

instance Lude.AWSRequest ListTableMetadata where
  type Rs ListTableMetadata = ListTableMetadataResponse
  request = Req.postJSON athenaService
  response =
    Res.receiveJSON
      ( \s h x ->
          ListTableMetadataResponse'
            Lude.<$> (x Lude..?> "NextToken")
            Lude.<*> (x Lude..?> "TableMetadataList" Lude..!@ Lude.mempty)
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders ListTableMetadata where
  toHeaders =
    Lude.const
      ( Lude.mconcat
          [ "X-Amz-Target"
              Lude.=# ("AmazonAthena.ListTableMetadata" :: Lude.ByteString),
            "Content-Type"
              Lude.=# ("application/x-amz-json-1.1" :: Lude.ByteString)
          ]
      )

instance Lude.ToJSON ListTableMetadata where
  toJSON ListTableMetadata' {..} =
    Lude.object
      ( Lude.catMaybes
          [ ("NextToken" Lude..=) Lude.<$> nextToken,
            Lude.Just ("CatalogName" Lude..= catalogName),
            ("Expression" Lude..=) Lude.<$> expression,
            Lude.Just ("DatabaseName" Lude..= databaseName),
            ("MaxResults" Lude..=) Lude.<$> maxResults
          ]
      )

instance Lude.ToPath ListTableMetadata where
  toPath = Lude.const "/"

instance Lude.ToQuery ListTableMetadata where
  toQuery = Lude.const Lude.mempty

-- | /See:/ 'mkListTableMetadataResponse' smart constructor.
data ListTableMetadataResponse = ListTableMetadataResponse'
  { -- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    nextToken :: Lude.Maybe Lude.Text,
    -- | A list of table metadata.
    tableMetadataList :: Lude.Maybe [TableMetadata],
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'ListTableMetadataResponse' with the minimum fields required to make a request.
--
-- * 'nextToken' - A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
-- * 'tableMetadataList' - A list of table metadata.
-- * 'responseStatus' - The response status code.
mkListTableMetadataResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  ListTableMetadataResponse
mkListTableMetadataResponse pResponseStatus_ =
  ListTableMetadataResponse'
    { nextToken = Lude.Nothing,
      tableMetadataList = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ltmrsNextToken :: Lens.Lens' ListTableMetadataResponse (Lude.Maybe Lude.Text)
ltmrsNextToken = Lens.lens (nextToken :: ListTableMetadataResponse -> Lude.Maybe Lude.Text) (\s a -> s {nextToken = a} :: ListTableMetadataResponse)
{-# DEPRECATED ltmrsNextToken "Use generic-lens or generic-optics with 'nextToken' instead." #-}

-- | A list of table metadata.
--
-- /Note:/ Consider using 'tableMetadataList' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ltmrsTableMetadataList :: Lens.Lens' ListTableMetadataResponse (Lude.Maybe [TableMetadata])
ltmrsTableMetadataList = Lens.lens (tableMetadataList :: ListTableMetadataResponse -> Lude.Maybe [TableMetadata]) (\s a -> s {tableMetadataList = a} :: ListTableMetadataResponse)
{-# DEPRECATED ltmrsTableMetadataList "Use generic-lens or generic-optics with 'tableMetadataList' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ltmrsResponseStatus :: Lens.Lens' ListTableMetadataResponse Lude.Int
ltmrsResponseStatus = Lens.lens (responseStatus :: ListTableMetadataResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: ListTableMetadataResponse)
{-# DEPRECATED ltmrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
