{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -fno-warn-deprecations   #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListDataCatalogs
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the data catalogs in the current AWS account.
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListDataCatalogs
    (
    -- * Creating a request
      ListDataCatalogs (..)
    , mkListDataCatalogs
    -- ** Request lenses
    , ldcMaxResults
    , ldcNextToken

    -- * Destructuring the response
    , ListDataCatalogsResponse (..)
    , mkListDataCatalogsResponse
    -- ** Response lenses
    , ldcrrsDataCatalogsSummary
    , ldcrrsNextToken
    , ldcrrsResponseStatus
    ) where

import qualified Network.AWS.Athena.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Pager
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkListDataCatalogs' smart constructor.
data ListDataCatalogs = ListDataCatalogs'
  { maxResults :: Core.Maybe Core.Natural
    -- ^ Specifies the maximum number of data catalogs to return.
  , nextToken :: Core.Maybe Types.Token
    -- ^ A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ListDataCatalogs' value with any optional fields omitted.
mkListDataCatalogs
    :: ListDataCatalogs
mkListDataCatalogs
  = ListDataCatalogs'{maxResults = Core.Nothing,
                      nextToken = Core.Nothing}

-- | Specifies the maximum number of data catalogs to return.
--
-- /Note:/ Consider using 'maxResults' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldcMaxResults :: Lens.Lens' ListDataCatalogs (Core.Maybe Core.Natural)
ldcMaxResults = Lens.field @"maxResults"
{-# INLINEABLE ldcMaxResults #-}
{-# DEPRECATED maxResults "Use generic-lens or generic-optics with 'maxResults' instead"  #-}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldcNextToken :: Lens.Lens' ListDataCatalogs (Core.Maybe Types.Token)
ldcNextToken = Lens.field @"nextToken"
{-# INLINEABLE ldcNextToken #-}
{-# DEPRECATED nextToken "Use generic-lens or generic-optics with 'nextToken' instead"  #-}

instance Core.ToQuery ListDataCatalogs where
        toQuery _ = Core.pure Core.mempty

instance Core.ToHeaders ListDataCatalogs where
        toHeaders ListDataCatalogs{..}
          = Core.pure ("X-Amz-Target", "AmazonAthena.ListDataCatalogs")
              Core.<> Core.pure ("Content-Type", "application/x-amz-json-1.1")

instance Core.FromJSON ListDataCatalogs where
        toJSON ListDataCatalogs{..}
          = Core.object
              (Core.catMaybes
                 [("MaxResults" Core..=) Core.<$> maxResults,
                  ("NextToken" Core..=) Core.<$> nextToken])

instance Core.AWSRequest ListDataCatalogs where
        type Rs ListDataCatalogs = ListDataCatalogsResponse
        toRequest x@Core.Request{..}
          = Core.Request{Core._rqService = Types.mkServiceConfig,
                         Core._rqMethod = Request.POST, Core._rqPath = "/",
                         Core._rqQuery = Core.toQuery x, Core._rqHeaders = Core.toHeaders x,
                         Core._rqBody = Core.toJSONBody x}
        
        {-# INLINE toRequest #-}
        parseResponse
          = Response.receiveJSON
              (\ s h x ->
                 ListDataCatalogsResponse' Core.<$>
                   (x Core..:? "DataCatalogsSummary") Core.<*> x Core..:? "NextToken"
                     Core.<*> Core.pure (Core.fromEnum s))
        
        {-# INLINE parseResponse #-}

instance Pager.AWSPager ListDataCatalogs where
        page rq rs
          | Pager.stop (rs Lens.^. Lens.field @"nextToken") = Core.Nothing
          | Pager.stop
              (rs Lens.^? Lens.field @"dataCatalogsSummary" Core.. Lens._Just)
            = Core.Nothing
          | Core.otherwise =
            Core.Just
              (rq Core.&
                 Lens.field @"nextToken" Lens..~ rs Lens.^. Lens.field @"nextToken")

-- | /See:/ 'mkListDataCatalogsResponse' smart constructor.
data ListDataCatalogsResponse = ListDataCatalogsResponse'
  { dataCatalogsSummary :: Core.Maybe [Types.DataCatalogSummary]
    -- ^ A summary list of data catalogs.
  , nextToken :: Core.Maybe Types.Token
    -- ^ A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
  , responseStatus :: Core.Int
    -- ^ The response status code.
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'ListDataCatalogsResponse' value with any optional fields omitted.
mkListDataCatalogsResponse
    :: Core.Int -- ^ 'responseStatus'
    -> ListDataCatalogsResponse
mkListDataCatalogsResponse responseStatus
  = ListDataCatalogsResponse'{dataCatalogsSummary = Core.Nothing,
                              nextToken = Core.Nothing, responseStatus}

-- | A summary list of data catalogs.
--
-- /Note:/ Consider using 'dataCatalogsSummary' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldcrrsDataCatalogsSummary :: Lens.Lens' ListDataCatalogsResponse (Core.Maybe [Types.DataCatalogSummary])
ldcrrsDataCatalogsSummary = Lens.field @"dataCatalogsSummary"
{-# INLINEABLE ldcrrsDataCatalogsSummary #-}
{-# DEPRECATED dataCatalogsSummary "Use generic-lens or generic-optics with 'dataCatalogsSummary' instead"  #-}

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- /Note:/ Consider using 'nextToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldcrrsNextToken :: Lens.Lens' ListDataCatalogsResponse (Core.Maybe Types.Token)
ldcrrsNextToken = Lens.field @"nextToken"
{-# INLINEABLE ldcrrsNextToken #-}
{-# DEPRECATED nextToken "Use generic-lens or generic-optics with 'nextToken' instead"  #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
ldcrrsResponseStatus :: Lens.Lens' ListDataCatalogsResponse Core.Int
ldcrrsResponseStatus = Lens.field @"responseStatus"
{-# INLINEABLE ldcrrsResponseStatus #-}
{-# DEPRECATED responseStatus "Use generic-lens or generic-optics with 'responseStatus' instead"  #-}
