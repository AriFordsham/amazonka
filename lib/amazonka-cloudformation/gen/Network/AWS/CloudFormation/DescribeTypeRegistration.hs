{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudFormation.DescribeTypeRegistration
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns information about a type's registration, including its current status and type and version identifiers.
--
-- When you initiate a registration request using @'RegisterType' @ , you can then use @'DescribeTypeRegistration' @ to monitor the progress of that registration request.
-- Once the registration request has completed, use @'DescribeType' @ to return detailed informaiton about a type.
module Network.AWS.CloudFormation.DescribeTypeRegistration
  ( -- * Creating a request
    DescribeTypeRegistration (..),
    mkDescribeTypeRegistration,

    -- ** Request lenses
    dtrRegistrationToken,

    -- * Destructuring the response
    DescribeTypeRegistrationResponse (..),
    mkDescribeTypeRegistrationResponse,

    -- ** Response lenses
    dtrrsTypeVersionARN,
    dtrrsProgressStatus,
    dtrrsTypeARN,
    dtrrsDescription,
    dtrrsResponseStatus,
  )
where

import Network.AWS.CloudFormation.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | /See:/ 'mkDescribeTypeRegistration' smart constructor.
newtype DescribeTypeRegistration = DescribeTypeRegistration'
  { -- | The identifier for this registration request.
    --
    -- This registration token is generated by CloudFormation when you initiate a registration request using @'RegisterType' @ .
    registrationToken :: Lude.Text
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving newtype (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'DescribeTypeRegistration' with the minimum fields required to make a request.
--
-- * 'registrationToken' - The identifier for this registration request.
--
-- This registration token is generated by CloudFormation when you initiate a registration request using @'RegisterType' @ .
mkDescribeTypeRegistration ::
  -- | 'registrationToken'
  Lude.Text ->
  DescribeTypeRegistration
mkDescribeTypeRegistration pRegistrationToken_ =
  DescribeTypeRegistration'
    { registrationToken =
        pRegistrationToken_
    }

-- | The identifier for this registration request.
--
-- This registration token is generated by CloudFormation when you initiate a registration request using @'RegisterType' @ .
--
-- /Note:/ Consider using 'registrationToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrRegistrationToken :: Lens.Lens' DescribeTypeRegistration Lude.Text
dtrRegistrationToken = Lens.lens (registrationToken :: DescribeTypeRegistration -> Lude.Text) (\s a -> s {registrationToken = a} :: DescribeTypeRegistration)
{-# DEPRECATED dtrRegistrationToken "Use generic-lens or generic-optics with 'registrationToken' instead." #-}

instance Lude.AWSRequest DescribeTypeRegistration where
  type Rs DescribeTypeRegistration = DescribeTypeRegistrationResponse
  request = Req.postQuery cloudFormationService
  response =
    Res.receiveXMLWrapper
      "DescribeTypeRegistrationResult"
      ( \s h x ->
          DescribeTypeRegistrationResponse'
            Lude.<$> (x Lude..@? "TypeVersionArn")
            Lude.<*> (x Lude..@? "ProgressStatus")
            Lude.<*> (x Lude..@? "TypeArn")
            Lude.<*> (x Lude..@? "Description")
            Lude.<*> (Lude.pure (Lude.fromEnum s))
      )

instance Lude.ToHeaders DescribeTypeRegistration where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath DescribeTypeRegistration where
  toPath = Lude.const "/"

instance Lude.ToQuery DescribeTypeRegistration where
  toQuery DescribeTypeRegistration' {..} =
    Lude.mconcat
      [ "Action" Lude.=: ("DescribeTypeRegistration" :: Lude.ByteString),
        "Version" Lude.=: ("2010-05-15" :: Lude.ByteString),
        "RegistrationToken" Lude.=: registrationToken
      ]

-- | /See:/ 'mkDescribeTypeRegistrationResponse' smart constructor.
data DescribeTypeRegistrationResponse = DescribeTypeRegistrationResponse'
  { -- | The Amazon Resource Name (ARN) of this specific version of the type being registered.
    --
    -- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
    typeVersionARN :: Lude.Maybe Lude.Text,
    -- | The current status of the type registration request.
    progressStatus :: Lude.Maybe RegistrationStatus,
    -- | The Amazon Resource Name (ARN) of the type being registered.
    --
    -- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
    typeARN :: Lude.Maybe Lude.Text,
    -- | The description of the type registration request.
    description :: Lude.Maybe Lude.Text,
    -- | The response status code.
    responseStatus :: Lude.Int
  }
  deriving stock (Lude.Eq, Lude.Ord, Lude.Read, Lude.Show, Lude.Generic)
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'DescribeTypeRegistrationResponse' with the minimum fields required to make a request.
--
-- * 'typeVersionARN' - The Amazon Resource Name (ARN) of this specific version of the type being registered.
--
-- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
-- * 'progressStatus' - The current status of the type registration request.
-- * 'typeARN' - The Amazon Resource Name (ARN) of the type being registered.
--
-- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
-- * 'description' - The description of the type registration request.
-- * 'responseStatus' - The response status code.
mkDescribeTypeRegistrationResponse ::
  -- | 'responseStatus'
  Lude.Int ->
  DescribeTypeRegistrationResponse
mkDescribeTypeRegistrationResponse pResponseStatus_ =
  DescribeTypeRegistrationResponse'
    { typeVersionARN = Lude.Nothing,
      progressStatus = Lude.Nothing,
      typeARN = Lude.Nothing,
      description = Lude.Nothing,
      responseStatus = pResponseStatus_
    }

-- | The Amazon Resource Name (ARN) of this specific version of the type being registered.
--
-- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
--
-- /Note:/ Consider using 'typeVersionARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrsTypeVersionARN :: Lens.Lens' DescribeTypeRegistrationResponse (Lude.Maybe Lude.Text)
dtrrsTypeVersionARN = Lens.lens (typeVersionARN :: DescribeTypeRegistrationResponse -> Lude.Maybe Lude.Text) (\s a -> s {typeVersionARN = a} :: DescribeTypeRegistrationResponse)
{-# DEPRECATED dtrrsTypeVersionARN "Use generic-lens or generic-optics with 'typeVersionARN' instead." #-}

-- | The current status of the type registration request.
--
-- /Note:/ Consider using 'progressStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrsProgressStatus :: Lens.Lens' DescribeTypeRegistrationResponse (Lude.Maybe RegistrationStatus)
dtrrsProgressStatus = Lens.lens (progressStatus :: DescribeTypeRegistrationResponse -> Lude.Maybe RegistrationStatus) (\s a -> s {progressStatus = a} :: DescribeTypeRegistrationResponse)
{-# DEPRECATED dtrrsProgressStatus "Use generic-lens or generic-optics with 'progressStatus' instead." #-}

-- | The Amazon Resource Name (ARN) of the type being registered.
--
-- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
--
-- /Note:/ Consider using 'typeARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrsTypeARN :: Lens.Lens' DescribeTypeRegistrationResponse (Lude.Maybe Lude.Text)
dtrrsTypeARN = Lens.lens (typeARN :: DescribeTypeRegistrationResponse -> Lude.Maybe Lude.Text) (\s a -> s {typeARN = a} :: DescribeTypeRegistrationResponse)
{-# DEPRECATED dtrrsTypeARN "Use generic-lens or generic-optics with 'typeARN' instead." #-}

-- | The description of the type registration request.
--
-- /Note:/ Consider using 'description' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrsDescription :: Lens.Lens' DescribeTypeRegistrationResponse (Lude.Maybe Lude.Text)
dtrrsDescription = Lens.lens (description :: DescribeTypeRegistrationResponse -> Lude.Maybe Lude.Text) (\s a -> s {description = a} :: DescribeTypeRegistrationResponse)
{-# DEPRECATED dtrrsDescription "Use generic-lens or generic-optics with 'description' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrsResponseStatus :: Lens.Lens' DescribeTypeRegistrationResponse Lude.Int
dtrrsResponseStatus = Lens.lens (responseStatus :: DescribeTypeRegistrationResponse -> Lude.Int) (\s a -> s {responseStatus = a} :: DescribeTypeRegistrationResponse)
{-# DEPRECATED dtrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
