{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudFormation.DescribeTypeRegistration
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Returns information about a type's registration, including its current status and type and version identifiers.
--
-- When you initiate a registration request using @'RegisterType' @ , you can then use @'DescribeTypeRegistration' @ to monitor the progress of that registration request.
-- Once the registration request has completed, use @'DescribeType' @ to return detailed informaiton about a type.
module Network.AWS.CloudFormation.DescribeTypeRegistration
  ( -- * Creating a request
    DescribeTypeRegistration (..),
    mkDescribeTypeRegistration,

    -- ** Request lenses
    dtrRegistrationToken,

    -- * Destructuring the response
    DescribeTypeRegistrationResponse (..),
    mkDescribeTypeRegistrationResponse,

    -- ** Response lenses
    dtrrrsDescription,
    dtrrrsProgressStatus,
    dtrrrsTypeArn,
    dtrrrsTypeVersionArn,
    dtrrrsResponseStatus,
  )
where

import qualified Network.AWS.CloudFormation.Types as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'mkDescribeTypeRegistration' smart constructor.
newtype DescribeTypeRegistration = DescribeTypeRegistration'
  { -- | The identifier for this registration request.
    --
    -- This registration token is generated by CloudFormation when you initiate a registration request using @'RegisterType' @ .
    registrationToken :: Types.RegistrationToken
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving newtype (Core.Hashable, Core.NFData)

-- | Creates a 'DescribeTypeRegistration' value with any optional fields omitted.
mkDescribeTypeRegistration ::
  -- | 'registrationToken'
  Types.RegistrationToken ->
  DescribeTypeRegistration
mkDescribeTypeRegistration registrationToken =
  DescribeTypeRegistration' {registrationToken}

-- | The identifier for this registration request.
--
-- This registration token is generated by CloudFormation when you initiate a registration request using @'RegisterType' @ .
--
-- /Note:/ Consider using 'registrationToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrRegistrationToken :: Lens.Lens' DescribeTypeRegistration Types.RegistrationToken
dtrRegistrationToken = Lens.field @"registrationToken"
{-# DEPRECATED dtrRegistrationToken "Use generic-lens or generic-optics with 'registrationToken' instead." #-}

instance Core.AWSRequest DescribeTypeRegistration where
  type Rs DescribeTypeRegistration = DescribeTypeRegistrationResponse
  request x@Core.Request {..} =
    Core.Request
      { Core._rqService = Types.mkServiceConfig,
        Core._rqMethod = Request.POST,
        Core._rqPath = Core.rawPath "/",
        Core._rqQuery = Core.mempty,
        Core._rqHeaders =
          Core.pure
            ( "Content-Type",
              "application/x-www-form-urlencoded; charset=utf-8"
            ),
        Core._rqBody =
          Core.toFormBody
            ( Core.pure ("Action", "DescribeTypeRegistration")
                Core.<> (Core.pure ("Version", "2010-05-15"))
                Core.<> (Core.toQueryValue "RegistrationToken" registrationToken)
            )
      }
  response =
    Response.receiveXMLWrapper
      "DescribeTypeRegistrationResult"
      ( \s h x ->
          DescribeTypeRegistrationResponse'
            Core.<$> (x Core..@? "Description")
            Core.<*> (x Core..@? "ProgressStatus")
            Core.<*> (x Core..@? "TypeArn")
            Core.<*> (x Core..@? "TypeVersionArn")
            Core.<*> (Core.pure (Core.fromEnum s))
      )

-- | /See:/ 'mkDescribeTypeRegistrationResponse' smart constructor.
data DescribeTypeRegistrationResponse = DescribeTypeRegistrationResponse'
  { -- | The description of the type registration request.
    description :: Core.Maybe Types.Description,
    -- | The current status of the type registration request.
    progressStatus :: Core.Maybe Types.RegistrationStatus,
    -- | The Amazon Resource Name (ARN) of the type being registered.
    --
    -- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
    typeArn :: Core.Maybe Types.TypeArn,
    -- | The Amazon Resource Name (ARN) of this specific version of the type being registered.
    --
    -- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
    typeVersionArn :: Core.Maybe Types.TypeVersionArn,
    -- | The response status code.
    responseStatus :: Core.Int
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.Hashable, Core.NFData)

-- | Creates a 'DescribeTypeRegistrationResponse' value with any optional fields omitted.
mkDescribeTypeRegistrationResponse ::
  -- | 'responseStatus'
  Core.Int ->
  DescribeTypeRegistrationResponse
mkDescribeTypeRegistrationResponse responseStatus =
  DescribeTypeRegistrationResponse'
    { description = Core.Nothing,
      progressStatus = Core.Nothing,
      typeArn = Core.Nothing,
      typeVersionArn = Core.Nothing,
      responseStatus
    }

-- | The description of the type registration request.
--
-- /Note:/ Consider using 'description' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrrsDescription :: Lens.Lens' DescribeTypeRegistrationResponse (Core.Maybe Types.Description)
dtrrrsDescription = Lens.field @"description"
{-# DEPRECATED dtrrrsDescription "Use generic-lens or generic-optics with 'description' instead." #-}

-- | The current status of the type registration request.
--
-- /Note:/ Consider using 'progressStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrrsProgressStatus :: Lens.Lens' DescribeTypeRegistrationResponse (Core.Maybe Types.RegistrationStatus)
dtrrrsProgressStatus = Lens.field @"progressStatus"
{-# DEPRECATED dtrrrsProgressStatus "Use generic-lens or generic-optics with 'progressStatus' instead." #-}

-- | The Amazon Resource Name (ARN) of the type being registered.
--
-- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
--
-- /Note:/ Consider using 'typeArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrrsTypeArn :: Lens.Lens' DescribeTypeRegistrationResponse (Core.Maybe Types.TypeArn)
dtrrrsTypeArn = Lens.field @"typeArn"
{-# DEPRECATED dtrrrsTypeArn "Use generic-lens or generic-optics with 'typeArn' instead." #-}

-- | The Amazon Resource Name (ARN) of this specific version of the type being registered.
--
-- For registration requests with a @ProgressStatus@ of other than @COMPLETE@ , this will be @null@ .
--
-- /Note:/ Consider using 'typeVersionArn' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrrsTypeVersionArn :: Lens.Lens' DescribeTypeRegistrationResponse (Core.Maybe Types.TypeVersionArn)
dtrrrsTypeVersionArn = Lens.field @"typeVersionArn"
{-# DEPRECATED dtrrrsTypeVersionArn "Use generic-lens or generic-optics with 'typeVersionArn' instead." #-}

-- | The response status code.
--
-- /Note:/ Consider using 'responseStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dtrrrsResponseStatus :: Lens.Lens' DescribeTypeRegistrationResponse Core.Int
dtrrrsResponseStatus = Lens.field @"responseStatus"
{-# DEPRECATED dtrrrsResponseStatus "Use generic-lens or generic-optics with 'responseStatus' instead." #-}
