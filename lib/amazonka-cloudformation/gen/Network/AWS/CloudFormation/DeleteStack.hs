{-# OPTIONS_GHC -fno-warn-deprecations #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudFormation.DeleteStack
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks do not show up in the 'DescribeStacks' API if the deletion has been completed successfully.
module Network.AWS.CloudFormation.DeleteStack
  ( -- * Creating a request
    DeleteStack (..),
    mkDeleteStack,

    -- ** Request lenses
    dsRetainResources,
    dsClientRequestToken,
    dsRoleARN,
    dsStackName,

    -- * Destructuring the response
    DeleteStackResponse (..),
    mkDeleteStackResponse,
  )
where

import Network.AWS.CloudFormation.Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude
import qualified Network.AWS.Request as Req
import qualified Network.AWS.Response as Res

-- | The input for 'DeleteStack' action.
--
-- /See:/ 'mkDeleteStack' smart constructor.
data DeleteStack = DeleteStack'
  { retainResources ::
      Lude.Maybe [Lude.Text],
    clientRequestToken :: Lude.Maybe Lude.Text,
    roleARN :: Lude.Maybe Lude.Text,
    stackName :: Lude.Text
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'DeleteStack' with the minimum fields required to make a request.
--
-- * 'clientRequestToken' - A unique identifier for this @DeleteStack@ request. Specify this token if you plan to retry requests so that AWS CloudFormation knows that you're not attempting to delete a stack with the same name. You might retry @DeleteStack@ requests to ensure that AWS CloudFormation successfully received them.
--
-- All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a @CreateStack@ operation with the token @token1@ , then all the @StackEvents@ generated by that operation will have @ClientRequestToken@ set as @token1@ .
-- In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format /Console-StackOperation-ID/ , which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@ .
-- * 'retainResources' - For stacks in the @DELETE_FAILED@ state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, AWS CloudFormation deletes the stack but does not delete the retained resources.
--
-- Retaining resources is useful when you cannot delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.
-- * 'roleARN' - The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to delete the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf.
--
-- If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials.
-- * 'stackName' - The name or the unique stack ID that is associated with the stack.
mkDeleteStack ::
  -- | 'stackName'
  Lude.Text ->
  DeleteStack
mkDeleteStack pStackName_ =
  DeleteStack'
    { retainResources = Lude.Nothing,
      clientRequestToken = Lude.Nothing,
      roleARN = Lude.Nothing,
      stackName = pStackName_
    }

-- | For stacks in the @DELETE_FAILED@ state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, AWS CloudFormation deletes the stack but does not delete the retained resources.
--
-- Retaining resources is useful when you cannot delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.
--
-- /Note:/ Consider using 'retainResources' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dsRetainResources :: Lens.Lens' DeleteStack (Lude.Maybe [Lude.Text])
dsRetainResources = Lens.lens (retainResources :: DeleteStack -> Lude.Maybe [Lude.Text]) (\s a -> s {retainResources = a} :: DeleteStack)
{-# DEPRECATED dsRetainResources "Use generic-lens or generic-optics with 'retainResources' instead." #-}

-- | A unique identifier for this @DeleteStack@ request. Specify this token if you plan to retry requests so that AWS CloudFormation knows that you're not attempting to delete a stack with the same name. You might retry @DeleteStack@ requests to ensure that AWS CloudFormation successfully received them.
--
-- All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a @CreateStack@ operation with the token @token1@ , then all the @StackEvents@ generated by that operation will have @ClientRequestToken@ set as @token1@ .
-- In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format /Console-StackOperation-ID/ , which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@ .
--
-- /Note:/ Consider using 'clientRequestToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dsClientRequestToken :: Lens.Lens' DeleteStack (Lude.Maybe Lude.Text)
dsClientRequestToken = Lens.lens (clientRequestToken :: DeleteStack -> Lude.Maybe Lude.Text) (\s a -> s {clientRequestToken = a} :: DeleteStack)
{-# DEPRECATED dsClientRequestToken "Use generic-lens or generic-optics with 'clientRequestToken' instead." #-}

-- | The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to delete the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf.
--
-- If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials.
--
-- /Note:/ Consider using 'roleARN' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dsRoleARN :: Lens.Lens' DeleteStack (Lude.Maybe Lude.Text)
dsRoleARN = Lens.lens (roleARN :: DeleteStack -> Lude.Maybe Lude.Text) (\s a -> s {roleARN = a} :: DeleteStack)
{-# DEPRECATED dsRoleARN "Use generic-lens or generic-optics with 'roleARN' instead." #-}

-- | The name or the unique stack ID that is associated with the stack.
--
-- /Note:/ Consider using 'stackName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
dsStackName :: Lens.Lens' DeleteStack Lude.Text
dsStackName = Lens.lens (stackName :: DeleteStack -> Lude.Text) (\s a -> s {stackName = a} :: DeleteStack)
{-# DEPRECATED dsStackName "Use generic-lens or generic-optics with 'stackName' instead." #-}

instance Lude.AWSRequest DeleteStack where
  type Rs DeleteStack = DeleteStackResponse
  request = Req.postQuery cloudFormationService
  response = Res.receiveNull DeleteStackResponse'

instance Lude.ToHeaders DeleteStack where
  toHeaders = Lude.const Lude.mempty

instance Lude.ToPath DeleteStack where
  toPath = Lude.const "/"

instance Lude.ToQuery DeleteStack where
  toQuery DeleteStack' {..} =
    Lude.mconcat
      [ "Action" Lude.=: ("DeleteStack" :: Lude.ByteString),
        "Version" Lude.=: ("2010-05-15" :: Lude.ByteString),
        "RetainResources"
          Lude.=: Lude.toQuery (Lude.toQueryList "member" Lude.<$> retainResources),
        "ClientRequestToken" Lude.=: clientRequestToken,
        "RoleARN" Lude.=: roleARN,
        "StackName" Lude.=: stackName
      ]

-- | /See:/ 'mkDeleteStackResponse' smart constructor.
data DeleteStackResponse = DeleteStackResponse'
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'DeleteStackResponse' with the minimum fields required to make a request.
mkDeleteStackResponse ::
  DeleteStackResponse
mkDeleteStackResponse = DeleteStackResponse'
