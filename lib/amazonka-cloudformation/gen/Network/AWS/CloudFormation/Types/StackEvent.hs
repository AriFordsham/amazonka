-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudFormation.Types.StackEvent
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.CloudFormation.Types.StackEvent
  ( StackEvent (..),

    -- * Smart constructor
    mkStackEvent,

    -- * Lenses
    seLogicalResourceId,
    sePhysicalResourceId,
    seResourceType,
    seResourceStatusReason,
    seResourceProperties,
    seResourceStatus,
    seClientRequestToken,
    seStackId,
    seEventId,
    seStackName,
    seTimestamp,
  )
where

import Network.AWS.CloudFormation.Types.ResourceStatus
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Lude

-- | The StackEvent data type.
--
-- /See:/ 'mkStackEvent' smart constructor.
data StackEvent = StackEvent'
  { logicalResourceId ::
      Lude.Maybe Lude.Text,
    physicalResourceId :: Lude.Maybe Lude.Text,
    resourceType :: Lude.Maybe Lude.Text,
    resourceStatusReason :: Lude.Maybe Lude.Text,
    resourceProperties :: Lude.Maybe Lude.Text,
    resourceStatus :: Lude.Maybe ResourceStatus,
    clientRequestToken :: Lude.Maybe Lude.Text,
    stackId :: Lude.Text,
    eventId :: Lude.Text,
    stackName :: Lude.Text,
    timestamp :: Lude.ISO8601
  }
  deriving stock
    ( Lude.Eq,
      Lude.Ord,
      Lude.Read,
      Lude.Show,
      Lude.Generic
    )
  deriving anyclass (Lude.Hashable, Lude.NFData)

-- | Creates a value of 'StackEvent' with the minimum fields required to make a request.
--
-- * 'clientRequestToken' - The token passed to the operation that generated this event.
--
-- All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a @CreateStack@ operation with the token @token1@ , then all the @StackEvents@ generated by that operation will have @ClientRequestToken@ set as @token1@ .
-- In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format /Console-StackOperation-ID/ , which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@ .
-- * 'eventId' - The unique ID of this event.
-- * 'logicalResourceId' - The logical name of the resource specified in the template.
-- * 'physicalResourceId' - The name or unique identifier associated with the physical instance of the resource.
-- * 'resourceProperties' - BLOB of the properties used to create the resource.
-- * 'resourceStatus' - Current status of the resource.
-- * 'resourceStatusReason' - Success/failure message associated with the resource.
-- * 'resourceType' - Type of resource. (For more information, go to <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html AWS Resource Types Reference> in the AWS CloudFormation User Guide.)
-- * 'stackId' - The unique ID name of the instance of the stack.
-- * 'stackName' - The name associated with a stack.
-- * 'timestamp' - Time the status was updated.
mkStackEvent ::
  -- | 'stackId'
  Lude.Text ->
  -- | 'eventId'
  Lude.Text ->
  -- | 'stackName'
  Lude.Text ->
  -- | 'timestamp'
  Lude.ISO8601 ->
  StackEvent
mkStackEvent pStackId_ pEventId_ pStackName_ pTimestamp_ =
  StackEvent'
    { logicalResourceId = Lude.Nothing,
      physicalResourceId = Lude.Nothing,
      resourceType = Lude.Nothing,
      resourceStatusReason = Lude.Nothing,
      resourceProperties = Lude.Nothing,
      resourceStatus = Lude.Nothing,
      clientRequestToken = Lude.Nothing,
      stackId = pStackId_,
      eventId = pEventId_,
      stackName = pStackName_,
      timestamp = pTimestamp_
    }

-- | The logical name of the resource specified in the template.
--
-- /Note:/ Consider using 'logicalResourceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seLogicalResourceId :: Lens.Lens' StackEvent (Lude.Maybe Lude.Text)
seLogicalResourceId = Lens.lens (logicalResourceId :: StackEvent -> Lude.Maybe Lude.Text) (\s a -> s {logicalResourceId = a} :: StackEvent)
{-# DEPRECATED seLogicalResourceId "Use generic-lens or generic-optics with 'logicalResourceId' instead." #-}

-- | The name or unique identifier associated with the physical instance of the resource.
--
-- /Note:/ Consider using 'physicalResourceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sePhysicalResourceId :: Lens.Lens' StackEvent (Lude.Maybe Lude.Text)
sePhysicalResourceId = Lens.lens (physicalResourceId :: StackEvent -> Lude.Maybe Lude.Text) (\s a -> s {physicalResourceId = a} :: StackEvent)
{-# DEPRECATED sePhysicalResourceId "Use generic-lens or generic-optics with 'physicalResourceId' instead." #-}

-- | Type of resource. (For more information, go to <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html AWS Resource Types Reference> in the AWS CloudFormation User Guide.)
--
-- /Note:/ Consider using 'resourceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seResourceType :: Lens.Lens' StackEvent (Lude.Maybe Lude.Text)
seResourceType = Lens.lens (resourceType :: StackEvent -> Lude.Maybe Lude.Text) (\s a -> s {resourceType = a} :: StackEvent)
{-# DEPRECATED seResourceType "Use generic-lens or generic-optics with 'resourceType' instead." #-}

-- | Success/failure message associated with the resource.
--
-- /Note:/ Consider using 'resourceStatusReason' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seResourceStatusReason :: Lens.Lens' StackEvent (Lude.Maybe Lude.Text)
seResourceStatusReason = Lens.lens (resourceStatusReason :: StackEvent -> Lude.Maybe Lude.Text) (\s a -> s {resourceStatusReason = a} :: StackEvent)
{-# DEPRECATED seResourceStatusReason "Use generic-lens or generic-optics with 'resourceStatusReason' instead." #-}

-- | BLOB of the properties used to create the resource.
--
-- /Note:/ Consider using 'resourceProperties' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seResourceProperties :: Lens.Lens' StackEvent (Lude.Maybe Lude.Text)
seResourceProperties = Lens.lens (resourceProperties :: StackEvent -> Lude.Maybe Lude.Text) (\s a -> s {resourceProperties = a} :: StackEvent)
{-# DEPRECATED seResourceProperties "Use generic-lens or generic-optics with 'resourceProperties' instead." #-}

-- | Current status of the resource.
--
-- /Note:/ Consider using 'resourceStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seResourceStatus :: Lens.Lens' StackEvent (Lude.Maybe ResourceStatus)
seResourceStatus = Lens.lens (resourceStatus :: StackEvent -> Lude.Maybe ResourceStatus) (\s a -> s {resourceStatus = a} :: StackEvent)
{-# DEPRECATED seResourceStatus "Use generic-lens or generic-optics with 'resourceStatus' instead." #-}

-- | The token passed to the operation that generated this event.
--
-- All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a @CreateStack@ operation with the token @token1@ , then all the @StackEvents@ generated by that operation will have @ClientRequestToken@ set as @token1@ .
-- In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format /Console-StackOperation-ID/ , which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@ .
--
-- /Note:/ Consider using 'clientRequestToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seClientRequestToken :: Lens.Lens' StackEvent (Lude.Maybe Lude.Text)
seClientRequestToken = Lens.lens (clientRequestToken :: StackEvent -> Lude.Maybe Lude.Text) (\s a -> s {clientRequestToken = a} :: StackEvent)
{-# DEPRECATED seClientRequestToken "Use generic-lens or generic-optics with 'clientRequestToken' instead." #-}

-- | The unique ID name of the instance of the stack.
--
-- /Note:/ Consider using 'stackId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seStackId :: Lens.Lens' StackEvent Lude.Text
seStackId = Lens.lens (stackId :: StackEvent -> Lude.Text) (\s a -> s {stackId = a} :: StackEvent)
{-# DEPRECATED seStackId "Use generic-lens or generic-optics with 'stackId' instead." #-}

-- | The unique ID of this event.
--
-- /Note:/ Consider using 'eventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seEventId :: Lens.Lens' StackEvent Lude.Text
seEventId = Lens.lens (eventId :: StackEvent -> Lude.Text) (\s a -> s {eventId = a} :: StackEvent)
{-# DEPRECATED seEventId "Use generic-lens or generic-optics with 'eventId' instead." #-}

-- | The name associated with a stack.
--
-- /Note:/ Consider using 'stackName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seStackName :: Lens.Lens' StackEvent Lude.Text
seStackName = Lens.lens (stackName :: StackEvent -> Lude.Text) (\s a -> s {stackName = a} :: StackEvent)
{-# DEPRECATED seStackName "Use generic-lens or generic-optics with 'stackName' instead." #-}

-- | Time the status was updated.
--
-- /Note:/ Consider using 'timestamp' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seTimestamp :: Lens.Lens' StackEvent Lude.ISO8601
seTimestamp = Lens.lens (timestamp :: StackEvent -> Lude.ISO8601) (\s a -> s {timestamp = a} :: StackEvent)
{-# DEPRECATED seTimestamp "Use generic-lens or generic-optics with 'timestamp' instead." #-}

instance Lude.FromXML StackEvent where
  parseXML x =
    StackEvent'
      Lude.<$> (x Lude..@? "LogicalResourceId")
      Lude.<*> (x Lude..@? "PhysicalResourceId")
      Lude.<*> (x Lude..@? "ResourceType")
      Lude.<*> (x Lude..@? "ResourceStatusReason")
      Lude.<*> (x Lude..@? "ResourceProperties")
      Lude.<*> (x Lude..@? "ResourceStatus")
      Lude.<*> (x Lude..@? "ClientRequestToken")
      Lude.<*> (x Lude..@ "StackId")
      Lude.<*> (x Lude..@ "EventId")
      Lude.<*> (x Lude..@ "StackName")
      Lude.<*> (x Lude..@ "Timestamp")
