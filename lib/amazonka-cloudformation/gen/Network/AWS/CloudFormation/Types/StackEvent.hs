{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.CloudFormation.Types.StackEvent
-- Copyright   : (c) 2013-2020 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Network.AWS.CloudFormation.Types.StackEvent
  ( StackEvent (..),

    -- * Smart constructor
    mkStackEvent,

    -- * Lenses
    seStackId,
    seEventId,
    seStackName,
    seTimestamp,
    seClientRequestToken,
    seLogicalResourceId,
    sePhysicalResourceId,
    seResourceProperties,
    seResourceStatus,
    seResourceStatusReason,
    seResourceType,
  )
where

import qualified Network.AWS.CloudFormation.Types.ClientRequestToken as Types
import qualified Network.AWS.CloudFormation.Types.EventId as Types
import qualified Network.AWS.CloudFormation.Types.LogicalResourceId as Types
import qualified Network.AWS.CloudFormation.Types.PhysicalResourceId as Types
import qualified Network.AWS.CloudFormation.Types.ResourceProperties as Types
import qualified Network.AWS.CloudFormation.Types.ResourceStatus as Types
import qualified Network.AWS.CloudFormation.Types.ResourceStatusReason as Types
import qualified Network.AWS.CloudFormation.Types.ResourceType as Types
import qualified Network.AWS.CloudFormation.Types.StackId as Types
import qualified Network.AWS.CloudFormation.Types.StackName as Types
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Prelude as Core

-- | The StackEvent data type.
--
-- /See:/ 'mkStackEvent' smart constructor.
data StackEvent = StackEvent'
  { -- | The unique ID name of the instance of the stack.
    stackId :: Types.StackId,
    -- | The unique ID of this event.
    eventId :: Types.EventId,
    -- | The name associated with a stack.
    stackName :: Types.StackName,
    -- | Time the status was updated.
    timestamp :: Core.UTCTime,
    -- | The token passed to the operation that generated this event.
    --
    -- All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a @CreateStack@ operation with the token @token1@ , then all the @StackEvents@ generated by that operation will have @ClientRequestToken@ set as @token1@ .
    -- In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format /Console-StackOperation-ID/ , which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@ .
    clientRequestToken :: Core.Maybe Types.ClientRequestToken,
    -- | The logical name of the resource specified in the template.
    logicalResourceId :: Core.Maybe Types.LogicalResourceId,
    -- | The name or unique identifier associated with the physical instance of the resource.
    physicalResourceId :: Core.Maybe Types.PhysicalResourceId,
    -- | BLOB of the properties used to create the resource.
    resourceProperties :: Core.Maybe Types.ResourceProperties,
    -- | Current status of the resource.
    resourceStatus :: Core.Maybe Types.ResourceStatus,
    -- | Success/failure message associated with the resource.
    resourceStatusReason :: Core.Maybe Types.ResourceStatusReason,
    -- | Type of resource. (For more information, go to <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html AWS Resource Types Reference> in the AWS CloudFormation User Guide.)
    resourceType :: Core.Maybe Types.ResourceType
  }
  deriving stock (Core.Eq, Core.Ord, Core.Read, Core.Show, Core.Generic)
  deriving anyclass (Core.NFData)

-- | Creates a 'StackEvent' value with any optional fields omitted.
mkStackEvent ::
  -- | 'stackId'
  Types.StackId ->
  -- | 'eventId'
  Types.EventId ->
  -- | 'stackName'
  Types.StackName ->
  -- | 'timestamp'
  Core.UTCTime ->
  StackEvent
mkStackEvent stackId eventId stackName timestamp =
  StackEvent'
    { stackId,
      eventId,
      stackName,
      timestamp,
      clientRequestToken = Core.Nothing,
      logicalResourceId = Core.Nothing,
      physicalResourceId = Core.Nothing,
      resourceProperties = Core.Nothing,
      resourceStatus = Core.Nothing,
      resourceStatusReason = Core.Nothing,
      resourceType = Core.Nothing
    }

-- | The unique ID name of the instance of the stack.
--
-- /Note:/ Consider using 'stackId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seStackId :: Lens.Lens' StackEvent Types.StackId
seStackId = Lens.field @"stackId"
{-# DEPRECATED seStackId "Use generic-lens or generic-optics with 'stackId' instead." #-}

-- | The unique ID of this event.
--
-- /Note:/ Consider using 'eventId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seEventId :: Lens.Lens' StackEvent Types.EventId
seEventId = Lens.field @"eventId"
{-# DEPRECATED seEventId "Use generic-lens or generic-optics with 'eventId' instead." #-}

-- | The name associated with a stack.
--
-- /Note:/ Consider using 'stackName' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seStackName :: Lens.Lens' StackEvent Types.StackName
seStackName = Lens.field @"stackName"
{-# DEPRECATED seStackName "Use generic-lens or generic-optics with 'stackName' instead." #-}

-- | Time the status was updated.
--
-- /Note:/ Consider using 'timestamp' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seTimestamp :: Lens.Lens' StackEvent Core.UTCTime
seTimestamp = Lens.field @"timestamp"
{-# DEPRECATED seTimestamp "Use generic-lens or generic-optics with 'timestamp' instead." #-}

-- | The token passed to the operation that generated this event.
--
-- All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a @CreateStack@ operation with the token @token1@ , then all the @StackEvents@ generated by that operation will have @ClientRequestToken@ set as @token1@ .
-- In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format /Console-StackOperation-ID/ , which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: @Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002@ .
--
-- /Note:/ Consider using 'clientRequestToken' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seClientRequestToken :: Lens.Lens' StackEvent (Core.Maybe Types.ClientRequestToken)
seClientRequestToken = Lens.field @"clientRequestToken"
{-# DEPRECATED seClientRequestToken "Use generic-lens or generic-optics with 'clientRequestToken' instead." #-}

-- | The logical name of the resource specified in the template.
--
-- /Note:/ Consider using 'logicalResourceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seLogicalResourceId :: Lens.Lens' StackEvent (Core.Maybe Types.LogicalResourceId)
seLogicalResourceId = Lens.field @"logicalResourceId"
{-# DEPRECATED seLogicalResourceId "Use generic-lens or generic-optics with 'logicalResourceId' instead." #-}

-- | The name or unique identifier associated with the physical instance of the resource.
--
-- /Note:/ Consider using 'physicalResourceId' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
sePhysicalResourceId :: Lens.Lens' StackEvent (Core.Maybe Types.PhysicalResourceId)
sePhysicalResourceId = Lens.field @"physicalResourceId"
{-# DEPRECATED sePhysicalResourceId "Use generic-lens or generic-optics with 'physicalResourceId' instead." #-}

-- | BLOB of the properties used to create the resource.
--
-- /Note:/ Consider using 'resourceProperties' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seResourceProperties :: Lens.Lens' StackEvent (Core.Maybe Types.ResourceProperties)
seResourceProperties = Lens.field @"resourceProperties"
{-# DEPRECATED seResourceProperties "Use generic-lens or generic-optics with 'resourceProperties' instead." #-}

-- | Current status of the resource.
--
-- /Note:/ Consider using 'resourceStatus' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seResourceStatus :: Lens.Lens' StackEvent (Core.Maybe Types.ResourceStatus)
seResourceStatus = Lens.field @"resourceStatus"
{-# DEPRECATED seResourceStatus "Use generic-lens or generic-optics with 'resourceStatus' instead." #-}

-- | Success/failure message associated with the resource.
--
-- /Note:/ Consider using 'resourceStatusReason' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seResourceStatusReason :: Lens.Lens' StackEvent (Core.Maybe Types.ResourceStatusReason)
seResourceStatusReason = Lens.field @"resourceStatusReason"
{-# DEPRECATED seResourceStatusReason "Use generic-lens or generic-optics with 'resourceStatusReason' instead." #-}

-- | Type of resource. (For more information, go to <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html AWS Resource Types Reference> in the AWS CloudFormation User Guide.)
--
-- /Note:/ Consider using 'resourceType' with <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/generic-optics generic-optics> instead.
seResourceType :: Lens.Lens' StackEvent (Core.Maybe Types.ResourceType)
seResourceType = Lens.field @"resourceType"
{-# DEPRECATED seResourceType "Use generic-lens or generic-optics with 'resourceType' instead." #-}

instance Core.FromXML StackEvent where
  parseXML x =
    StackEvent'
      Core.<$> (x Core..@ "StackId")
      Core.<*> (x Core..@ "EventId")
      Core.<*> (x Core..@ "StackName")
      Core.<*> (x Core..@ "Timestamp")
      Core.<*> (x Core..@? "ClientRequestToken")
      Core.<*> (x Core..@? "LogicalResourceId")
      Core.<*> (x Core..@? "PhysicalResourceId")
      Core.<*> (x Core..@? "ResourceProperties")
      Core.<*> (x Core..@? "ResourceStatus")
      Core.<*> (x Core..@? "ResourceStatusReason")
      Core.<*> (x Core..@? "ResourceType")
