{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.RDS.ModifyEventSubscription
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the @AddSourceIdentifierToSubscription@ and @RemoveSourceIdentifierFromSubscription@ calls.
--
--
-- You can see a list of the event categories for a given source type (@SourceType@ ) in <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html Events> in the /Amazon RDS User Guide/ or by using the @DescribeEventCategories@ operation.
module Network.AWS.RDS.ModifyEventSubscription
  ( -- * Creating a Request
    modifyEventSubscription,
    ModifyEventSubscription,

    -- * Request Lenses
    mesEnabled,
    mesEventCategories,
    mesSourceType,
    mesSNSTopicARN,
    mesSubscriptionName,

    -- * Destructuring the Response
    modifyEventSubscriptionResponse,
    ModifyEventSubscriptionResponse,

    -- * Response Lenses
    mesrrsEventSubscription,
    mesrrsResponseStatus,
  )
where

import Network.AWS.Lens
import Network.AWS.Prelude
import Network.AWS.RDS.Types
import Network.AWS.Request
import Network.AWS.Response

-- |
--
--
--
-- /See:/ 'modifyEventSubscription' smart constructor.
data ModifyEventSubscription = ModifyEventSubscription'
  { _mesEnabled ::
      !(Maybe Bool),
    _mesEventCategories ::
      !(Maybe [Text]),
    _mesSourceType ::
      !(Maybe Text),
    _mesSNSTopicARN ::
      !(Maybe Text),
    _mesSubscriptionName ::
      !Text
  }
  deriving
    ( Eq,
      Read,
      Show,
      Data,
      Typeable,
      Generic
    )

-- | Creates a value of 'ModifyEventSubscription' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'mesEnabled' - A value that indicates whether to activate the subscription.
--
-- * 'mesEventCategories' - A list of event categories for a source type (@SourceType@ ) that you want to subscribe to. You can see a list of the categories for a given source type in <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html Events> in the /Amazon RDS User Guide/ or by using the @DescribeEventCategories@ operation.
--
-- * 'mesSourceType' - The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned. Valid values: @db-instance@ | @db-cluster@ | @db-parameter-group@ | @db-security-group@ | @db-snapshot@ | @db-cluster-snapshot@
--
-- * 'mesSNSTopicARN' - The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
--
-- * 'mesSubscriptionName' - The name of the RDS event notification subscription.
modifyEventSubscription ::
  -- | 'mesSubscriptionName'
  Text ->
  ModifyEventSubscription
modifyEventSubscription pSubscriptionName_ =
  ModifyEventSubscription'
    { _mesEnabled = Nothing,
      _mesEventCategories = Nothing,
      _mesSourceType = Nothing,
      _mesSNSTopicARN = Nothing,
      _mesSubscriptionName = pSubscriptionName_
    }

-- | A value that indicates whether to activate the subscription.
mesEnabled :: Lens' ModifyEventSubscription (Maybe Bool)
mesEnabled = lens _mesEnabled (\s a -> s {_mesEnabled = a})

-- | A list of event categories for a source type (@SourceType@ ) that you want to subscribe to. You can see a list of the categories for a given source type in <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html Events> in the /Amazon RDS User Guide/ or by using the @DescribeEventCategories@ operation.
mesEventCategories :: Lens' ModifyEventSubscription [Text]
mesEventCategories = lens _mesEventCategories (\s a -> s {_mesEventCategories = a}) . _Default . _Coerce

-- | The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned. Valid values: @db-instance@ | @db-cluster@ | @db-parameter-group@ | @db-security-group@ | @db-snapshot@ | @db-cluster-snapshot@
mesSourceType :: Lens' ModifyEventSubscription (Maybe Text)
mesSourceType = lens _mesSourceType (\s a -> s {_mesSourceType = a})

-- | The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
mesSNSTopicARN :: Lens' ModifyEventSubscription (Maybe Text)
mesSNSTopicARN = lens _mesSNSTopicARN (\s a -> s {_mesSNSTopicARN = a})

-- | The name of the RDS event notification subscription.
mesSubscriptionName :: Lens' ModifyEventSubscription Text
mesSubscriptionName = lens _mesSubscriptionName (\s a -> s {_mesSubscriptionName = a})

instance AWSRequest ModifyEventSubscription where
  type
    Rs ModifyEventSubscription =
      ModifyEventSubscriptionResponse
  request = postQuery rds
  response =
    receiveXMLWrapper
      "ModifyEventSubscriptionResult"
      ( \s h x ->
          ModifyEventSubscriptionResponse'
            <$> (x .@? "EventSubscription") <*> (pure (fromEnum s))
      )

instance Hashable ModifyEventSubscription

instance NFData ModifyEventSubscription

instance ToHeaders ModifyEventSubscription where
  toHeaders = const mempty

instance ToPath ModifyEventSubscription where
  toPath = const "/"

instance ToQuery ModifyEventSubscription where
  toQuery ModifyEventSubscription' {..} =
    mconcat
      [ "Action"
          =: ("ModifyEventSubscription" :: ByteString),
        "Version" =: ("2014-10-31" :: ByteString),
        "Enabled" =: _mesEnabled,
        "EventCategories"
          =: toQuery
            ( toQueryList "EventCategory"
                <$> _mesEventCategories
            ),
        "SourceType" =: _mesSourceType,
        "SnsTopicArn" =: _mesSNSTopicARN,
        "SubscriptionName" =: _mesSubscriptionName
      ]

-- | /See:/ 'modifyEventSubscriptionResponse' smart constructor.
data ModifyEventSubscriptionResponse = ModifyEventSubscriptionResponse'
  { _mesrrsEventSubscription ::
      !( Maybe
           EventSubscription
       ),
    _mesrrsResponseStatus ::
      !Int
  }
  deriving
    ( Eq,
      Read,
      Show,
      Data,
      Typeable,
      Generic
    )

-- | Creates a value of 'ModifyEventSubscriptionResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'mesrrsEventSubscription' - Undocumented member.
--
-- * 'mesrrsResponseStatus' - -- | The response status code.
modifyEventSubscriptionResponse ::
  -- | 'mesrrsResponseStatus'
  Int ->
  ModifyEventSubscriptionResponse
modifyEventSubscriptionResponse pResponseStatus_ =
  ModifyEventSubscriptionResponse'
    { _mesrrsEventSubscription =
        Nothing,
      _mesrrsResponseStatus = pResponseStatus_
    }

-- | Undocumented member.
mesrrsEventSubscription :: Lens' ModifyEventSubscriptionResponse (Maybe EventSubscription)
mesrrsEventSubscription = lens _mesrrsEventSubscription (\s a -> s {_mesrrsEventSubscription = a})

-- | -- | The response status code.
mesrrsResponseStatus :: Lens' ModifyEventSubscriptionResponse Int
mesrrsResponseStatus = lens _mesrrsResponseStatus (\s a -> s {_mesrrsResponseStatus = a})

instance NFData ModifyEventSubscriptionResponse
