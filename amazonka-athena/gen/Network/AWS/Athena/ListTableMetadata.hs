{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListTableMetadata
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the metadata for the tables in the specified data catalog database.
--
--
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListTableMetadata
  ( -- * Creating a Request
    listTableMetadata,
    ListTableMetadata,

    -- * Request Lenses
    ltmNextToken,
    ltmMaxResults,
    ltmExpression,
    ltmCatalogName,
    ltmDatabaseName,

    -- * Destructuring the Response
    listTableMetadataResponse,
    ListTableMetadataResponse,

    -- * Response Lenses
    ltmrrsNextToken,
    ltmrrsTableMetadataList,
    ltmrrsResponseStatus,
  )
where

import Network.AWS.Athena.Types
import Network.AWS.Lens
import Network.AWS.Pager
import Network.AWS.Prelude
import Network.AWS.Request
import Network.AWS.Response

-- | /See:/ 'listTableMetadata' smart constructor.
data ListTableMetadata = ListTableMetadata'
  { _ltmNextToken ::
      !(Maybe Text),
    _ltmMaxResults :: !(Maybe Nat),
    _ltmExpression :: !(Maybe Text),
    _ltmCatalogName :: !Text,
    _ltmDatabaseName :: !Text
  }
  deriving (Eq, Read, Show, Data, Typeable, Generic)

-- | Creates a value of 'ListTableMetadata' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltmNextToken' - A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- * 'ltmMaxResults' - Specifies the maximum number of results to return.
--
-- * 'ltmExpression' - A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
--
-- * 'ltmCatalogName' - The name of the data catalog for which table metadata should be returned.
--
-- * 'ltmDatabaseName' - The name of the database for which table metadata should be returned.
listTableMetadata ::
  -- | 'ltmCatalogName'
  Text ->
  -- | 'ltmDatabaseName'
  Text ->
  ListTableMetadata
listTableMetadata pCatalogName_ pDatabaseName_ =
  ListTableMetadata'
    { _ltmNextToken = Nothing,
      _ltmMaxResults = Nothing,
      _ltmExpression = Nothing,
      _ltmCatalogName = pCatalogName_,
      _ltmDatabaseName = pDatabaseName_
    }

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
ltmNextToken :: Lens' ListTableMetadata (Maybe Text)
ltmNextToken = lens _ltmNextToken (\s a -> s {_ltmNextToken = a})

-- | Specifies the maximum number of results to return.
ltmMaxResults :: Lens' ListTableMetadata (Maybe Natural)
ltmMaxResults = lens _ltmMaxResults (\s a -> s {_ltmMaxResults = a}) . mapping _Nat

-- | A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
ltmExpression :: Lens' ListTableMetadata (Maybe Text)
ltmExpression = lens _ltmExpression (\s a -> s {_ltmExpression = a})

-- | The name of the data catalog for which table metadata should be returned.
ltmCatalogName :: Lens' ListTableMetadata Text
ltmCatalogName = lens _ltmCatalogName (\s a -> s {_ltmCatalogName = a})

-- | The name of the database for which table metadata should be returned.
ltmDatabaseName :: Lens' ListTableMetadata Text
ltmDatabaseName = lens _ltmDatabaseName (\s a -> s {_ltmDatabaseName = a})

instance AWSPager ListTableMetadata where
  page rq rs
    | stop (rs ^. ltmrrsNextToken) = Nothing
    | stop (rs ^. ltmrrsTableMetadataList) = Nothing
    | otherwise =
      Just $ rq & ltmNextToken .~ rs ^. ltmrrsNextToken

instance AWSRequest ListTableMetadata where
  type Rs ListTableMetadata = ListTableMetadataResponse
  request = postJSON athena
  response =
    receiveJSON
      ( \s h x ->
          ListTableMetadataResponse'
            <$> (x .?> "NextToken")
            <*> (x .?> "TableMetadataList" .!@ mempty)
            <*> (pure (fromEnum s))
      )

instance Hashable ListTableMetadata

instance NFData ListTableMetadata

instance ToHeaders ListTableMetadata where
  toHeaders =
    const
      ( mconcat
          [ "X-Amz-Target"
              =# ("AmazonAthena.ListTableMetadata" :: ByteString),
            "Content-Type"
              =# ("application/x-amz-json-1.1" :: ByteString)
          ]
      )

instance ToJSON ListTableMetadata where
  toJSON ListTableMetadata' {..} =
    object
      ( catMaybes
          [ ("NextToken" .=) <$> _ltmNextToken,
            ("MaxResults" .=) <$> _ltmMaxResults,
            ("Expression" .=) <$> _ltmExpression,
            Just ("CatalogName" .= _ltmCatalogName),
            Just ("DatabaseName" .= _ltmDatabaseName)
          ]
      )

instance ToPath ListTableMetadata where
  toPath = const "/"

instance ToQuery ListTableMetadata where
  toQuery = const mempty

-- | /See:/ 'listTableMetadataResponse' smart constructor.
data ListTableMetadataResponse = ListTableMetadataResponse'
  { _ltmrrsNextToken ::
      !(Maybe Text),
    _ltmrrsTableMetadataList ::
      !( Maybe
           [TableMetadata]
       ),
    _ltmrrsResponseStatus ::
      !Int
  }
  deriving
    ( Eq,
      Read,
      Show,
      Data,
      Typeable,
      Generic
    )

-- | Creates a value of 'ListTableMetadataResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltmrrsNextToken' - A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
--
-- * 'ltmrrsTableMetadataList' - A list of table metadata.
--
-- * 'ltmrrsResponseStatus' - -- | The response status code.
listTableMetadataResponse ::
  -- | 'ltmrrsResponseStatus'
  Int ->
  ListTableMetadataResponse
listTableMetadataResponse pResponseStatus_ =
  ListTableMetadataResponse'
    { _ltmrrsNextToken =
        Nothing,
      _ltmrrsTableMetadataList = Nothing,
      _ltmrrsResponseStatus = pResponseStatus_
    }

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
ltmrrsNextToken :: Lens' ListTableMetadataResponse (Maybe Text)
ltmrrsNextToken = lens _ltmrrsNextToken (\s a -> s {_ltmrrsNextToken = a})

-- | A list of table metadata.
ltmrrsTableMetadataList :: Lens' ListTableMetadataResponse [TableMetadata]
ltmrrsTableMetadataList = lens _ltmrrsTableMetadataList (\s a -> s {_ltmrrsTableMetadataList = a}) . _Default . _Coerce

-- | -- | The response status code.
ltmrrsResponseStatus :: Lens' ListTableMetadataResponse Int
ltmrrsResponseStatus = lens _ltmrrsResponseStatus (\s a -> s {_ltmrrsResponseStatus = a})

instance NFData ListTableMetadataResponse
