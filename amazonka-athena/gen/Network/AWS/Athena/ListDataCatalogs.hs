{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListDataCatalogs
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the data catalogs in the current AWS account.
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListDataCatalogs
  ( -- * Creating a Request
    ListDataCatalogs (..),
    newListDataCatalogs,

    -- * Request Lenses
    listDataCatalogs_nextToken,
    listDataCatalogs_maxResults,

    -- * Destructuring the Response
    ListDataCatalogsResponse (..),
    newListDataCatalogsResponse,

    -- * Response Lenses
    listDataCatalogsResponse_nextToken,
    listDataCatalogsResponse_dataCatalogsSummary,
    listDataCatalogsResponse_httpStatus,
  )
where

import Network.AWS.Athena.Types
import Network.AWS.Athena.Types.DataCatalogSummary
import qualified Network.AWS.Lens as Lens
import qualified Network.AWS.Pager as Pager
import qualified Network.AWS.Prelude as Prelude
import qualified Network.AWS.Request as Request
import qualified Network.AWS.Response as Response

-- | /See:/ 'newListDataCatalogs' smart constructor.
data ListDataCatalogs = ListDataCatalogs'
  { -- | A token generated by the Athena service that specifies where to continue
    -- pagination if a previous request was truncated. To obtain the next set
    -- of pages, pass in the NextToken from the response object of the previous
    -- page call.
    nextToken :: Prelude.Maybe Prelude.Text,
    -- | Specifies the maximum number of data catalogs to return.
    maxResults :: Prelude.Maybe Prelude.Nat
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Data, Prelude.Typeable, Prelude.Generic)

-- |
-- Create a value of 'ListDataCatalogs' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listDataCatalogs_nextToken' - A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the NextToken from the response object of the previous
-- page call.
--
-- 'maxResults', 'listDataCatalogs_maxResults' - Specifies the maximum number of data catalogs to return.
newListDataCatalogs ::
  ListDataCatalogs
newListDataCatalogs =
  ListDataCatalogs'
    { nextToken = Prelude.Nothing,
      maxResults = Prelude.Nothing
    }

-- | A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the NextToken from the response object of the previous
-- page call.
listDataCatalogs_nextToken :: Lens.Lens' ListDataCatalogs (Prelude.Maybe Prelude.Text)
listDataCatalogs_nextToken = Lens.lens (\ListDataCatalogs' {nextToken} -> nextToken) (\s@ListDataCatalogs' {} a -> s {nextToken = a} :: ListDataCatalogs)

-- | Specifies the maximum number of data catalogs to return.
listDataCatalogs_maxResults :: Lens.Lens' ListDataCatalogs (Prelude.Maybe Prelude.Natural)
listDataCatalogs_maxResults = Lens.lens (\ListDataCatalogs' {maxResults} -> maxResults) (\s@ListDataCatalogs' {} a -> s {maxResults = a} :: ListDataCatalogs) Prelude.. Lens.mapping Prelude._Nat

instance Pager.AWSPager ListDataCatalogs where
  page rq rs
    | Pager.stop
        ( rs
            Lens.^? listDataCatalogsResponse_nextToken
              Prelude.. Lens._Just
        ) =
      Prelude.Nothing
    | Pager.stop
        ( rs
            Lens.^? listDataCatalogsResponse_dataCatalogsSummary
              Prelude.. Lens._Just
        ) =
      Prelude.Nothing
    | Prelude.otherwise =
      Prelude.Just Prelude.$
        rq
          Lens.& listDataCatalogs_nextToken
          Lens..~ rs
          Lens.^? listDataCatalogsResponse_nextToken
            Prelude.. Lens._Just

instance Prelude.AWSRequest ListDataCatalogs where
  type Rs ListDataCatalogs = ListDataCatalogsResponse
  request = Request.postJSON defaultService
  response =
    Response.receiveJSON
      ( \s h x ->
          ListDataCatalogsResponse'
            Prelude.<$> (x Prelude..?> "NextToken")
            Prelude.<*> ( x Prelude..?> "DataCatalogsSummary"
                            Prelude..!@ Prelude.mempty
                        )
            Prelude.<*> (Prelude.pure (Prelude.fromEnum s))
      )

instance Prelude.Hashable ListDataCatalogs

instance Prelude.NFData ListDataCatalogs

instance Prelude.ToHeaders ListDataCatalogs where
  toHeaders =
    Prelude.const
      ( Prelude.mconcat
          [ "X-Amz-Target"
              Prelude.=# ( "AmazonAthena.ListDataCatalogs" ::
                             Prelude.ByteString
                         ),
            "Content-Type"
              Prelude.=# ( "application/x-amz-json-1.1" ::
                             Prelude.ByteString
                         )
          ]
      )

instance Prelude.ToJSON ListDataCatalogs where
  toJSON ListDataCatalogs' {..} =
    Prelude.object
      ( Prelude.catMaybes
          [ ("NextToken" Prelude..=) Prelude.<$> nextToken,
            ("MaxResults" Prelude..=) Prelude.<$> maxResults
          ]
      )

instance Prelude.ToPath ListDataCatalogs where
  toPath = Prelude.const "/"

instance Prelude.ToQuery ListDataCatalogs where
  toQuery = Prelude.const Prelude.mempty

-- | /See:/ 'newListDataCatalogsResponse' smart constructor.
data ListDataCatalogsResponse = ListDataCatalogsResponse'
  { -- | A token generated by the Athena service that specifies where to continue
    -- pagination if a previous request was truncated. To obtain the next set
    -- of pages, pass in the NextToken from the response object of the previous
    -- page call.
    nextToken :: Prelude.Maybe Prelude.Text,
    -- | A summary list of data catalogs.
    dataCatalogsSummary :: Prelude.Maybe [DataCatalogSummary],
    -- | The response's http status code.
    httpStatus :: Prelude.Int
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Data, Prelude.Typeable, Prelude.Generic)

-- |
-- Create a value of 'ListDataCatalogsResponse' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'nextToken', 'listDataCatalogsResponse_nextToken' - A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the NextToken from the response object of the previous
-- page call.
--
-- 'dataCatalogsSummary', 'listDataCatalogsResponse_dataCatalogsSummary' - A summary list of data catalogs.
--
-- 'httpStatus', 'listDataCatalogsResponse_httpStatus' - The response's http status code.
newListDataCatalogsResponse ::
  -- | 'httpStatus'
  Prelude.Int ->
  ListDataCatalogsResponse
newListDataCatalogsResponse pHttpStatus_ =
  ListDataCatalogsResponse'
    { nextToken =
        Prelude.Nothing,
      dataCatalogsSummary = Prelude.Nothing,
      httpStatus = pHttpStatus_
    }

-- | A token generated by the Athena service that specifies where to continue
-- pagination if a previous request was truncated. To obtain the next set
-- of pages, pass in the NextToken from the response object of the previous
-- page call.
listDataCatalogsResponse_nextToken :: Lens.Lens' ListDataCatalogsResponse (Prelude.Maybe Prelude.Text)
listDataCatalogsResponse_nextToken = Lens.lens (\ListDataCatalogsResponse' {nextToken} -> nextToken) (\s@ListDataCatalogsResponse' {} a -> s {nextToken = a} :: ListDataCatalogsResponse)

-- | A summary list of data catalogs.
listDataCatalogsResponse_dataCatalogsSummary :: Lens.Lens' ListDataCatalogsResponse (Prelude.Maybe [DataCatalogSummary])
listDataCatalogsResponse_dataCatalogsSummary = Lens.lens (\ListDataCatalogsResponse' {dataCatalogsSummary} -> dataCatalogsSummary) (\s@ListDataCatalogsResponse' {} a -> s {dataCatalogsSummary = a} :: ListDataCatalogsResponse) Prelude.. Lens.mapping Prelude._Coerce

-- | The response's http status code.
listDataCatalogsResponse_httpStatus :: Lens.Lens' ListDataCatalogsResponse Prelude.Int
listDataCatalogsResponse_httpStatus = Lens.lens (\ListDataCatalogsResponse' {httpStatus} -> httpStatus) (\s@ListDataCatalogsResponse' {} a -> s {httpStatus = a} :: ListDataCatalogsResponse)

instance Prelude.NFData ListDataCatalogsResponse
