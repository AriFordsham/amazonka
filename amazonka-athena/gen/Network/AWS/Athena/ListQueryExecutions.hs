{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Athena.ListQueryExecutions
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Provides a list of available query execution IDs for the queries in the specified workgroup. If a workgroup is not specified, returns a list of query execution IDs for the primary workgroup. Requires you to have access to the workgroup in which the queries ran.
--
--
-- For code samples using the AWS SDK for Java, see <http://docs.aws.amazon.com/athena/latest/ug/code-samples.html Examples and Code Samples> in the /Amazon Athena User Guide/ .
--
--
-- This operation returns paginated results.
module Network.AWS.Athena.ListQueryExecutions
  ( -- * Creating a Request
    listQueryExecutions,
    ListQueryExecutions,

    -- * Request Lenses
    lqeNextToken,
    lqeMaxResults,
    lqeWorkGroup,

    -- * Destructuring the Response
    listQueryExecutionsResponse,
    ListQueryExecutionsResponse,

    -- * Response Lenses
    lqerrsNextToken,
    lqerrsQueryExecutionIds,
    lqerrsResponseStatus,
  )
where

import Network.AWS.Athena.Types
import Network.AWS.Lens
import Network.AWS.Pager
import Network.AWS.Prelude
import Network.AWS.Request
import Network.AWS.Response

-- | /See:/ 'listQueryExecutions' smart constructor.
data ListQueryExecutions = ListQueryExecutions'
  { _lqeNextToken ::
      !(Maybe Text),
    _lqeMaxResults :: !(Maybe Nat),
    _lqeWorkGroup :: !(Maybe Text)
  }
  deriving (Eq, Read, Show, Data, Typeable, Generic)

-- | Creates a value of 'ListQueryExecutions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lqeNextToken' - A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
--
-- * 'lqeMaxResults' - The maximum number of query executions to return in this request.
--
-- * 'lqeWorkGroup' - The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
listQueryExecutions ::
  ListQueryExecutions
listQueryExecutions =
  ListQueryExecutions'
    { _lqeNextToken = Nothing,
      _lqeMaxResults = Nothing,
      _lqeWorkGroup = Nothing
    }

-- | A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the @NextToken@ from the response object of the previous page call.
lqeNextToken :: Lens' ListQueryExecutions (Maybe Text)
lqeNextToken = lens _lqeNextToken (\s a -> s {_lqeNextToken = a})

-- | The maximum number of query executions to return in this request.
lqeMaxResults :: Lens' ListQueryExecutions (Maybe Natural)
lqeMaxResults = lens _lqeMaxResults (\s a -> s {_lqeMaxResults = a}) . mapping _Nat

-- | The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
lqeWorkGroup :: Lens' ListQueryExecutions (Maybe Text)
lqeWorkGroup = lens _lqeWorkGroup (\s a -> s {_lqeWorkGroup = a})

instance AWSPager ListQueryExecutions where
  page rq rs
    | stop (rs ^. lqerrsNextToken) = Nothing
    | stop (rs ^. lqerrsQueryExecutionIds) = Nothing
    | otherwise =
      Just $ rq & lqeNextToken .~ rs ^. lqerrsNextToken

instance AWSRequest ListQueryExecutions where
  type
    Rs ListQueryExecutions =
      ListQueryExecutionsResponse
  request = postJSON athena
  response =
    receiveJSON
      ( \s h x ->
          ListQueryExecutionsResponse'
            <$> (x .?> "NextToken")
            <*> (x .?> "QueryExecutionIds")
            <*> (pure (fromEnum s))
      )

instance Hashable ListQueryExecutions

instance NFData ListQueryExecutions

instance ToHeaders ListQueryExecutions where
  toHeaders =
    const
      ( mconcat
          [ "X-Amz-Target"
              =# ("AmazonAthena.ListQueryExecutions" :: ByteString),
            "Content-Type"
              =# ("application/x-amz-json-1.1" :: ByteString)
          ]
      )

instance ToJSON ListQueryExecutions where
  toJSON ListQueryExecutions' {..} =
    object
      ( catMaybes
          [ ("NextToken" .=) <$> _lqeNextToken,
            ("MaxResults" .=) <$> _lqeMaxResults,
            ("WorkGroup" .=) <$> _lqeWorkGroup
          ]
      )

instance ToPath ListQueryExecutions where
  toPath = const "/"

instance ToQuery ListQueryExecutions where
  toQuery = const mempty

-- | /See:/ 'listQueryExecutionsResponse' smart constructor.
data ListQueryExecutionsResponse = ListQueryExecutionsResponse'
  { _lqerrsNextToken ::
      !(Maybe Text),
    _lqerrsQueryExecutionIds ::
      !( Maybe
           ( List1
               Text
           )
       ),
    _lqerrsResponseStatus ::
      !Int
  }
  deriving
    ( Eq,
      Read,
      Show,
      Data,
      Typeable,
      Generic
    )

-- | Creates a value of 'ListQueryExecutionsResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lqerrsNextToken' - A token to be used by the next request if this request is truncated.
--
-- * 'lqerrsQueryExecutionIds' - The unique IDs of each query execution as an array of strings.
--
-- * 'lqerrsResponseStatus' - -- | The response status code.
listQueryExecutionsResponse ::
  -- | 'lqerrsResponseStatus'
  Int ->
  ListQueryExecutionsResponse
listQueryExecutionsResponse pResponseStatus_ =
  ListQueryExecutionsResponse'
    { _lqerrsNextToken =
        Nothing,
      _lqerrsQueryExecutionIds = Nothing,
      _lqerrsResponseStatus = pResponseStatus_
    }

-- | A token to be used by the next request if this request is truncated.
lqerrsNextToken :: Lens' ListQueryExecutionsResponse (Maybe Text)
lqerrsNextToken = lens _lqerrsNextToken (\s a -> s {_lqerrsNextToken = a})

-- | The unique IDs of each query execution as an array of strings.
lqerrsQueryExecutionIds :: Lens' ListQueryExecutionsResponse (Maybe (NonEmpty Text))
lqerrsQueryExecutionIds = lens _lqerrsQueryExecutionIds (\s a -> s {_lqerrsQueryExecutionIds = a}) . mapping _List1

-- | -- | The response status code.
lqerrsResponseStatus :: Lens' ListQueryExecutionsResponse Int
lqerrsResponseStatus = lens _lqerrsResponseStatus (\s a -> s {_lqerrsResponseStatus = a})

instance NFData ListQueryExecutionsResponse
