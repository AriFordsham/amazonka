{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.IoT.ListViolationEvents
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
--
--
--
-- This operation returns paginated results.
module Network.AWS.IoT.ListViolationEvents
  ( -- * Creating a Request
    listViolationEvents,
    ListViolationEvents,

    -- * Request Lenses
    lveNextToken,
    lveMaxResults,
    lveThingName,
    lveSecurityProfileName,
    lveListSuppressedAlerts,
    lveBehaviorCriteriaType,
    lveStartTime,
    lveEndTime,

    -- * Destructuring the Response
    listViolationEventsResponse,
    ListViolationEventsResponse,

    -- * Response Lenses
    lverrsNextToken,
    lverrsViolationEvents,
    lverrsResponseStatus,
  )
where

import Network.AWS.IoT.Types
import Network.AWS.Lens
import Network.AWS.Pager
import Network.AWS.Prelude
import Network.AWS.Request
import Network.AWS.Response

-- | /See:/ 'listViolationEvents' smart constructor.
data ListViolationEvents = ListViolationEvents'
  { _lveNextToken ::
      !(Maybe Text),
    _lveMaxResults :: !(Maybe Nat),
    _lveThingName :: !(Maybe Text),
    _lveSecurityProfileName ::
      !(Maybe Text),
    _lveListSuppressedAlerts ::
      !(Maybe Bool),
    _lveBehaviorCriteriaType ::
      !(Maybe BehaviorCriteriaType),
    _lveStartTime :: !POSIX,
    _lveEndTime :: !POSIX
  }
  deriving (Eq, Read, Show, Data, Typeable, Generic)

-- | Creates a value of 'ListViolationEvents' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lveNextToken' - The token for the next set of results.
--
-- * 'lveMaxResults' - The maximum number of results to return at one time.
--
-- * 'lveThingName' - A filter to limit results to those alerts caused by the specified thing.
--
-- * 'lveSecurityProfileName' - A filter to limit results to those alerts generated by the specified security profile.
--
-- * 'lveListSuppressedAlerts' - A list of all suppressed alerts.
--
-- * 'lveBehaviorCriteriaType' - The criteria for a behavior.
--
-- * 'lveStartTime' - The start time for the alerts to be listed.
--
-- * 'lveEndTime' - The end time for the alerts to be listed.
listViolationEvents ::
  -- | 'lveStartTime'
  UTCTime ->
  -- | 'lveEndTime'
  UTCTime ->
  ListViolationEvents
listViolationEvents pStartTime_ pEndTime_ =
  ListViolationEvents'
    { _lveNextToken = Nothing,
      _lveMaxResults = Nothing,
      _lveThingName = Nothing,
      _lveSecurityProfileName = Nothing,
      _lveListSuppressedAlerts = Nothing,
      _lveBehaviorCriteriaType = Nothing,
      _lveStartTime = _Time # pStartTime_,
      _lveEndTime = _Time # pEndTime_
    }

-- | The token for the next set of results.
lveNextToken :: Lens' ListViolationEvents (Maybe Text)
lveNextToken = lens _lveNextToken (\s a -> s {_lveNextToken = a})

-- | The maximum number of results to return at one time.
lveMaxResults :: Lens' ListViolationEvents (Maybe Natural)
lveMaxResults = lens _lveMaxResults (\s a -> s {_lveMaxResults = a}) . mapping _Nat

-- | A filter to limit results to those alerts caused by the specified thing.
lveThingName :: Lens' ListViolationEvents (Maybe Text)
lveThingName = lens _lveThingName (\s a -> s {_lveThingName = a})

-- | A filter to limit results to those alerts generated by the specified security profile.
lveSecurityProfileName :: Lens' ListViolationEvents (Maybe Text)
lveSecurityProfileName = lens _lveSecurityProfileName (\s a -> s {_lveSecurityProfileName = a})

-- | A list of all suppressed alerts.
lveListSuppressedAlerts :: Lens' ListViolationEvents (Maybe Bool)
lveListSuppressedAlerts = lens _lveListSuppressedAlerts (\s a -> s {_lveListSuppressedAlerts = a})

-- | The criteria for a behavior.
lveBehaviorCriteriaType :: Lens' ListViolationEvents (Maybe BehaviorCriteriaType)
lveBehaviorCriteriaType = lens _lveBehaviorCriteriaType (\s a -> s {_lveBehaviorCriteriaType = a})

-- | The start time for the alerts to be listed.
lveStartTime :: Lens' ListViolationEvents UTCTime
lveStartTime = lens _lveStartTime (\s a -> s {_lveStartTime = a}) . _Time

-- | The end time for the alerts to be listed.
lveEndTime :: Lens' ListViolationEvents UTCTime
lveEndTime = lens _lveEndTime (\s a -> s {_lveEndTime = a}) . _Time

instance AWSPager ListViolationEvents where
  page rq rs
    | stop (rs ^. lverrsNextToken) = Nothing
    | stop (rs ^. lverrsViolationEvents) = Nothing
    | otherwise =
      Just $ rq & lveNextToken .~ rs ^. lverrsNextToken

instance AWSRequest ListViolationEvents where
  type
    Rs ListViolationEvents =
      ListViolationEventsResponse
  request = get ioT
  response =
    receiveJSON
      ( \s h x ->
          ListViolationEventsResponse'
            <$> (x .?> "nextToken")
            <*> (x .?> "violationEvents" .!@ mempty)
            <*> (pure (fromEnum s))
      )

instance Hashable ListViolationEvents

instance NFData ListViolationEvents

instance ToHeaders ListViolationEvents where
  toHeaders = const mempty

instance ToPath ListViolationEvents where
  toPath = const "/violation-events"

instance ToQuery ListViolationEvents where
  toQuery ListViolationEvents' {..} =
    mconcat
      [ "nextToken" =: _lveNextToken,
        "maxResults" =: _lveMaxResults,
        "thingName" =: _lveThingName,
        "securityProfileName" =: _lveSecurityProfileName,
        "listSuppressedAlerts" =: _lveListSuppressedAlerts,
        "behaviorCriteriaType" =: _lveBehaviorCriteriaType,
        "startTime" =: _lveStartTime,
        "endTime" =: _lveEndTime
      ]

-- | /See:/ 'listViolationEventsResponse' smart constructor.
data ListViolationEventsResponse = ListViolationEventsResponse'
  { _lverrsNextToken ::
      !(Maybe Text),
    _lverrsViolationEvents ::
      !( Maybe
           [ViolationEvent]
       ),
    _lverrsResponseStatus ::
      !Int
  }
  deriving
    ( Eq,
      Read,
      Show,
      Data,
      Typeable,
      Generic
    )

-- | Creates a value of 'ListViolationEventsResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lverrsNextToken' - A token that can be used to retrieve the next set of results, or @null@ if there are no additional results.
--
-- * 'lverrsViolationEvents' - The security profile violation alerts issued for this account during the given time period, potentially filtered by security profile, behavior violated, or thing (device) violating.
--
-- * 'lverrsResponseStatus' - -- | The response status code.
listViolationEventsResponse ::
  -- | 'lverrsResponseStatus'
  Int ->
  ListViolationEventsResponse
listViolationEventsResponse pResponseStatus_ =
  ListViolationEventsResponse'
    { _lverrsNextToken =
        Nothing,
      _lverrsViolationEvents = Nothing,
      _lverrsResponseStatus = pResponseStatus_
    }

-- | A token that can be used to retrieve the next set of results, or @null@ if there are no additional results.
lverrsNextToken :: Lens' ListViolationEventsResponse (Maybe Text)
lverrsNextToken = lens _lverrsNextToken (\s a -> s {_lverrsNextToken = a})

-- | The security profile violation alerts issued for this account during the given time period, potentially filtered by security profile, behavior violated, or thing (device) violating.
lverrsViolationEvents :: Lens' ListViolationEventsResponse [ViolationEvent]
lverrsViolationEvents = lens _lverrsViolationEvents (\s a -> s {_lverrsViolationEvents = a}) . _Default . _Coerce

-- | -- | The response status code.
lverrsResponseStatus :: Lens' ListViolationEventsResponse Int
lverrsResponseStatus = lens _lverrsResponseStatus (\s a -> s {_lverrsResponseStatus = a})

instance NFData ListViolationEventsResponse
