{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.StepFunctions.SendTaskFailure
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Used by activity workers and task states using the <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token callback> pattern to report that the task identified by the @taskToken@ failed.
module Network.AWS.StepFunctions.SendTaskFailure
  ( -- * Creating a Request
    sendTaskFailure,
    SendTaskFailure,

    -- * Request Lenses
    stfCause,
    stfError,
    stfTaskToken,

    -- * Destructuring the Response
    sendTaskFailureResponse,
    SendTaskFailureResponse,

    -- * Response Lenses
    stfrrsResponseStatus,
  )
where

import Network.AWS.Lens
import Network.AWS.Prelude
import Network.AWS.Request
import Network.AWS.Response
import Network.AWS.StepFunctions.Types

-- | /See:/ 'sendTaskFailure' smart constructor.
data SendTaskFailure = SendTaskFailure'
  { _stfCause ::
      !(Maybe (Sensitive Text)),
    _stfError :: !(Maybe (Sensitive Text)),
    _stfTaskToken :: !Text
  }
  deriving (Eq, Show, Data, Typeable, Generic)

-- | Creates a value of 'SendTaskFailure' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'stfCause' - A more detailed explanation of the cause of the failure.
--
-- * 'stfError' - The error code of the failure.
--
-- * 'stfTaskToken' - The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
sendTaskFailure ::
  -- | 'stfTaskToken'
  Text ->
  SendTaskFailure
sendTaskFailure pTaskToken_ =
  SendTaskFailure'
    { _stfCause = Nothing,
      _stfError = Nothing,
      _stfTaskToken = pTaskToken_
    }

-- | A more detailed explanation of the cause of the failure.
stfCause :: Lens' SendTaskFailure (Maybe Text)
stfCause = lens _stfCause (\s a -> s {_stfCause = a}) . mapping _Sensitive

-- | The error code of the failure.
stfError :: Lens' SendTaskFailure (Maybe Text)
stfError = lens _stfError (\s a -> s {_stfError = a}) . mapping _Sensitive

-- | The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html context object> when a workflow enters a task state. See 'GetActivityTaskOutput$taskToken' .
stfTaskToken :: Lens' SendTaskFailure Text
stfTaskToken = lens _stfTaskToken (\s a -> s {_stfTaskToken = a})

instance AWSRequest SendTaskFailure where
  type Rs SendTaskFailure = SendTaskFailureResponse
  request = postJSON stepFunctions
  response =
    receiveEmpty
      ( \s h x ->
          SendTaskFailureResponse' <$> (pure (fromEnum s))
      )

instance Hashable SendTaskFailure

instance NFData SendTaskFailure

instance ToHeaders SendTaskFailure where
  toHeaders =
    const
      ( mconcat
          [ "X-Amz-Target"
              =# ("AWSStepFunctions.SendTaskFailure" :: ByteString),
            "Content-Type"
              =# ("application/x-amz-json-1.0" :: ByteString)
          ]
      )

instance ToJSON SendTaskFailure where
  toJSON SendTaskFailure' {..} =
    object
      ( catMaybes
          [ ("cause" .=) <$> _stfCause,
            ("error" .=) <$> _stfError,
            Just ("taskToken" .= _stfTaskToken)
          ]
      )

instance ToPath SendTaskFailure where
  toPath = const "/"

instance ToQuery SendTaskFailure where
  toQuery = const mempty

-- | /See:/ 'sendTaskFailureResponse' smart constructor.
newtype SendTaskFailureResponse = SendTaskFailureResponse'
  { _stfrrsResponseStatus ::
      Int
  }
  deriving
    ( Eq,
      Read,
      Show,
      Data,
      Typeable,
      Generic
    )

-- | Creates a value of 'SendTaskFailureResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'stfrrsResponseStatus' - -- | The response status code.
sendTaskFailureResponse ::
  -- | 'stfrrsResponseStatus'
  Int ->
  SendTaskFailureResponse
sendTaskFailureResponse pResponseStatus_ =
  SendTaskFailureResponse'
    { _stfrrsResponseStatus =
        pResponseStatus_
    }

-- | -- | The response status code.
stfrrsResponseStatus :: Lens' SendTaskFailureResponse Int
stfrrsResponseStatus = lens _stfrrsResponseStatus (\s a -> s {_stfrrsResponseStatus = a})

instance NFData SendTaskFailureResponse
